# generated by datamodel-codegen:
#   filename:  https://developers.pipedrive.com/docs/api/v1/openapi.yaml
#   timestamp: 2024-05-08T23:07:30+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field


class GrantType(Enum):
    authorization_code = 'authorization_code'
    refresh_token = 'refresh_token'


class OauthTokenPostRequest(BaseModel):
    grant_type: Optional[GrantType] = Field(
        'authorization_code',
        description='Since you are trying to exchange an authorization code for a pair of tokens, you must use the value "authorization_code"',
    )
    code: Optional[str] = Field(
        None,
        description='The authorization code that you received after the user confirmed app installation',
    )
    redirect_uri: Optional[str] = Field(
        None, description='The callback URL you provided when you registered your app'
    )


class OauthTokenPostResponse(BaseModel):
    access_token: Optional[str] = Field(
        None,
        description="You need to use an `access_token` for accessing the user's data via API. You will need to [refresh the access token](https://pipedrive.readme.io/docs/marketplace-oauth-authorization#step-7-refreshing-the-tokens) if the `access_token` becomes invalid.",
    )
    token_type: Optional[str] = Field(
        None, description='The format of the token. Always "Bearer".'
    )
    refresh_token: Optional[str] = Field(
        None,
        description="A refresh token is needed when you refresh the access token. refresh_token will expire if it isn't used in 60 days. Each time refresh_token is used, its expiry date is reset back to 60 days.",
    )
    scope: Optional[str] = Field(
        None,
        description='List of scopes to which users have agreed to grant access within this `access_token`',
    )
    expires_in: Optional[int] = Field(
        None, description='The maximum time in seconds until the `access_token` expires'
    )
    api_domain: Optional[str] = Field(
        None,
        description='The base URL path, including the company_domain, where the requests can be sent to',
    )


class OauthTokenPostRequest1(BaseModel):
    grant_type: Optional[GrantType] = Field(
        'refresh_token',
        description='Since you are to refresh your access_token, you must use the value "refresh_token"',
    )
    refresh_token: Optional[str] = Field(
        None,
        description='The refresh token that you received after you exchanged the authorization code',
    )


class Data(BaseModel):
    id: Optional[List[int]] = Field(
        None, description='An array of the IDs of activities that were deleted'
    )


class ActivitiesDeleteResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data] = None


class Done(Enum):
    number_0 = 0
    number_1 = 1


class Datum(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.',
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    reference_type: Optional[str] = Field(
        None,
        description='If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.',
    )
    reference_id: Optional[int] = Field(
        None,
        description='Together with the `reference_type`, gives the ID of the other object',
    )
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    last_notification_time: Optional[str] = Field(
        None,
        description='The date and time of latest notifications sent about this activity to the participants or the attendees of this activity',
    )
    last_notification_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity',
    )
    notification_language_id: Optional[int] = Field(
        None, description='The ID of the language the notifications are sent in'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    gcal_event_id: Optional[str] = Field(
        None,
        description='For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_id: Optional[str] = Field(
        None,
        description='The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_etag: Optional[str] = Field(
        None,
        description='The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    calendar_sync_include_context: Optional[str] = Field(
        None,
        description='For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)',
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    rec_rule: Optional[str] = Field(
        None,
        description='The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"',
    )
    rec_rule_extension: Optional[str] = Field(
        None,
        description='Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.',
    )
    rec_master_activity_id: Optional[int] = Field(
        None,
        description='The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules',
    )
    series: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the activity'
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )
    org_name: Optional[str] = Field(
        None,
        description='The name of the organization this activity is associated with',
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person this activity is associated with'
    )
    deal_title: Optional[str] = Field(
        None, description='The name of the deal this activity is associated with'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the user this activity is owned by'
    )
    person_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the person'
    )
    deal_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the deal'
    )
    assigned_to_user_id: Optional[int] = Field(
        None,
        description='The ID of the user to whom the activity is assigned to. Equal to `user_id`.',
    )
    file: Optional[Dict[str, Any]] = Field(
        None,
        description='The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.',
    )


class Pagination(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='Whether there are more list items in the collection than displayed',
    )
    next_start: Optional[int] = Field(None, description='Next pagination start')


class AdditionalData(BaseModel):
    pagination: Optional[Pagination] = Field(
        None, description='Pagination details of the list'
    )


class USERID(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the user')
    name: Optional[str] = Field(None, description='The name of the user')
    email: Optional[str] = Field(None, description='The email of the user')
    has_pic: Optional[int] = Field(
        None,
        description='Whether the user has picture or not. 0 = No picture, 1 = Has picture.',
    )
    pic_hash: Optional[str] = Field(None, description='The user picture hash')
    active_flag: Optional[bool] = Field(
        None, description='Whether the user is active or not'
    )


class User(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class DEALID(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the deal associated with the item'
    )
    title: Optional[str] = Field(
        None, description='The title of the deal associated with the item'
    )
    status: Optional[str] = Field(
        None, description='The status of the deal associated with the item'
    )
    value: Optional[float] = Field(
        None, description='The value of the deal that is associated with the item'
    )
    currency: Optional[str] = Field(None, description='The currency of the deal value')
    stage_id: Optional[int] = Field(
        None, description='The ID of the stage the deal is currently at'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline the deal is in'
    )


class Deal(BaseModel):
    DEAL_ID: Optional[DEALID] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class EmailItem(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person(BaseModel):
    PERSON_ID: Optional[PERSONID] = Field(
        None, description='The ID of the person associated with the item'
    )


class ORGANIZATIONID(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects(BaseModel):
    user: Optional[User] = None
    deal: Optional[Deal] = None
    person: Optional[Person] = None
    organization: Optional[Organization] = None


class ActivitiesGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum]] = None
    additional_data: Optional[AdditionalData] = None
    related_objects: Optional[RelatedObjects] = None


class Done1(BaseModel):
    pass


class ActivitiesPostRequest(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    subject: Optional[str] = Field(
        None,
        description='The subject of the activity. When value for subject is not set, it will be given a default value `Call`.',
    )
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes. When value for type is not set, it will be given a default value `Call`.',
    )
    user_id: Optional[int] = Field(
        None,
        description='The ID of the user whom the activity is assigned to. If omitted, the activity is assigned to the authorized user.',
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with. If omitted, single participant from `person_id` field is used. It requires a structure as follows: `[{"person_id":1,"primary_flag":true}]`',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{"email_address":"mail@example.org"}]` or `[{"person_id":1, "email_address":"mail@example.org"}]`',
    )
    done: Optional[Done1] = Field(
        None, description='Whether the activity is done or not. 0 = Not done, 1 = Done'
    )


class Data1(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.',
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    reference_type: Optional[str] = Field(
        None,
        description='If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.',
    )
    reference_id: Optional[int] = Field(
        None,
        description='Together with the `reference_type`, gives the ID of the other object',
    )
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    last_notification_time: Optional[str] = Field(
        None,
        description='The date and time of latest notifications sent about this activity to the participants or the attendees of this activity',
    )
    last_notification_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity',
    )
    notification_language_id: Optional[int] = Field(
        None, description='The ID of the language the notifications are sent in'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    gcal_event_id: Optional[str] = Field(
        None,
        description='For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_id: Optional[str] = Field(
        None,
        description='The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_etag: Optional[str] = Field(
        None,
        description='The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    calendar_sync_include_context: Optional[str] = Field(
        None,
        description='For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)',
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    rec_rule: Optional[str] = Field(
        None,
        description='The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"',
    )
    rec_rule_extension: Optional[str] = Field(
        None,
        description='Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.',
    )
    rec_master_activity_id: Optional[int] = Field(
        None,
        description='The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules',
    )
    series: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the activity'
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )
    org_name: Optional[str] = Field(
        None,
        description='The name of the organization this activity is associated with',
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person this activity is associated with'
    )
    deal_title: Optional[str] = Field(
        None, description='The name of the deal this activity is associated with'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the user this activity is owned by'
    )
    person_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the person'
    )
    deal_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the deal'
    )
    assigned_to_user_id: Optional[int] = Field(
        None,
        description='The ID of the user to whom the activity is assigned to. Equal to `user_id`.',
    )
    file: Optional[Dict[str, Any]] = Field(
        None,
        description='The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.',
    )


class AdditionalData1(BaseModel):
    updates_story_id: Optional[int] = Field(
        None, description='This field will be deprecated'
    )


class User1(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Deal1(BaseModel):
    DEAL_ID: Optional[DEALID] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class PERSONID1(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person1(BaseModel):
    PERSON_ID: Optional[PERSONID1] = Field(
        None, description='The ID of the person associated with the item'
    )


class ORGANIZATIONID1(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization1(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID1] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects1(BaseModel):
    user: Optional[User1] = None
    deal: Optional[Deal1] = None
    person: Optional[Person1] = None
    organization: Optional[Organization1] = None


class ActivitiesPostResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data1] = Field(None, title='activityResponseObject')
    additional_data: Optional[AdditionalData1] = None
    related_objects: Optional[RelatedObjects1] = None


class Datum1(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )


class AdditionalData2(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class ActivitiesCollectionGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum1]] = None
    additional_data: Optional[AdditionalData2] = Field(
        None, description='The additional data of the list'
    )


class ActivitiesCollectionGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Data2(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the activity that was deleted'
    )


class ActivitiesIdDeleteResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data2] = None


class Data3(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.',
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    reference_type: Optional[str] = Field(
        None,
        description='If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.',
    )
    reference_id: Optional[int] = Field(
        None,
        description='Together with the `reference_type`, gives the ID of the other object',
    )
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    last_notification_time: Optional[str] = Field(
        None,
        description='The date and time of latest notifications sent about this activity to the participants or the attendees of this activity',
    )
    last_notification_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity',
    )
    notification_language_id: Optional[int] = Field(
        None, description='The ID of the language the notifications are sent in'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    gcal_event_id: Optional[str] = Field(
        None,
        description='For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_id: Optional[str] = Field(
        None,
        description='The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_etag: Optional[str] = Field(
        None,
        description='The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    calendar_sync_include_context: Optional[str] = Field(
        None,
        description='For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)',
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    rec_rule: Optional[str] = Field(
        None,
        description='The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"',
    )
    rec_rule_extension: Optional[str] = Field(
        None,
        description='Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.',
    )
    rec_master_activity_id: Optional[int] = Field(
        None,
        description='The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules',
    )
    series: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the activity'
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )
    org_name: Optional[str] = Field(
        None,
        description='The name of the organization this activity is associated with',
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person this activity is associated with'
    )
    deal_title: Optional[str] = Field(
        None, description='The name of the deal this activity is associated with'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the user this activity is owned by'
    )
    person_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the person'
    )
    deal_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the deal'
    )
    assigned_to_user_id: Optional[int] = Field(
        None,
        description='The ID of the user to whom the activity is assigned to. Equal to `user_id`.',
    )
    file: Optional[Dict[str, Any]] = Field(
        None,
        description='The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.',
    )


class User2(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Deal2(BaseModel):
    DEAL_ID: Optional[DEALID] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class PERSONID2(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person2(BaseModel):
    PERSON_ID: Optional[PERSONID2] = Field(
        None, description='The ID of the person associated with the item'
    )


class ORGANIZATIONID2(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization2(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID2] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects2(BaseModel):
    user: Optional[User2] = None
    deal: Optional[Deal2] = None
    person: Optional[Person2] = None
    organization: Optional[Organization2] = None


class ActivitiesIdGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data3] = Field(None, title='activityResponseObject')
    related_objects: Optional[RelatedObjects2] = None


class ActivitiesIdPutRequest(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with. It requires a structure as follows: `[{"person_id":1,"primary_flag":true}]`',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{"email_address":"mail@example.org"}]` or `[{"person_id":1, "email_address":"mail@example.org"}]`',
    )
    done: Optional[Done1] = Field(
        None, description='Whether the activity is done or not. 0 = Not done, 1 = Done'
    )


class User3(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Deal3(BaseModel):
    DEAL_ID: Optional[DEALID] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class PERSONID3(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person3(BaseModel):
    PERSON_ID: Optional[PERSONID3] = Field(
        None, description='The ID of the person associated with the item'
    )


class ORGANIZATIONID3(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization3(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID3] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects3(BaseModel):
    user: Optional[User3] = None
    deal: Optional[Deal3] = None
    person: Optional[Person3] = None
    organization: Optional[Organization3] = None


class ActivitiesIdPutResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data3] = Field(None, title='activityResponseObject')
    related_objects: Optional[RelatedObjects3] = None


class FieldType(BaseModel):
    pass


class Datum2(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class AdditionalData3(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class ActivityFieldsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum2]] = None
    additional_data: Optional[AdditionalData3] = Field(
        None, description='The additional data of the list'
    )


class Data5(BaseModel):
    id: Optional[List[int]] = Field(
        None, description='The IDs of the deleted activity types'
    )


class ActivityTypesDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data5] = None


class IconKey(Enum):
    task = 'task'
    email = 'email'
    meeting = 'meeting'
    deadline = 'deadline'
    call = 'call'
    lunch = 'lunch'
    calendar = 'calendar'
    downarrow = 'downarrow'
    document = 'document'
    smartphone = 'smartphone'
    camera = 'camera'
    scissors = 'scissors'
    cogs = 'cogs'
    bubble = 'bubble'
    uparrow = 'uparrow'
    checkbox = 'checkbox'
    signpost = 'signpost'
    shuffle = 'shuffle'
    addressbook = 'addressbook'
    linegraph = 'linegraph'
    picture = 'picture'
    car = 'car'
    world = 'world'
    search = 'search'
    clip = 'clip'
    sound = 'sound'
    brush = 'brush'
    key = 'key'
    padlock = 'padlock'
    pricetag = 'pricetag'
    suitcase = 'suitcase'
    finish = 'finish'
    plane = 'plane'
    loop = 'loop'
    wifi = 'wifi'
    truck = 'truck'
    cart = 'cart'
    bulb = 'bulb'
    bell = 'bell'
    presentation = 'presentation'


class Datum3(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the activity type')
    name: Optional[str] = Field(None, description='The name of the activity type')
    icon_key: Optional[IconKey] = Field(
        None, description='Icon graphic to use for representing this activity type'
    )
    color: Optional[str] = Field(
        None,
        description='A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)',
    )
    order_nr: Optional[int] = Field(
        None,
        description='An order number for the activity type. Order numbers should be used to order the types in the activity type selections.',
    )
    key_string: Optional[str] = Field(
        None,
        description='A string that is generated by the API based on the given name of the activity type upon creation',
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the activity type'
    )
    is_custom_flag: Optional[bool] = Field(
        None, description='Whether the activity type is a custom one or not'
    )
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the activity type'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the activity type'
    )


class ActivityTypesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum3]] = Field(
        None, description='The array of activity types'
    )


class ActivityTypesPostRequest(BaseModel):
    name: str = Field(..., description='The name of the activity type', example='call')
    icon_key: IconKey = Field(
        ..., description='Icon graphic to use for representing this activity type'
    )
    color: Optional[str] = Field(
        None,
        description='A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)',
        example='FFFFFF',
    )


class Data6(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the activity type')
    name: Optional[str] = Field(None, description='The name of the activity type')
    icon_key: Optional[IconKey] = Field(
        None, description='Icon graphic to use for representing this activity type'
    )
    color: Optional[str] = Field(
        None,
        description='A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)',
    )
    order_nr: Optional[int] = Field(
        None,
        description='An order number for the activity type. Order numbers should be used to order the types in the activity type selections.',
    )
    key_string: Optional[str] = Field(
        None,
        description='A string that is generated by the API based on the given name of the activity type upon creation',
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the activity type'
    )
    is_custom_flag: Optional[bool] = Field(
        None, description='Whether the activity type is a custom one or not'
    )
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the activity type'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the activity type'
    )


class ActivityTypesPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data6] = None


class Data7(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the activity type')
    name: Optional[str] = Field(None, description='The name of the activity type')
    icon_key: Optional[IconKey] = Field(
        None, description='Icon graphic to use for representing this activity type'
    )
    color: Optional[str] = Field(
        None,
        description='A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)',
    )
    order_nr: Optional[int] = Field(
        None,
        description='An order number for the activity type. Order numbers should be used to order the types in the activity type selections.',
    )
    key_string: Optional[str] = Field(
        None,
        description='A string that is generated by the API based on the given name of the activity type upon creation',
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the activity type'
    )
    is_custom_flag: Optional[bool] = Field(
        None, description='Whether the activity type is a custom one or not'
    )
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the activity type'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the activity type'
    )


class ActivityTypesIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data7] = None


class ActivityTypesIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the activity type')
    icon_key: Optional[IconKey] = Field(
        None, description='Icon graphic to use for representing this activity type'
    )
    color: Optional[str] = Field(
        None,
        description='A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)',
    )
    order_nr: Optional[int] = Field(
        None,
        description='An order number for this activity type. Order numbers should be used to order the types in the activity type selections.',
    )


class Data8(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the activity type')
    name: Optional[str] = Field(None, description='The name of the activity type')
    icon_key: Optional[IconKey] = Field(
        None, description='Icon graphic to use for representing this activity type'
    )
    color: Optional[str] = Field(
        None,
        description='A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)',
    )
    order_nr: Optional[int] = Field(
        None,
        description='An order number for the activity type. Order numbers should be used to order the types in the activity type selections.',
    )
    key_string: Optional[str] = Field(
        None,
        description='A string that is generated by the API based on the given name of the activity type upon creation',
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the activity type'
    )
    is_custom_flag: Optional[bool] = Field(
        None, description='Whether the activity type is a custom one or not'
    )
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the activity type'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the activity type'
    )


class ActivityTypesIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data8] = None


class BillingSubscriptionsAddonsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Dict[str, Any]]] = Field(
        None, description='An array of add-ons that the company has.'
    )


class Outcome(Enum):
    connected = 'connected'
    no_answer = 'no_answer'
    left_message = 'left_message'
    left_voicemail = 'left_voicemail'
    wrong_number = 'wrong_number'
    busy = 'busy'


class CallLogsPostRequest(BaseModel):
    user_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.',
    )
    activity_id: Optional[int] = Field(
        None,
        description="If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.",
    )
    subject: Optional[str] = Field(
        None, description='The name of the activity this call is attached to'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the call in seconds'
    )
    outcome: Outcome = Field(..., description='Describes the outcome of the call')
    from_phone_number: Optional[str] = Field(
        None, description='The number that made the call'
    )
    to_phone_number: str = Field(..., description='The number called')
    start_time: datetime = Field(
        ...,
        description='The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    end_time: datetime = Field(
        ...,
        description='The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this call is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this call is associated with'
    )
    deal_id: Optional[int] = Field(
        None,
        description='The ID of the deal this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    note: Optional[str] = Field(
        None, description='The note for the call log in HTML format'
    )


class Data9(BaseModel):
    user_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.',
    )
    activity_id: Optional[int] = Field(
        None,
        description="If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.",
    )
    subject: Optional[str] = Field(
        None, description='The name of the activity this call is attached to'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the call in seconds'
    )
    outcome: Outcome = Field(..., description='Describes the outcome of the call')
    from_phone_number: Optional[str] = Field(
        None, description='The number that made the call'
    )
    to_phone_number: str = Field(..., description='The number called')
    start_time: datetime = Field(
        ...,
        description='The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    end_time: datetime = Field(
        ...,
        description='The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this call is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this call is associated with'
    )
    deal_id: Optional[int] = Field(
        None,
        description='The ID of the deal this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    note: Optional[str] = Field(
        None, description='The note for the call log in HTML format'
    )
    id: Optional[str] = Field(
        None, description='The call log ID, generated when the call log was created'
    )
    has_recording: Optional[bool] = Field(
        None,
        description='If the call log has an audio recording attached, the value should be true',
    )
    company_id: Optional[int] = Field(
        None, description='The company ID of the owner of the call log'
    )


class CallLogsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data9] = Field(None, title='responseCallLogObject')


class CallLogsPostResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='"outcome" is required.',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsPostResponse2(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example="You don't have permission to change this resource.",
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsPostResponse3(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='A resource required for this operation was not found.',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsPostResponse4(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='An internal server error occurred',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Datum4(BaseModel):
    user_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.',
    )
    activity_id: Optional[int] = Field(
        None,
        description="If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.",
    )
    subject: Optional[str] = Field(
        None, description='The name of the activity this call is attached to'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the call in seconds'
    )
    outcome: Outcome = Field(..., description='Describes the outcome of the call')
    from_phone_number: Optional[str] = Field(
        None, description='The number that made the call'
    )
    to_phone_number: str = Field(..., description='The number called')
    start_time: datetime = Field(
        ...,
        description='The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    end_time: datetime = Field(
        ...,
        description='The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this call is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this call is associated with'
    )
    deal_id: Optional[int] = Field(
        None,
        description='The ID of the deal this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    note: Optional[str] = Field(
        None, description='The note for the call log in HTML format'
    )
    id: Optional[str] = Field(
        None, description='The call log ID, generated when the call log was created'
    )
    has_recording: Optional[bool] = Field(
        None,
        description='If the call log has an audio recording attached, the value should be true',
    )
    company_id: Optional[int] = Field(
        None, description='The company ID of the owner of the call log'
    )


class Pagination1(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class AdditionalData4(BaseModel):
    pagination: Optional[Pagination1] = Field(
        None, description='The additional data of the list'
    )


class CallLogsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum4]] = None
    additional_data: Optional[AdditionalData4] = None


class CallLogsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )


class CallLogsIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example="You don't have permission to change this resource.",
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsIdDeleteResponse2(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='A resource required for this operation was not found.',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsIdDeleteResponse3(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='The callLog you are trying to access is no longer available',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsIdDeleteResponse4(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='An internal server error occurred',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Data10(BaseModel):
    user_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.',
    )
    activity_id: Optional[int] = Field(
        None,
        description="If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.",
    )
    subject: Optional[str] = Field(
        None, description='The name of the activity this call is attached to'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the call in seconds'
    )
    outcome: Outcome = Field(..., description='Describes the outcome of the call')
    from_phone_number: Optional[str] = Field(
        None, description='The number that made the call'
    )
    to_phone_number: str = Field(..., description='The number called')
    start_time: datetime = Field(
        ...,
        description='The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    end_time: datetime = Field(
        ...,
        description='The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this call is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this call is associated with'
    )
    deal_id: Optional[int] = Field(
        None,
        description='The ID of the deal this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.',
    )
    note: Optional[str] = Field(
        None, description='The note for the call log in HTML format'
    )
    id: Optional[str] = Field(
        None, description='The call log ID, generated when the call log was created'
    )
    has_recording: Optional[bool] = Field(
        None,
        description='If the call log has an audio recording attached, the value should be true',
    )
    company_id: Optional[int] = Field(
        None, description='The company ID of the owner of the call log'
    )


class CallLogsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data10] = Field(None, title='responseCallLogObject')


class CallLogsIdGetResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='A resource required for this operation was not found.',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsIdRecordingsPostRequest(BaseModel):
    file: bytes = Field(
        ..., description='Audio file supported by the HTML5 specification'
    )


class CallLogsIdRecordingsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )


class CallLogsIdRecordingsPostResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='A resource required for this operation was not found.',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsIdRecordingsPostResponse2(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='A recording for this call already exists',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class CallLogsIdRecordingsPostResponse3(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The description of the error',
        example='An internal server error occurred',
    )
    error_info: Optional[str] = Field(
        None,
        description='A message describing how to solve the problem',
        example='Please check developers.pipedrive.com for more information about Pipedrive API.',
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class ProviderType(Enum):
    facebook = 'facebook'
    whatsapp = 'whatsapp'
    other = 'other'


class ChannelsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the channel', example='My Channel')
    provider_channel_id: str = Field(..., description='The channel ID')
    avatar_url: Optional[str] = Field(
        None, description='The URL for an icon that represents your channel'
    )
    template_support: Optional[bool] = Field(
        False,
        description='If true, enables templates logic on UI. Requires getTemplates endpoint implemented. Find out more [here](https://pipedrive.readme.io/docs/implementing-messaging-app-extension).',
    )
    provider_type: Optional[ProviderType] = Field(
        'other',
        description='It controls the icons (like the icon next to the conversation)',
    )


class Data11(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The unique channel ID used internally in omnichannel-api and the frontend of the extension',
    )
    name: Optional[str] = Field(
        None, description='The name of the channel', example='My Channel'
    )
    avatar_url: Optional[str] = Field(
        None,
        description='The URL for an icon that represents your channel',
        example='http://some-domain.com/test.jpg',
    )
    provider_channel_id: Optional[str] = Field(
        None, description='The channel ID you specified while creating the channel'
    )
    marketplace_client_id: Optional[str] = Field(
        None, description='The client_id of your app in Pipedrive marketplace'
    )
    pd_company_id: Optional[int] = Field(
        None, description="The ID of the user's company in Pipedrive", example=1
    )
    pd_user_id: Optional[int] = Field(
        None, description='The ID of the user in Pipedrive', example=1
    )
    created_at: Optional[datetime] = Field(
        None, description='The date and time when your channel was created in the API'
    )
    provider_type: Optional[ProviderType] = Field(
        'other', description='Value of the provider_type sent to this endpoint'
    )
    template_support: Optional[bool] = Field(
        None, description='Value of the template_support sent to this endpoint'
    )


class ChannelsPostResponse(BaseModel):
    success: Optional[bool] = Field(None, example=True)
    data: Optional[Data11] = None


class AdditionalData5(BaseModel):
    code: Optional[str] = Field(
        None, description='An error code sent by the API', example='INVALID_BODY'
    )


class ChannelsPostResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The error description',
        example='Expected { name: string; avatar_url?: string; provider_channel_id: string; }, but was incompatible',
    )
    error_info: Optional[str] = Field(
        None,
        example='Please check the reference docs in https://developers.pipedrive.com/docs/api/v1',
    )
    additional_data: Optional[AdditionalData5] = None


class AdditionalData6(BaseModel):
    code: Optional[str] = Field(
        None, description='An error code sent by the API', example='ADMIN_ONLY'
    )


class ChannelsPostResponse2(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The error description',
        example='Only admins can register channels',
    )
    error_info: Optional[str] = Field(
        None,
        example='Please check the reference docs in https://developers.pipedrive.com/docs/api/v1',
    )
    additional_data: Optional[AdditionalData6] = None


class ChannelsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(None, example=True)


class AdditionalData7(BaseModel):
    code: Optional[str] = Field(
        None, description='An error code sent by the API', example='INVALID_BODY'
    )


class ChannelsIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The error description',
        example='Expected { name: string; avatar_url?: string; provider_channel_id: string; }, but was incompatible',
    )
    error_info: Optional[str] = Field(
        None,
        example='Please check the reference docs in https://developers.pipedrive.com/docs/api/v1',
    )
    additional_data: Optional[AdditionalData7] = None


class Status(Enum):
    sent = 'sent'
    delivered = 'delivered'
    read = 'read'
    failed = 'failed'


class Attachment(BaseModel):
    id: str = Field(..., description='The ID of the attachment')
    type: str = Field(..., description='The mime-type of the attachment')
    name: Optional[str] = Field(None, description='The name of the attachment')
    size: Optional[float] = Field(None, description='The size of the attachment')
    url: str = Field(..., description='A URL to the file')
    preview_url: Optional[str] = Field(
        None, description='A URL to a preview picture of the file'
    )
    link_expires: Optional[bool] = Field(
        False,
        description="If true, it will use the getMessageById endpoint for fetching updated attachment's urls. Find out more [here](https://pipedrive.readme.io/docs/implementing-messaging-app-extension)",
    )


class ChannelsMessagesReceivePostRequest(BaseModel):
    id: str = Field(..., description='The ID of the message')
    channel_id: str = Field(..., description='The channel ID as in the provider')
    sender_id: str = Field(
        ..., description="The ID of the provider's user that sent the message"
    )
    conversation_id: str = Field(..., description='The ID of the conversation')
    message: str = Field(..., description='The body of the message')
    status: Status = Field(..., description='The status of the message')
    created_at: datetime = Field(
        ...,
        description='The date and time when the message was created in the provider, in UTC. Format: YYYY-MM-DD HH:MM',
    )
    reply_by: Optional[datetime] = Field(
        None,
        description='The date and time when the message can no longer receive a reply, in UTC. Format: YYYY-MM-DD HH:MM',
    )
    conversation_link: Optional[str] = Field(
        None, description="A URL that can open the conversation in the provider's side"
    )
    attachments: Optional[List[Attachment]] = Field(
        None, description='The list of attachments available in the message'
    )


class Data12(BaseModel):
    id: str = Field(..., description='The ID of the message')
    channel_id: str = Field(..., description='The channel ID as in the provider')
    sender_id: str = Field(
        ..., description="The ID of the provider's user that sent the message"
    )
    conversation_id: str = Field(..., description='The ID of the conversation')
    message: str = Field(..., description='The body of the message')
    status: Status = Field(..., description='The status of the message')
    created_at: datetime = Field(
        ...,
        description='The date and time when the message was created in the provider, in UTC. Format: YYYY-MM-DD HH:MM',
    )
    reply_by: Optional[datetime] = Field(
        None,
        description='The date and time when the message can no longer receive a reply, in UTC. Format: YYYY-MM-DD HH:MM',
    )
    conversation_link: Optional[str] = Field(
        None, description="A URL that can open the conversation in the provider's side"
    )
    attachments: Optional[List[Attachment]] = Field(
        None, description='The list of attachments available in the message'
    )


class ChannelsMessagesReceivePostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data12] = None


class AdditionalData8(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An error code sent by the API',
        example='INVALID_RECEIVE_MESSAGE_PAYLOAD',
    )


class ChannelsMessagesReceivePostResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The error description',
        example='Expected { id: string; sender_id: string; conversation_id: string; conversation_link?: string; channel_id: string; created_at: string; message: string; status: unknown; attachments: { id: string; type: string; name: string | null; size: number | null; url: string; preview_url: string | null; }[]; reply_by?: string | null; }, but was incompatible',
    )
    error_info: Optional[str] = Field(
        None,
        example='Please check the reference docs in https://developers.pipedrive.com/docs/api/v1',
    )
    additional_data: Optional[AdditionalData8] = None


class ChannelsChannelIdConversationsConversationIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(None, example=True)


class AdditionalData9(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An error code sent by the API',
        example='FORBIDDEN_USER_REQUEST',
    )


class ChannelsChannelIdConversationsConversationIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None,
        description='The error description',
        example='Only the app owner can delete conversations',
    )
    error_info: Optional[str] = Field(
        None,
        example='Please check the reference docs in https://developers.pipedrive.com/docs/api/v1',
    )
    additional_data: Optional[AdditionalData9] = None


class AdditionalData10(BaseModel):
    code: Optional[str] = Field(
        None, description='An error code sent by the API', example='NOT_FOUND'
    )


class ChannelsChannelIdConversationsConversationIdDeleteResponse2(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(
        None, description='The error description', example='Channel not found.'
    )
    error_info: Optional[str] = Field(
        None,
        example='Please check the reference docs in https://developers.pipedrive.com/docs/api/v1',
    )
    additional_data: Optional[AdditionalData10] = None


class Datum5(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the currency')
    code: Optional[str] = Field(None, description='The code of the currency')
    name: Optional[str] = Field(None, description='The name of the currency')
    decimal_points: Optional[int] = Field(
        None, description='The amount of decimal points of the currency'
    )
    symbol: Optional[str] = Field(None, description='The symbol of the currency')
    active_flag: Optional[bool] = Field(
        None, description='Whether the currency is active or not'
    )
    is_custom_flag: Optional[bool] = Field(
        None, description='Whether the currency is a custom one or not'
    )


class CurrenciesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum5]] = Field(None, description='The array of currencies')


class Status2(Enum):
    open = 'open'
    won = 'won'
    lost = 'lost'
    deleted = 'deleted'
    all_not_deleted = 'all_not_deleted'


class OwnedByYou(Enum):
    number_0 = 0
    number_1 = 1


class CreatorUserId(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal creator')
    name: Optional[str] = Field(None, description='The name of the deal creator')
    email: Optional[str] = Field(None, description='The email of the deal creator')
    has_pic: Optional[bool] = Field(
        None, description='If the creator has a picture or not'
    )
    pic_hash: Optional[str] = Field(None, description='The creator picture hash')
    active_flag: Optional[bool] = Field(
        None, description='Whether the creator is active or not'
    )
    value: Optional[int] = Field(None, description='The ID of the deal creator')


class UserId(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the user')
    name: Optional[str] = Field(None, description='The name of the user')
    email: Optional[str] = Field(None, description='The email of the user')
    has_pic: Optional[bool] = Field(
        None, description='If the user has a picture or not'
    )
    pic_hash: Optional[str] = Field(None, description='The user picture hash')
    active_flag: Optional[bool] = Field(
        None, description='Whether the user is active or not'
    )
    value: Optional[int] = Field(None, description='The ID of the user')


class EmailItem4(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='If this is the primary email or not'
    )


class PhoneItem4(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the deal'
    )
    primary: Optional[bool] = Field(
        None, description='If this is the primary phone number or not'
    )


class PersonId(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    email: Optional[List[EmailItem4]] = Field(
        None, description='The emails of the person associated with the deal'
    )
    phone: Optional[List[PhoneItem4]] = Field(
        None, description='The phone numbers of the person associated with the deal'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the deal',
    )
    value: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )


class OrgId(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the deal',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the deal',
    )
    address: Optional[str] = Field(
        None,
        description='The address of the organization that is associated with the deal',
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the deal'
    )
    value: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )


class Datum6(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[CreatorUserId] = Field(
        None, description='The creator of the deal'
    )
    user_id: Optional[UserId] = Field(None, title='dealUserDataWithId')
    person_id: Optional[PersonId] = Field(None, title='dealPersonDataWithId')
    org_id: Optional[OrgId] = Field(None, title='dealOrganizationDataWithId')
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class AdditionalData11(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class User4(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Organization4(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID3] = Field(
        None, description='The ID of the organization associated with the item'
    )


class EmailItem5(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem5(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID4(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem5]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem5]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person4(BaseModel):
    PERSON_ID: Optional[PERSONID4] = Field(
        None, description='The ID of the person associated with the item'
    )


class RelatedObjects4(BaseModel):
    user: Optional[User4] = None
    organization: Optional[Organization4] = None
    person: Optional[Person4] = None


class DealsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum6]] = Field(None, description='The array of deals')
    additional_data: Optional[AdditionalData11] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects4] = None


class Status3(Enum):
    open = 'open'
    won = 'won'
    lost = 'lost'
    deleted = 'deleted'


class VisibleTo(BaseModel):
    pass


class DealsPostRequest(BaseModel):
    title: str = Field(..., description='The title of the deal')
    value: Optional[str] = Field(
        None, description='The value of the deal. If omitted, value will be set to 0.'
    )
    label: Optional[List[int]] = Field(None, description='The array of the labels IDs.')
    currency: Optional[str] = Field(
        None,
        description='The currency of the deal. Accepts a 3-character currency code. If omitted, currency will be set to the default currency of the authorized user.',
    )
    user_id: Optional[int] = Field(
        None,
        description='The ID of the user which will be the owner of the created deal. If not provided, the user making the request will be used.',
    )
    person_id: Optional[int] = Field(
        None,
        description='The ID of a person which this deal will be linked to. If the person does not exist yet, it needs to be created first. This property is required unless `org_id` is specified.',
    )
    org_id: Optional[int] = Field(
        None,
        description='The ID of an organization which this deal will be linked to. If the organization does not exist yet, it needs to be created first. This property is required unless `person_id` is specified.',
    )
    pipeline_id: Optional[int] = Field(
        None,
        description='The ID of the pipeline this deal will be added to. By default, the deal will be added to the first stage of the specified pipeline. Please note that `pipeline_id` and `stage_id` should not be used together as `pipeline_id` will be ignored.',
    )
    stage_id: Optional[int] = Field(
        None,
        description='The ID of the stage this deal will be added to. Please note that a pipeline will be assigned automatically based on the `stage_id`. If omitted, the deal will be placed in the first stage of the default pipeline.',
    )
    status: Optional[Status3] = Field(
        None,
        description='open = Open, won = Won, lost = Lost, deleted = Deleted. If omitted, status will be set to open.',
    )
    add_time: Optional[str] = Field(
        None,
        description='The optional creation date & time of the deal in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS',
    )
    won_time: Optional[str] = Field(
        None,
        description='The optional date and time of changing the deal status as won in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Won. Can not be used together with `lost_time`.',
    )
    lost_time: Optional[str] = Field(
        None,
        description='The optional date and time of changing the deal status as lost in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Lost. Can not be used together with `won_time`.',
    )
    close_time: Optional[str] = Field(
        None,
        description='The optional date and time of closing the deal in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    expected_close_date: Optional[date] = Field(
        None,
        description='The expected close date of the deal. In ISO 8601 format: YYYY-MM-DD.',
    )
    probability: Optional[float] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown only when `deal_probability` for the pipeline of the deal is enabled.',
    )
    lost_reason: Optional[str] = Field(
        None,
        description='The optional message about why the deal was lost (to be used when status = lost)',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the deal. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )


class EmailItem6(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='If this is the primary email or not'
    )


class PhoneItem6(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the deal'
    )
    primary: Optional[bool] = Field(
        None, description='If this is the primary phone number or not'
    )


class PersonId1(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    email: Optional[List[EmailItem6]] = Field(
        None, description='The emails of the person associated with the deal'
    )
    phone: Optional[List[PhoneItem6]] = Field(
        None, description='The phone numbers of the person associated with the deal'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the deal',
    )
    value: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )


class Data13(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[CreatorUserId] = Field(
        None, description='The creator of the deal'
    )
    user_id: Optional[UserId] = Field(None, title='dealUserDataWithId')
    person_id: Optional[PersonId1] = Field(None, title='dealPersonDataWithId')
    org_id: Optional[OrgId] = Field(None, title='dealOrganizationDataWithId')
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class User5(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Organization5(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID3] = Field(
        None, description='The ID of the organization associated with the item'
    )


class EmailItem7(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem7(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID5(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem7]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem7]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person5(BaseModel):
    PERSON_ID: Optional[PERSONID5] = Field(
        None, description='The ID of the person associated with the item'
    )


class RelatedObjects5(BaseModel):
    user: Optional[User5] = None
    organization: Optional[Organization5] = None
    person: Optional[Person5] = None


class DealsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data13] = Field(None, title='dealNonStrict')
    related_objects: Optional[RelatedObjects5] = None


class Data14(BaseModel):
    id: Optional[List[int]] = Field(None, description='The list of deleted deals IDs')


class DealsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data14] = None


class Datum7(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the deal in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the deal in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None,
        description='The date and time of closing the deal in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None,
        description='The date and time of changing the deal status to won in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    lost_time: Optional[str] = Field(
        None,
        description='The date and time of changing the deal status to lost in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )


class AdditionalData12(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class DealsCollectionGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum7]] = None
    additional_data: Optional[AdditionalData12] = Field(
        None, description='The additional data of the list'
    )


class DealsCollectionGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Fields(Enum):
    custom_fields = 'custom_fields'
    notes = 'notes'
    title = 'title'


class Status5(Enum):
    open = 'open'
    won = 'won'
    lost = 'lost'


class IncludeFields(Enum):
    deal_cc_email = 'deal.cc_email'


class Owner(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the owner of the deal')


class Stage(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the stage of the deal')
    name: Optional[str] = Field(None, description='The name of the stage of the deal')


class Person6(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person the deal is associated with'
    )
    name: Optional[str] = Field(
        None, description='The name of the person the deal is associated with'
    )


class Organization6(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization the deal is associated with'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization the deal is associated with'
    )


class Item1(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    type: Optional[str] = Field(None, description='The type of the item')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[int] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(None, description='The currency of the deal')
    status: Optional[str] = Field(None, description='The status of the deal')
    visible_to: Optional[int] = Field(None, description='The visibility of the deal')
    owner: Optional[Owner] = None
    stage: Optional[Stage] = None
    person: Optional[Person6] = None
    organization: Optional[Organization6] = None
    custom_fields: Optional[List[str]] = Field(None, description='Custom fields')
    notes: Optional[List[str]] = Field(None, description='An array of notes')


class Item(BaseModel):
    result_score: Optional[float] = Field(None, description='Search result relevancy')
    item: Optional[Item1] = None


class Data15(BaseModel):
    items: Optional[List[Item]] = Field(None, description='The array of deals')


class Pagination2(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='Whether there are more list items in the collection than displayed',
    )
    next_start: Optional[int] = Field(None, description='Next pagination start')


class AdditionalData13(BaseModel):
    pagination: Optional[Pagination2] = Field(
        None, description='Pagination details of the list'
    )


class DealsSearchGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data15] = None
    additional_data: Optional[AdditionalData13] = None


class ValuesTotal(BaseModel):
    value: Optional[float] = Field(
        None, description='The total value of deals in the deal currency group'
    )
    count: Optional[int] = Field(
        None, description='The number of deals in the deal currency group'
    )
    value_converted: Optional[float] = Field(
        None,
        description='The total value of deals converted into the company default currency',
    )
    value_formatted: Optional[str] = Field(
        None,
        description='The total value of deals formatted with deal currency. E.g. €50',
    )
    value_converted_formatted: Optional[str] = Field(
        None,
        description='The value_converted formatted with deal currency. E.g. US$50.10',
    )


class WeightedValuesTotal(BaseModel):
    value: Optional[float] = Field(
        None,
        description='The total weighted value of the deals in the deal currency group',
    )
    count: Optional[int] = Field(
        None, description='The number of deals in the deal currency group'
    )
    value_formatted: Optional[str] = Field(
        None,
        description='The total weighted value of the deals formatted with deal currency. E.g. €50',
    )


class Data16(BaseModel):
    values_total: Optional[ValuesTotal] = Field(
        None, description='The total values of the deals grouped by deal currency'
    )
    weighted_values_total: Optional[WeightedValuesTotal] = Field(
        None,
        description='The total weighted values of the deals grouped by deal currency. The weighted value is calculated as probability times deal value.',
    )
    total_count: Optional[int] = Field(None, description='The total number of deals')
    total_currency_converted_value: Optional[float] = Field(
        None,
        description='The total value of deals converted into the company default currency',
    )
    total_weighted_currency_converted_value: Optional[float] = Field(
        None,
        description='The total weighted value of deals converted into the company default currency',
    )
    total_currency_converted_value_formatted: Optional[str] = Field(
        None,
        description='The total converted value of deals formatted with the company default currency. E.g. US$5,100.96',
    )
    total_weighted_currency_converted_value_formatted: Optional[str] = Field(
        None,
        description='The total weighted value of deals formatted with the company default currency. E.g. US$5,100.96',
    )


class DealsSummaryGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data16] = Field(None, description='The summary of deals')


class Interval(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'


class ExcludeDeals(Enum):
    number_0 = 0
    number_1 = 1


class Deal4(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class Totals(BaseModel):
    count: Optional[int] = Field(
        None, description='The number of deals for the given period'
    )
    values: Optional[Dict[str, Any]] = Field(
        None, description='The total values of deals grouped by deal currency'
    )
    weighted_values: Optional[Dict[str, Any]] = Field(
        None,
        description='The total weighted values of deals for the given period grouped by deal currency. The weighted value of a deal is calculated as probability times deal value.',
    )
    open_count: Optional[int] = Field(
        None, description='The number of open deals for the given period'
    )
    open_values: Optional[Dict[str, Any]] = Field(
        None,
        description='The total values of open deals for the given period grouped by deal currency',
    )
    weighted_open_values: Optional[Dict[str, Any]] = Field(
        None,
        description='The total weighted values of open deals for the given period grouped by deal currency. The weighted value of a deal is calculated as probability times deal value.',
    )
    won_count: Optional[int] = Field(
        None, description='The number of won deals for the given period'
    )
    won_values: Optional[Dict[str, Any]] = Field(
        None,
        description='The total values of won deals for the given period grouped by deal currency',
    )


class Data17(BaseModel):
    period_start: Optional[str] = Field(
        None, description='The start date and time of the period'
    )
    period_end: Optional[str] = Field(
        None, description='The end date and time of the period'
    )
    deals: Optional[List[Deal4]] = None
    totals: Optional[Totals] = Field(
        None, description='The total values of deals for the given period'
    )


class DealsTimelineGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data17] = Field(
        None,
        description='Open and won deals grouped into periods by defined interval, amount and date-type dealField (`field_key`)',
    )


class Data18(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal that was deleted')


class DealsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data18] = None


class EmailItem8(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='If this is the primary email or not'
    )


class PhoneItem8(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the deal'
    )
    primary: Optional[bool] = Field(
        None, description='If this is the primary phone number or not'
    )


class PersonId2(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    email: Optional[List[EmailItem8]] = Field(
        None, description='The emails of the person associated with the deal'
    )
    phone: Optional[List[PhoneItem8]] = Field(
        None, description='The phone numbers of the person associated with the deal'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the deal',
    )
    value: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )


class AverageTimeToWon(BaseModel):
    y: Optional[int] = Field(None, description='Years')
    m: Optional[int] = Field(None, description='Months')
    d: Optional[int] = Field(None, description='Days')
    h: Optional[int] = Field(None, description='Hours')
    i: Optional[int] = Field(None, description='Minutes')
    s: Optional[int] = Field(None, description='Seconds')
    total_seconds: Optional[int] = Field(None, description='The total time in seconds')


class Age(BaseModel):
    y: Optional[int] = Field(None, description='Years')
    m: Optional[int] = Field(None, description='Months')
    d: Optional[int] = Field(None, description='Days')
    h: Optional[int] = Field(None, description='Hours')
    i: Optional[int] = Field(None, description='Minutes')
    s: Optional[int] = Field(None, description='Seconds')
    total_seconds: Optional[int] = Field(None, description='The total time in seconds')


class StayInPipelineStages(BaseModel):
    times_in_stages: Optional[Dict[str, Any]] = Field(
        None,
        description='The number of seconds a deal has been in each stage of the pipeline',
    )
    order_of_stages: Optional[List[int]] = Field(
        None,
        description='The order of the deal progression through the pipeline stages',
    )


class Data19(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[CreatorUserId] = Field(
        None, description='The creator of the deal'
    )
    user_id: Optional[UserId] = Field(None, title='dealUserDataWithId')
    person_id: Optional[PersonId2] = Field(None, title='dealPersonDataWithId')
    org_id: Optional[OrgId] = Field(None, title='dealOrganizationDataWithId')
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )
    average_time_to_won: Optional[AverageTimeToWon] = Field(
        None, description='The average time to win the deal'
    )
    average_stage_progress: Optional[float] = Field(
        None, description='The average of the deal stage progression'
    )
    age: Optional[Age] = Field(None, description='The lifetime of the deal')
    stay_in_pipeline_stages: Optional[StayInPipelineStages] = Field(
        None,
        description='The details of the duration of the deal being in each stage of the pipeline',
    )
    last_activity: Optional[Dict[str, Any]] = Field(
        None, description='The details of the last activity associated with the deal'
    )
    next_activity: Optional[Dict[str, Any]] = Field(
        None, description='The details of the next activity associated with the deal'
    )


class AdditionalData14(BaseModel):
    dropbox_email: Optional[str] = Field(None, description='The BCC email of the deal')


class User6(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class EmailItem9(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem9(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID6(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem9]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem9]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person7(BaseModel):
    PERSON_ID: Optional[PERSONID6] = Field(
        None, description='The ID of the person associated with the item'
    )


class Organization7(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID3] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects6(BaseModel):
    user: Optional[User6] = None
    person: Optional[Person7] = None
    organization: Optional[Organization7] = None


class DealsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data19] = Field(None, title='dealNonStrictWithDetails')
    additional_data: Optional[AdditionalData14] = None
    related_objects: Optional[RelatedObjects6] = None


class Status7(Enum):
    open = 'open'
    won = 'won'
    lost = 'lost'
    deleted = 'deleted'


class DealsIdPutRequest(BaseModel):
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[str] = Field(None, description='The value of the deal.')
    label: Optional[List[int]] = Field(
        None, description='Array of the deal labels IDs.'
    )
    currency: Optional[str] = Field(
        None,
        description='The currency of the deal. Accepts a 3-character currency code.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user which will be the new owner of the deal.'
    )
    person_id: Optional[int] = Field(
        None,
        description='The ID of a person which this deal will be linked to. If the person does not exist yet, it needs to be created first.',
    )
    org_id: Optional[int] = Field(
        None,
        description='The ID of an organization which this deal will be linked to. If the organization does not exist yet, it needs to be created first.',
    )
    pipeline_id: Optional[int] = Field(
        None,
        description='The ID of the pipeline this deal will be added to. By default, the deal will be added to the first stage of the specified pipeline. Please note that `pipeline_id` and `stage_id` should not be used together as `pipeline_id` will be ignored.',
    )
    stage_id: Optional[int] = Field(
        None,
        description='The ID of the stage this deal will be added to. Please note that a pipeline will be assigned automatically based on the `stage_id`.',
    )
    status: Optional[Status7] = Field(
        None, description='open = Open, won = Won, lost = Lost, deleted = Deleted.'
    )
    won_time: Optional[str] = Field(
        None,
        description='The optional date and time of changing the deal status as won in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Won. Can not be used together with `lost_time`.',
    )
    lost_time: Optional[str] = Field(
        None,
        description='The optional date and time of changing the deal status as lost in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Lost. Can not be used together with `won_time`.',
    )
    close_time: Optional[str] = Field(
        None,
        description='The optional date and time of closing the deal in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    expected_close_date: Optional[date] = Field(
        None,
        description='The expected close date of the deal. In ISO 8601 format: YYYY-MM-DD.',
    )
    probability: Optional[float] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown only when `deal_probability` for the pipeline of the deal is enabled.',
    )
    lost_reason: Optional[str] = Field(
        None,
        description='The optional message about why the deal was lost (to be used when status = lost)',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the deal. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )


class EmailItem10(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='If this is the primary email or not'
    )


class PhoneItem10(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the deal'
    )
    primary: Optional[bool] = Field(
        None, description='If this is the primary phone number or not'
    )


class PersonId3(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    email: Optional[List[EmailItem10]] = Field(
        None, description='The emails of the person associated with the deal'
    )
    phone: Optional[List[PhoneItem10]] = Field(
        None, description='The phone numbers of the person associated with the deal'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the deal',
    )
    value: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )


class Data20(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[CreatorUserId] = Field(
        None, description='The creator of the deal'
    )
    user_id: Optional[UserId] = Field(None, title='dealUserDataWithId')
    person_id: Optional[PersonId3] = Field(None, title='dealPersonDataWithId')
    org_id: Optional[OrgId] = Field(None, title='dealOrganizationDataWithId')
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class User7(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Organization8(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID3] = Field(
        None, description='The ID of the organization associated with the item'
    )


class EmailItem11(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem11(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID7(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem11]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem11]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person8(BaseModel):
    PERSON_ID: Optional[PERSONID7] = Field(
        None, description='The ID of the person associated with the item'
    )


class RelatedObjects7(BaseModel):
    user: Optional[User7] = None
    organization: Optional[Organization8] = None
    person: Optional[Person8] = None


class DealsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data20] = Field(None, title='dealNonStrict')
    related_objects: Optional[RelatedObjects7] = None


class Done3(Enum):
    number_0 = 0
    number_1 = 1


class Datum8(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.',
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    reference_type: Optional[str] = Field(
        None,
        description='If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.',
    )
    reference_id: Optional[int] = Field(
        None,
        description='Together with the `reference_type`, gives the ID of the other object',
    )
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    last_notification_time: Optional[str] = Field(
        None,
        description='The date and time of latest notifications sent about this activity to the participants or the attendees of this activity',
    )
    last_notification_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity',
    )
    notification_language_id: Optional[int] = Field(
        None, description='The ID of the language the notifications are sent in'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    gcal_event_id: Optional[str] = Field(
        None,
        description='For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_id: Optional[str] = Field(
        None,
        description='The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_etag: Optional[str] = Field(
        None,
        description='The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    calendar_sync_include_context: Optional[str] = Field(
        None,
        description='For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)',
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    rec_rule: Optional[str] = Field(
        None,
        description='The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"',
    )
    rec_rule_extension: Optional[str] = Field(
        None,
        description='Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.',
    )
    rec_master_activity_id: Optional[int] = Field(
        None,
        description='The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules',
    )
    series: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the activity'
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )
    org_name: Optional[str] = Field(
        None,
        description='The name of the organization this activity is associated with',
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person this activity is associated with'
    )
    deal_title: Optional[str] = Field(
        None, description='The name of the deal this activity is associated with'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the user this activity is owned by'
    )
    person_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the person'
    )
    deal_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the deal'
    )
    assigned_to_user_id: Optional[int] = Field(
        None,
        description='The ID of the user to whom the activity is assigned to. Equal to `user_id`.',
    )
    file: Optional[Dict[str, Any]] = Field(
        None,
        description='The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.',
    )


class Activities(BaseModel):
    ACTIVITY_TYPE_NAME: Optional[int] = Field(
        None, description='The count of activities related to a specific type'
    )


class ASSIGNEDTOUSERID(BaseModel):
    activities: Optional[Activities] = Field(
        None,
        description='The count of activities related to the user grouped by activity type',
    )
    name: Optional[str] = Field(None, description='The name of the user')
    activity_count: Optional[int] = Field(
        None, description='The overall count of activities for the user'
    )
    share: Optional[int] = Field(
        None, description='The percentage of activities belongs to the user'
    )


class ActivityDistribution(BaseModel):
    ASSIGNED_TO_USER_ID: Optional[ASSIGNEDTOUSERID] = Field(
        None, description='The ID of the user'
    )


class AdditionalData15(BaseModel):
    activity_distribution: Optional[ActivityDistribution] = Field(
        None,
        description='The distribution of activities related to the organization grouped by the user ID',
    )
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class Organization9(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID3] = Field(
        None, description='The ID of the organization associated with the item'
    )


class PERSONID8(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem11]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem11]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person9(BaseModel):
    PERSON_ID: Optional[PERSONID8] = Field(
        None, description='The ID of the person associated with the item'
    )


class Deal5(BaseModel):
    DEAL_ID: Optional[DEALID] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class User8(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects8(BaseModel):
    organization: Optional[Organization9] = None
    person: Optional[Person9] = None
    deal: Optional[Deal5] = None
    user: Optional[User8] = None


class DealsIdActivitiesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum8]] = Field(None, description='The array of activities')
    additional_data: Optional[AdditionalData15] = Field(
        None, title='activityDistributionDataWithAdditionalData'
    )
    related_objects: Optional[RelatedObjects8] = None


class Datum9(BaseModel):
    field_key: Optional[str] = Field(
        None, description='The key of the field that was changed'
    )
    old_value: Optional[str] = Field(
        None, description='The value of the field before the change'
    )
    new_value: Optional[str] = Field(
        None, description='The value of the field after the change'
    )
    actor_user_id: Optional[int] = Field(
        None, description='The ID of the user who made the change'
    )
    time: Optional[str] = Field(None, description='The date and time of the change')
    change_source: Optional[str] = Field(
        None,
        description="The source of change, for example 'app', 'mobile', 'api', etc.",
    )
    change_source_user_agent: Optional[str] = Field(
        None, description='The user agent from which the change was made'
    )
    is_bulk_update_flag: Optional[bool] = Field(
        None, description='Whether the change was made as part of a bulk update'
    )


class AdditionalData16(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class DealsIdChangelogGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum9]] = None
    additional_data: Optional[AdditionalData16] = Field(
        None, description='The additional data of the list'
    )


class Data21(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class DealsIdDuplicatePostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data21] = Field(None, title='dealStrict')


class Datum10(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    user_id: Optional[int] = Field(
        None, description='The ID of the user to associate the file with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate the file with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate the file with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate the file with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate the file with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate the file with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate the file with'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file')
    active_flag: Optional[bool] = Field(
        None,
        description='Whether the user is active or not. false = Not activated, true = Activated',
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    cid: Optional[str] = Field(None, description='The ID of the inline attachment')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    mail_message_id: Optional[str] = Field(
        None, description='The ID of the mail message to associate the file with'
    )
    mail_template_id: Optional[str] = Field(
        None, description='The ID of the mail template to associate the file with'
    )
    deal_name: Optional[str] = Field(
        None, description='The name of the deal associated with the dile'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the file'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the file'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    lead_name: Optional[str] = Field(
        None, description='The name of the lead associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL of the download file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class AdditionalData17(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class DealsIdFilesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum10]] = Field(None, description='The array of files')
    additional_data: Optional[AdditionalData17] = Field(
        None, description='The additional data of the list'
    )


class Datum11(BaseModel):
    object: Optional[str] = Field(
        None,
        description='The type of the deal update. (Possible object types - dealChange, note, activity, mailMessage, invoice, document, file)',
    )
    timestamp: Optional[str] = Field(
        None, description='The creation date and time of the update'
    )
    data: Optional[Dict[str, Any]] = Field(
        None, description='The data related to the update'
    )


class Deal6(BaseModel):
    DEAL_ID: Optional[DEALID] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class ORGANIZATIONID9(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization10(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID9] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User9(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PERSONID9(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem11]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem11]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person10(BaseModel):
    PERSON_ID: Optional[PERSONID9] = Field(
        None, description='The ID of the person associated with the item'
    )


class RelatedObjects9(BaseModel):
    deal: Optional[Deal6] = None
    organization: Optional[Organization10] = None
    user: Optional[User9] = None
    person: Optional[Person10] = None


class DealsIdFlowGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum11]] = None
    additional_data: Optional[AdditionalData17] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects9] = None


class Datum12(BaseModel):
    actor_user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(None, description='The ID of the person')
    action: Optional[str] = Field(None, description='Deal participant action type')
    time: Optional[str] = Field(
        None, description='The deal participant action log time'
    )


class DealsIdParticipantsChangelogGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum12]] = Field(
        None, description='The array of participant changelog'
    )
    additional_data: Optional[AdditionalData17] = Field(
        None, description='The additional data of the list'
    )


class Datum13(BaseModel):
    user_id: Optional[int] = Field(None, description='The ID of the user')
    id: Optional[int] = Field(None, description='The ID of the user follower')
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal which the follower was added to'
    )
    add_time: Optional[str] = Field(
        None, description='The date and time when the follower was added to the person'
    )


class DealsIdFollowersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum13]] = Field(None, description='The list of followers')
    additional_data: Optional[AdditionalData17] = Field(
        None, description='The additional data of the list'
    )


class DealsIdFollowersPostRequest(BaseModel):
    user_id: int = Field(..., description='The ID of the user')


class Data22(BaseModel):
    user_id: Optional[int] = Field(
        None, description='The user ID who added the follower'
    )
    id: Optional[int] = Field(None, description='The follower ID')
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal which the follower was added to'
    )
    add_time: Optional[str] = Field(
        None, description='The date and time when the deal follower was added'
    )


class DealsIdFollowersPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data22] = None


class Data23(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the deal follower that was deleted'
    )


class DealsIdFollowersFollowerIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data23] = None


class FromItem(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class ToItem(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class CcItem(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class BccItem(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class MailTrackingStatus(Enum):
    opened = 'opened'
    not_opened = 'not opened'


class MailLinkTrackingEnabledFlag(BaseModel):
    pass


class ReadFlag(BaseModel):
    pass


class DraftFlag(BaseModel):
    pass


class SyncedFlag(BaseModel):
    pass


class DeletedFlag(BaseModel):
    pass


class HasBodyFlag(BaseModel):
    pass


class SentFlag(BaseModel):
    pass


class SentFromPipedriveFlag(BaseModel):
    pass


class SmartBccFlag(BaseModel):
    pass


class HasAttachmentsFlag(BaseModel):
    pass


class HasInlineAttachmentsFlag(BaseModel):
    pass


class HasRealAttachmentsFlag(BaseModel):
    pass


class Data24(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail message.')
    from_: Optional[List[FromItem]] = Field(
        None, alias='from', description='The array of mail message sender (object)'
    )
    to: Optional[List[ToItem]] = Field(
        None, description='The array of mail message receiver (object)'
    )
    cc: Optional[List[CcItem]] = Field(
        None, description='The array of mail message copies (object)'
    )
    bcc: Optional[List[BccItem]] = Field(
        None, description='The array of mail message blind copies (object)'
    )
    body_url: Optional[str] = Field(None, description='The mail message body URL')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    mail_thread_id: Optional[int] = Field(
        None, description='ID of the mail message thread'
    )
    subject: Optional[str] = Field(None, description='The subject of mail message')
    snippet: Optional[str] = Field(
        None,
        description='The snippet of mail message. Snippet length is up to 225 characters.',
    )
    mail_tracking_status: Optional[MailTrackingStatus] = Field(
        None,
        description='The status of tracking mail message. Value is `null` if tracking is not enabled.',
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking in mail message body is enabled.'
    )
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail message is read or not by the user'
    )
    draft: Optional[str] = Field(
        None,
        description='If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.',
    )
    draft_flag: Optional[DraftFlag] = Field(
        None, description='Whether the mail message is a draft or not'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail message is synced with the provider or not'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail message is deleted or not'
    )
    has_body_flag: Optional[HasBodyFlag] = Field(
        None, description='Whether the mail message has a body or not'
    )
    sent_flag: Optional[SentFlag] = Field(
        None, description='Whether the mail message has been sent or not'
    )
    sent_from_pipedrive_flag: Optional[SentFromPipedriveFlag] = Field(
        None,
        description='Whether the mail message has been sent from Pipedrive app or not',
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None,
        description='Whether the mail message has been created by Smart Email BCC feature or not',
    )
    message_time: Optional[datetime] = Field(
        None, description='Creation or receival time of the mail message'
    )
    add_time: Optional[datetime] = Field(
        None, description='The insertion into the database time of the mail message'
    )
    update_time: Optional[datetime] = Field(
        None, description='The updating time in the database of the mail message'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail message has an attachment or not'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail message has an inline attachment or not'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail message has an attachment (which is not inline) or not',
    )
    nylas_id: Optional[str] = Field(
        None, description='The Mail Message ID assigned by the sync provider'
    )
    s3_bucket: Optional[str] = Field(None, description='The name of the S3 bucket')
    s3_bucket_path: Optional[str] = Field(None, description='The path of the S3 bucket')
    external_deleted_flag: Optional[bool] = Field(
        None,
        description='If the Mail Message has been deleted on the provider side or not',
    )
    mua_message_id: Optional[str] = Field(
        None, description='The Mail Message ID assigned by the mail user agent'
    )
    template_id: Optional[int] = Field(None, description='The ID of the mail template')
    timestamp: Optional[str] = Field(
        None, description='The add date and time of the Mail Message'
    )
    item_type: Optional[str] = Field(None, description='The type of the data item')
    company_id: Optional[int] = Field(None, description='The ID of the company')


class Datum14(BaseModel):
    object: Optional[str] = Field(None, description='The type of the data item')
    timestamp: Optional[str] = Field(
        None, description='The date and time when the item was created'
    )
    data: Optional[Data24] = Field(None, title='mailMessageItemForList')


class DealsIdMailMessagesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum14]] = Field(
        None, description='The array of mail messages'
    )
    additional_data: Optional[AdditionalData17] = Field(
        None, description='The additional data of the list'
    )


class DealsIdMergePutRequest(BaseModel):
    merge_with_id: int = Field(
        ..., description='The ID of the deal that the deal will be merged with'
    )


class Data25(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )
    merge_what_id: Optional[int] = Field(
        None,
        description='The deal ID of the deal which the original deal was merged with',
    )


class DealsIdMergePutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data25] = None


class PhoneItem14(BaseModel):
    value: Optional[str] = Field(None, description='The phone number')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if phone number is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)',
    )


class EmailItem14(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class Pictures(BaseModel):
    field_128: Optional[str] = Field(
        None, alias='128', description='The URL of the 128*128 picture'
    )
    field_512: Optional[str] = Field(
        None, alias='512', description='The URL of the 512*512 picture'
    )


class PictureId(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class OwnerId(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the user')
    name: Optional[str] = Field(None, description='The name of the user')
    email: Optional[str] = Field(None, description='The email of the user')
    has_pic: Optional[int] = Field(
        None,
        description='Whether the user has picture or not. 0 = No picture, 1 = Has picture.',
    )
    pic_hash: Optional[str] = Field(None, description='The user picture hash')
    active_flag: Optional[bool] = Field(
        None, description='Whether the user is active or not'
    )
    value: Optional[int] = Field(None, description='The ID of the owner')


class OrgId4(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )
    value: Optional[int] = Field(None, description='The ID of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )


class Datum15(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem14]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem14]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId4] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class User10(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class ORGANIZATIONID10(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization11(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID10] = Field(
        None, description='The ID of the organization associated with the item'
    )


class EmailItem15(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem15(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID10(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem15]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem15]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person11(BaseModel):
    PERSON_ID: Optional[PERSONID10] = Field(
        None, description='The ID of the person associated with the item'
    )


class RelatedObjects10(BaseModel):
    user: Optional[User10] = None
    organization: Optional[Organization11] = None
    person: Optional[Person11] = None


class DealsIdParticipantsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum15]] = Field(None, description='The array of participants')
    additional_data: Optional[AdditionalData17] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects10] = None


class DealsIdParticipantsPostRequest(BaseModel):
    person_id: int = Field(..., description='The ID of the person')


class PhoneItem16(BaseModel):
    value: Optional[str] = Field(None, description='The phone number')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if phone number is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)',
    )


class EmailItem16(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId1(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data26(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem16]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem16]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId1] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId4] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class User11(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class EmailItem17(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem17(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID11(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem17]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem17]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person12(BaseModel):
    PERSON_ID: Optional[PERSONID11] = Field(
        None, description='The ID of the person associated with the item'
    )


class RelatedObjects11(BaseModel):
    user: Optional[User11] = None
    person: Optional[Person12] = None


class DealsIdParticipantsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data26] = Field(None, description='The object of participant')
    related_objects: Optional[RelatedObjects11] = None


class Data27(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the deal participant that was deleted'
    )


class DealsIdParticipantsDealParticipantIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data27] = None


class DealsIdPermittedUsersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )


class PhoneItem18(BaseModel):
    value: Optional[str] = Field(None, description='The phone number')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if phone number is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)',
    )


class EmailItem18(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId2(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Datum16(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem18]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem18]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId2] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId4] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class Organization12(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID10] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User12(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects12(BaseModel):
    organization: Optional[Organization12] = None
    user: Optional[User12] = None


class DealsIdPersonsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum16]] = Field(None, description='The array of persons')
    additional_data: Optional[AdditionalData17] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects12] = None


class IncludeProductData(Enum):
    number_0 = 0
    number_1 = 1


class DiscountType(Enum):
    percentage = 'percentage'
    amount = 'amount'


class TaxMethod(Enum):
    exclusive = 'exclusive'
    inclusive = 'inclusive'
    none = 'none'


class Product(BaseModel):
    id: Optional[float] = Field(None, description='The ID of the product')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The ax percentage')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product is active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product is selected in deals or not'
    )
    visible_to: Optional[VisibleTo] = Field(
        None, description='Visibility of the product'
    )
    owner_id: Optional[Dict[str, Any]] = Field(
        None, description='Information about the Pipedrive user who owns the product'
    )
    prices: Optional[Dict[str, Any]] = Field(
        None,
        description='Object of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)',
    )


class Datum17(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The ID of the deal-product (the ID of the product attached to the deal)',
    )
    deal_id: Optional[int] = Field(None, description='The ID of the deal')
    order_nr: Optional[int] = Field(None, description='The order number of the product')
    product_id: Optional[int] = Field(None, description='The ID of the product')
    product_variation_id: Optional[int] = Field(
        None, description='The ID of the product variation'
    )
    item_price: Optional[int] = Field(
        None, description='The price value of the product'
    )
    discount: Optional[float] = Field(
        0,
        description='The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.',
    )
    discount_type: Optional[DiscountType] = Field(
        'percentage', description="The type of the discount's value."
    )
    duration: Optional[int] = Field(None, description='The duration of the product')
    duration_unit: Optional[str] = Field(
        None, description='The type of the duration. (For example hourly, daily, etc.)'
    )
    sum: Optional[float] = Field(
        None, description='The sum of all the products attached to the deal'
    )
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal product'
    )
    enabled_flag: Optional[bool] = Field(
        None, description='Whether the product is enabled or not'
    )
    add_time: Optional[str] = Field(
        None, description='The date and time when the product was added to the deal'
    )
    last_edit: Optional[str] = Field(
        None, description='The date and time when the deal product was last edited'
    )
    comments: Optional[str] = Field(None, description='The comments of the product')
    active_flag: Optional[bool] = Field(
        None, description='Whether the product is active or not'
    )
    tax: Optional[float] = Field(None, description='The product tax')
    tax_method: Optional[TaxMethod] = Field(
        None,
        description='The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.',
    )
    name: Optional[str] = Field(None, description='The product name')
    sum_formatted: Optional[str] = Field(
        None, description='The formatted sum of the product'
    )
    quantity_formatted: Optional[str] = Field(
        None, description='The formatted quantity of the product'
    )
    quantity: Optional[int] = Field(None, description='The quantity of the product')
    product: Optional[Product] = None


class AdditionalData24(BaseModel):
    products_quantity_total: Optional[int] = Field(
        None, description='The total quantity of the products'
    )
    products_sum_total: Optional[int] = Field(
        None, description='The total sum of the products'
    )
    products_quantity_total_formatted: Optional[str] = Field(
        None, description='The total formatted quantity of the products'
    )
    products_sum_total_formatted: Optional[str] = Field(
        None, description='The total formatted sum of the products'
    )
    pagination: Optional[Pagination2] = Field(
        None, description='Pagination details of the list'
    )


class User13(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects13(BaseModel):
    user: Optional[User13] = None


class DealsIdProductsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum17]] = Field(None, description='The array of products')
    additional_data: Optional[AdditionalData24] = None
    related_objects: Optional[RelatedObjects13] = None


class DurationUnit(BaseModel):
    pass


class DealsIdProductsPostRequest(BaseModel):
    product_id: int = Field(..., description='The ID of the product to use')
    item_price: float = Field(
        ..., description='The price at which this product will be added to the deal'
    )
    quantity: int = Field(
        ...,
        description='Quantity – e.g. how many items of this product will be added to the deal',
    )
    discount: Optional[float] = Field(
        0,
        description='The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.',
    )
    discount_type: Optional[DiscountType] = Field(
        'percentage', description="The type of the discount's value."
    )
    duration: Optional[float] = Field(
        1, description='The duration of the product. If omitted, will be set to 1.'
    )
    duration_unit: Optional[DurationUnit] = Field(
        None, description='The unit duration of the product'
    )
    product_variation_id: Optional[int] = Field(
        None,
        description='The ID of the product variation to use. When omitted, no variation will be used.',
    )
    comments: Optional[str] = Field(
        None,
        description='A textual comment associated with this product-deal attachment',
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    tax_method: Optional[TaxMethod] = Field(
        None,
        description='The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.',
    )
    enabled_flag: Optional[bool] = Field(
        True,
        description='Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default.',
    )


class Data28(BaseModel):
    product_id: int = Field(..., description='The ID of the product to use')
    item_price: float = Field(
        ..., description='The price at which this product will be added to the deal'
    )
    quantity: int = Field(
        ...,
        description='Quantity – e.g. how many items of this product will be added to the deal',
    )
    discount: Optional[float] = Field(
        0,
        description='The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.',
    )
    discount_type: Optional[DiscountType] = Field(
        'percentage', description="The type of the discount's value."
    )
    duration: Optional[float] = Field(
        1, description='The duration of the product. If omitted, will be set to 1.'
    )
    duration_unit: Optional[DurationUnit] = Field(
        None, description='The unit duration of the product'
    )
    product_variation_id: Optional[int] = Field(
        None,
        description='The ID of the product variation to use. When omitted, no variation will be used.',
    )
    comments: Optional[str] = Field(
        None,
        description='A textual comment associated with this product-deal attachment',
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    tax_method: Optional[TaxMethod] = Field(
        None,
        description='The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.',
    )
    enabled_flag: Optional[bool] = Field(
        True,
        description='Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the deal-product (the ID of the product attached to the deal)',
    )
    company_id: Optional[int] = Field(None, description='The ID of the company')
    deal_id: Optional[int] = Field(None, description='The ID of the deal')
    sum: Optional[float] = Field(
        None, description='The sum of all the products attached to the deal'
    )
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal product'
    )
    add_time: Optional[str] = Field(
        None, description='The date and time when the product was added to the deal'
    )
    last_edit: Optional[str] = Field(
        None, description='The date and time when the deal product was last edited'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the product is active or not'
    )
    name: Optional[str] = Field(None, description='The product name')
    product_attachment_id: Optional[int] = Field(
        None,
        description='The ID of the deal-product (the ID of the product attached to the deal)',
    )


class DealsIdProductsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data28] = Field(
        None, description='The added product object attached to the deal'
    )


class DealsIdProductsProductAttachmentIdPutRequest(BaseModel):
    product_id: Optional[int] = Field(None, description='The ID of the product to use')
    item_price: Optional[float] = Field(
        None, description='The price at which this product will be added to the deal'
    )
    quantity: Optional[int] = Field(
        None, description='How many items of this product will be added to the deal'
    )
    discount: Optional[float] = Field(
        0,
        description='The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.',
    )
    discount_type: Optional[DiscountType] = Field(
        'percentage', description="The type of the discount's value."
    )
    duration: Optional[float] = Field(1, description='The duration of the product')
    duration_unit: Optional[DurationUnit] = Field(
        None, description='The unit duration of the product'
    )
    product_variation_id: Optional[int] = Field(
        None,
        description='The ID of the product variation to use. When omitted, no variation will be used.',
    )
    comments: Optional[str] = Field(
        None,
        description='A textual comment associated with this product-deal attachment',
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    tax_method: Optional[TaxMethod] = Field(
        None,
        description='The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount.',
    )
    enabled_flag: Optional[bool] = Field(
        True,
        description='Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default.',
    )


class Data29(BaseModel):
    product_id: int = Field(..., description='The ID of the product to use')
    item_price: float = Field(
        ..., description='The price at which this product will be added to the deal'
    )
    quantity: int = Field(
        ...,
        description='Quantity – e.g. how many items of this product will be added to the deal',
    )
    discount: Optional[float] = Field(
        0,
        description='The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.',
    )
    discount_type: Optional[DiscountType] = Field(
        'percentage', description="The type of the discount's value."
    )
    duration: Optional[float] = Field(
        1, description='The duration of the product. If omitted, will be set to 1.'
    )
    duration_unit: Optional[DurationUnit] = Field(
        None, description='The unit duration of the product'
    )
    product_variation_id: Optional[int] = Field(
        None,
        description='The ID of the product variation to use. When omitted, no variation will be used.',
    )
    comments: Optional[str] = Field(
        None,
        description='A textual comment associated with this product-deal attachment',
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    tax_method: Optional[TaxMethod] = Field(
        None,
        description='The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.',
    )
    enabled_flag: Optional[bool] = Field(
        True,
        description='Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the deal-product (the ID of the product attached to the deal)',
    )
    company_id: Optional[int] = Field(None, description='The ID of the company')
    deal_id: Optional[int] = Field(None, description='The ID of the deal')
    sum: Optional[float] = Field(
        None, description='The sum of all the products attached to the deal'
    )
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal product'
    )
    add_time: Optional[str] = Field(
        None, description='The date and time when the product was added to the deal'
    )
    last_edit: Optional[str] = Field(
        None, description='The date and time when the deal product was last edited'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the product is active or not'
    )
    name: Optional[str] = Field(None, description='The product name')


class DealsIdProductsProductAttachmentIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data29] = Field(
        None, description='The updated product object attached to the deal'
    )


class Data30(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of an attached product that was deleted from the deal'
    )


class DealsIdProductsProductAttachmentIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data30] = None


class Datum18(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class AdditionalData25(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class DealFieldsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum18]] = None
    additional_data: Optional[AdditionalData25] = Field(
        None, description='The additional data of the list'
    )


class FieldType2(Enum):
    address = 'address'
    date = 'date'
    daterange = 'daterange'
    double = 'double'
    enum = 'enum'
    monetary = 'monetary'
    org = 'org'
    people = 'people'
    phone = 'phone'
    set = 'set'
    text = 'text'
    time = 'time'
    timerange = 'timerange'
    user = 'user'
    varchar = 'varchar'
    varchar_auto = 'varchar_auto'
    visible_to = 'visible_to'


class DealFieldsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. Example: `[{"label":"New Item"}]`',
    )
    add_visible_flag: Optional[bool] = Field(
        True,
        description="Whether the field is available in the 'add new' modal or not (both in the web and mobile app)",
    )
    field_type: FieldType2 = Field(
        ...,
        description="The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field (has multiple subfields, autocompleted by Google Maps)</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>",
    )


class FieldType3(BaseModel):
    pass


class Data31(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType3] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class DealFieldsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data31] = None


class Data32(BaseModel):
    id: Optional[List[int]] = Field(None, description='The list of deleted field IDs')


class DealFieldsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data32] = None


class Data33(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType3] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class DealFieldsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data33] = None


class Data34(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the field that was deleted')


class DealFieldsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data34] = None


class DealFieldsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. All active items must be supplied and already existing items must have their ID supplied. New items only require a label. Example: `[{"id":123,"label":"Existing Item"},{"label":"New Item"}]`',
    )
    add_visible_flag: Optional[bool] = Field(
        True,
        description="Whether the field is available in 'add new' modal or not (both in web and mobile app)",
    )


class Data35(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType3] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class DealFieldsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data35] = None


class Datum19(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    user_id: Optional[int] = Field(
        None, description='The ID of the user to associate the file with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate the file with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate the file with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate the file with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate the file with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate the file with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate the file with'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file')
    active_flag: Optional[bool] = Field(
        None,
        description='Whether the user is active or not. false = Not activated, true = Activated',
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    cid: Optional[str] = Field(None, description='The ID of the inline attachment')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    mail_message_id: Optional[str] = Field(
        None, description='The ID of the mail message to associate the file with'
    )
    mail_template_id: Optional[str] = Field(
        None, description='The ID of the mail template to associate the file with'
    )
    deal_name: Optional[str] = Field(
        None, description='The name of the deal associated with the file'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the file'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the file'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    lead_name: Optional[str] = Field(
        None, description='The name of the lead associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL of the download file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class Pagination4(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )
    next_start: Optional[int] = Field(None, description='Next pagination start')


class AdditionalData26(BaseModel):
    pagination: Optional[Pagination4] = Field(
        None, description='Pagination details of the list', title='paginationDetails'
    )


class FilesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum19]] = Field(
        None, description='The array of all uploaded files'
    )
    additional_data: Optional[AdditionalData26] = None


class FilesPostRequest(BaseModel):
    file: bytes = Field(
        ...,
        description='A single file, supplied in the multipart/form-data encoding and contained within the given boundaries',
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate file(s) with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate file(s) with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate file(s) with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate file(s) with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate file(s) with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate file(s) with'
    )


class Data36(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    user_id: Optional[int] = Field(
        None, description='The ID of the user to associate the file with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate the file with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate the file with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate the file with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate the file with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate the file with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate the file with'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file')
    active_flag: Optional[bool] = Field(
        None,
        description='Whether the user is active or not. false = Not activated, true = Activated',
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    cid: Optional[str] = Field(None, description='The ID of the inline attachment')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    mail_message_id: Optional[str] = Field(
        None, description='The ID of the mail message to associate the file with'
    )
    mail_template_id: Optional[str] = Field(
        None, description='The ID of the mail template to associate the file with'
    )
    deal_name: Optional[str] = Field(
        None, description='The name of the deal associated with the file'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the file'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the file'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    lead_name: Optional[str] = Field(
        None, description='The name of the lead associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL of the download file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class FilesPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data36] = Field(None, description='The file data')


class FileType(Enum):
    gdoc = 'gdoc'
    gslides = 'gslides'
    gsheet = 'gsheet'
    gform = 'gform'
    gdraw = 'gdraw'


class ItemType(Enum):
    deal = 'deal'
    organization = 'organization'
    person = 'person'


class RemoteLocation(Enum):
    googledrive = 'googledrive'


class FilesRemotePostRequest(BaseModel):
    file_type: FileType = Field(..., description='The file type')
    title: str = Field(..., description='The title of the file')
    item_type: ItemType = Field(..., description='The item type')
    item_id: int = Field(
        ..., description='The ID of the item to associate the file with'
    )
    remote_location: RemoteLocation = Field(
        ...,
        description='The location type to send the file to. Only `googledrive` is supported at the moment.',
    )


class FilesRemotePostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data36] = Field(None, description='The file data')


class FilesRemoteLinkPostRequest(BaseModel):
    item_type: ItemType = Field(..., description='The item type')
    item_id: int = Field(
        ..., description='The ID of the item to associate the file with'
    )
    remote_id: str = Field(..., description='The remote item ID')
    remote_location: RemoteLocation = Field(
        ...,
        description='The location type to send the file to. Only `googledrive` is supported at the moment.',
    )


class FilesRemoteLinkPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data36] = Field(None, description='The file data')


class Data39(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')


class FilesIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data39] = None


class Data40(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    user_id: Optional[int] = Field(
        None, description='The ID of the user to associate the file with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate the file with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate the file with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate the file with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate the file with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate the file with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate the file with'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file')
    active_flag: Optional[bool] = Field(
        None,
        description='Whether the user is active or not. false = Not activated, true = Activated',
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    cid: Optional[str] = Field(None, description='The ID of the inline attachment')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    mail_message_id: Optional[str] = Field(
        None, description='The ID of the mail message to associate the file with'
    )
    mail_template_id: Optional[str] = Field(
        None, description='The ID of the mail template to associate the file with'
    )
    deal_name: Optional[str] = Field(
        None, description='The name of the deal associated with the file'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the file'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the file'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    lead_name: Optional[str] = Field(
        None, description='The name of the lead associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL of the download file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class FilesIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data40] = Field(None, description='The file data')


class FilesIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class FilesIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data40] = Field(None, description='The file data')


class Data42(BaseModel):
    id: Optional[List[int]] = Field(
        None, description='The array of the IDs of the deleted filter'
    )


class FiltersDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data42] = None


class Type(Enum):
    deals = 'deals'
    leads = 'leads'
    org = 'org'
    people = 'people'
    products = 'products'
    activity = 'activity'
    projects = 'projects'


class Datum20(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the filter')
    name: Optional[str] = Field(None, description='The name of the filter')
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the filter'
    )
    type: Optional[str] = Field(None, description='The type of the item')
    user_id: Optional[int] = Field(None, description='The owner of the filter')
    add_time: Optional[str] = Field(
        None, description='The date and time when the filter was added'
    )
    update_time: Optional[str] = Field(
        None, description='The date and time when the filter was updated'
    )
    visible_to: Optional[int] = Field(
        None, description='The visibility group ID of who can see then filter'
    )
    custom_view_id: Optional[int] = Field(None, description='Used by Pipedrive webapp')


class FiltersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum20]] = Field(None, description='The array of filters')


class Type1(BaseModel):
    pass


class FiltersPostRequest(BaseModel):
    name: str = Field(..., description='The name of the filter')
    conditions: Dict[str, Any] = Field(
        ...,
        description='The conditions of the filter as a JSON object. Please note that a maximum of 16 conditions is allowed per filter and `date` values must be supplied in the `YYYY-MM-DD` format. It requires a minimum structure as follows: `{"glue":"and","conditions":[{"glue":"and","conditions": [CONDITION_OBJECTS]},{"glue":"or","conditions":[CONDITION_OBJECTS]}]}`. Replace `CONDITION_OBJECTS` with JSON objects of the following structure: `{"object":"","field_id":"", "operator":"","value":"", "extra_value":""}` or leave the array empty. Depending on the object type you should use another API endpoint to get `field_id`. There are five types of objects you can choose from: `"person"`, `"deal"`, `"organization"`, `"product"`, `"activity"` and you can use these types of operators depending on what type of a field you have: `"IS NOT NULL"`, `"IS NULL"`, `"<="`, `">="`, `"<"`, `">"`, `"!="`, `"="`, `"LIKE \'$%\'"`, `"LIKE \'%$%\'"`, `"NOT LIKE \'$%\'"`. To get a better understanding of how filters work try creating them directly from the Pipedrive application.',
    )
    type: Type1 = Field(..., description='The type of filter to create')


class Type2(Enum):
    deals = 'deals'
    leads = 'leads'
    org = 'org'
    people = 'people'
    products = 'products'
    activity = 'activity'
    projects = 'projects'


class Data43(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the created filter')
    name: Optional[str] = Field(None, description='The name of the created filter')
    active_flag: Optional[bool] = Field(
        None, description='The activity flag of the created filter'
    )
    type: Optional[Type2] = None
    temporary_flag: Optional[bool] = Field(
        None, description='If the created filter is temporary or not'
    )
    user_id: Optional[int] = Field(
        None, description='The user ID of the created filter'
    )
    add_time: Optional[str] = Field(
        None, description='The add time of the created filter'
    )
    update_time: Optional[str] = Field(
        None, description='The update time of the created filter'
    )
    visible_to: Optional[int] = Field(
        None, description='The visibility group ID of the created filter'
    )
    custom_view_id: Optional[int] = Field(
        None, description='The custom view ID of the created filter'
    )
    conditions: Optional[Dict[str, Any]] = Field(
        None, description='The created filter conditions object'
    )


class FiltersPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data43] = None


class FiltersHelpersGetResponse(BaseModel):
    pass


class Data44(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deleted filter')


class FiltersIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data44] = None


class Data45(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the filter')
    name: Optional[str] = Field(None, description='The name of the filter')
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the filter'
    )
    type: Optional[str] = Field(None, description='The type of the item')
    user_id: Optional[int] = Field(None, description='The owner of the filter')
    add_time: Optional[str] = Field(
        None, description='The date and time when the filter was added'
    )
    update_time: Optional[str] = Field(
        None, description='The date and time when the filter was updated'
    )
    visible_to: Optional[int] = Field(
        None, description='The visibility group ID of who can see then filter'
    )
    custom_view_id: Optional[int] = Field(None, description='Used by Pipedrive webapp')


class FiltersIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data45] = Field(None, description='The filter object')


class FiltersIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the filter')
    conditions: Dict[str, Any] = Field(
        ...,
        description='The conditions of the filter as a JSON object. Please note that a maximum of 16 conditions is allowed per filter and `date` values must be supplied in the `YYYY-MM-DD` format. It requires a minimum structure as follows: `{"glue":"and","conditions":[{"glue":"and","conditions": [CONDITION_OBJECTS]},{"glue":"or","conditions":[CONDITION_OBJECTS]}]}`. Replace `CONDITION_OBJECTS` with JSON objects of the following structure: `{"object":"","field_id":"", "operator":"","value":"", "extra_value":""}` or leave the array empty. Depending on the object type you should use another API endpoint to get `field_id`. There are five types of objects you can choose from: `"person"`, `"deal"`, `"organization"`, `"product"`, `"activity"` and you can use these types of operators depending on what type of a field you have: `"IS NOT NULL"`, `"IS NULL"`, `"<="`, `">="`, `"<"`, `">"`, `"!="`, `"="`, `"LIKE \'$%\'"`, `"LIKE \'%$%\'"`, `"NOT LIKE \'$%\'"`. To get a better understanding of how filters work try creating them directly from the Pipedrive application.',
    )


class Data46(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the created filter')
    name: Optional[str] = Field(None, description='The name of the created filter')
    active_flag: Optional[bool] = Field(
        None, description='The activity flag of the created filter'
    )
    type: Optional[Type2] = None
    temporary_flag: Optional[bool] = Field(
        None, description='If the created filter is temporary or not'
    )
    user_id: Optional[int] = Field(
        None, description='The user ID of the created filter'
    )
    add_time: Optional[str] = Field(
        None, description='The add time of the created filter'
    )
    update_time: Optional[str] = Field(
        None, description='The update time of the created filter'
    )
    visible_to: Optional[int] = Field(
        None, description='The visibility group ID of the created filter'
    )
    custom_view_id: Optional[int] = Field(
        None, description='The custom view ID of the created filter'
    )
    conditions: Optional[Dict[str, Any]] = Field(
        None, description='The created filter conditions object'
    )


class FiltersIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data46] = None


class Interval1(Enum):
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    yearly = 'yearly'


class GoalsPostRequest(BaseModel):
    title: Optional[str] = Field(None, description='The title of the goal')
    assignee: Dict[str, Any] = Field(
        ...,
        description='Who this goal is assigned to. It requires the following JSON structure: `{ "id": "1", "type": "person" }`. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.',
    )
    type: Dict[str, Any] = Field(
        ...,
        description='The type of the goal. It requires the following JSON structure: `{ "name": "deals_started", "params": { "pipeline_id": [1, 2], "activity_type_id": [9] } }`. Type can be one of: `deals_won`, `deals_progressed`, `activities_completed`, `activities_added`, `deals_started` or `revenue_forecast`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. The `pipeline_id` and `activity_type_id` need to be given as an array of integers. To track the goal in all pipelines, set `pipeline_id` as `null` and similarly, to track the goal for all activities, set `activity_type_id` as `null`.”',
    )
    expected_outcome: Dict[str, Any] = Field(
        ...,
        description='The expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: `{ "target": "50", "tracking_metric": "quantity" }` or `{ "target": "50", "tracking_metric": "sum", "currency_id": 1 }`. `currency_id` should only be added to `sum` type of goals.',
    )
    duration: Dict[str, Any] = Field(
        ...,
        description='The date when the goal starts and ends. It requires the following JSON structure: `{ "start": "2019-01-01", "end": "2022-12-31" }`. Date in format of YYYY-MM-DD. "end" can be set to `null` for an infinite, open-ended goal.',
    )
    interval: Interval1 = Field(..., description='The interval of the goal')


class Params(BaseModel):
    pipeline_id: Optional[List[int]] = Field(
        None, description='The IDs of pipelines of the goal'
    )
    activity_type_id: Optional[List[int]] = Field(
        None, description='The IDs of activity types of the goal'
    )


class Type4(BaseModel):
    name: Optional[str] = Field(None, description='The name of the goal type')
    params: Optional[Params] = Field(
        None, description='The parameters that accompany the goal type'
    )


class Assignee(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the goal assignee')
    type: Optional[str] = Field(None, description='The type of the assignee')


class Duration(BaseModel):
    start: Optional[str] = Field(None, description='The start date of the goal')
    end: Optional[str] = Field(None, description='The end date of the goal')


class ExpectedOutcome(BaseModel):
    target: Optional[int] = Field(None, description='The numeric target of the goal')
    tracking_metric: Optional[str] = Field(
        None, description='The tracking metric of the goal'
    )


class Goal(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the goal')
    owner_id: Optional[int] = Field(
        None, description='The ID of the creator of the goal'
    )
    title: Optional[str] = Field(None, description='The title of the goal')
    type: Optional[Type4] = Field(None, description='The type of the goal')
    assignee: Optional[Assignee] = Field(
        None, description='Who the goal is assigned to'
    )
    interval: Optional[str] = Field(None, description='The interval of the goal')
    duration: Optional[Duration] = Field(None, description='The duration of the goal')
    expected_outcome: Optional[ExpectedOutcome] = Field(
        None, description='The expected outcome of the goal'
    )
    is_active: Optional[bool] = Field(
        None, description='Whether the goal is currently active or not'
    )
    report_ids: Optional[List[str]] = Field(
        None, description='The IDs of the reports that belong to the goal'
    )


class Data47(BaseModel):
    goal: Optional[Goal] = None


class GoalsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data47] = None


class TypeName(Enum):
    deals_won = 'deals_won'
    deals_progressed = 'deals_progressed'
    activities_completed = 'activities_completed'
    activities_added = 'activities_added'
    deals_started = 'deals_started'


class AssigneeType(Enum):
    person = 'person'
    company = 'company'
    team = 'team'


class ExpectedOutcomeTrackingMetric(Enum):
    quantity = 'quantity'
    sum = 'sum'


class Type5(BaseModel):
    name: Optional[str] = Field(None, description='The name of the goal type')
    params: Optional[Params] = Field(
        None, description='The parameters that accompany the goal type'
    )


class Goal1(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the goal')
    owner_id: Optional[int] = Field(
        None, description='The ID of the creator of the goal'
    )
    title: Optional[str] = Field(None, description='The title of the goal')
    type: Optional[Type5] = Field(None, description='The type of the goal')
    assignee: Optional[Assignee] = Field(
        None, description='Who the goal is assigned to'
    )
    interval: Optional[str] = Field(None, description='The interval of the goal')
    duration: Optional[Duration] = Field(None, description='The duration of the goal')
    expected_outcome: Optional[ExpectedOutcome] = Field(
        None, description='The expected outcome of the goal'
    )
    is_active: Optional[bool] = Field(
        None, description='Whether the goal is currently active or not'
    )
    report_ids: Optional[List[str]] = Field(
        None, description='The IDs of the reports that belong to the goal'
    )


class Data48(BaseModel):
    goals: Optional[List[Goal1]] = None


class GoalsFindGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data48] = None


class GoalsIdPutRequest(BaseModel):
    title: Optional[str] = Field(None, description='The title of the goal')
    assignee: Optional[Dict[str, Any]] = Field(
        None,
        description='Who this goal is assigned to. It requires the following JSON structure: `{ "id": "1", "type": "person" }`. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.',
    )
    type: Optional[Dict[str, Any]] = Field(
        None,
        description='The type of the goal. It requires the following JSON structure: `{ "name": "deals_started", "params": { "pipeline_id": [1, 2], "activity_type_id": [9] } }`. Type can be one of: `deals_won`, `deals_progressed`, `activities_completed`, `activities_added`, `deals_started` or `revenue_forecast`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. The `pipeline_id` and `activity_type_id` need to be given as an array of integers. To track the goal in all pipelines, set `pipeline_id` as `null` and similarly, to track the goal for all activities, set `activity_type_id` as `null`.”',
    )
    expected_outcome: Optional[Dict[str, Any]] = Field(
        None,
        description='The expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: `{ "target": "50", "tracking_metric": "quantity" }` or `{ "target": "50", "tracking_metric": "sum", "currency_id": 1 }`. `currency_id` should only be added to `sum` type of goals.',
    )
    duration: Optional[Dict[str, Any]] = Field(
        None,
        description='The date when the goal starts and ends. It requires the following JSON structure: `{ "start": "2019-01-01", "end": "2022-12-31" }`. Date in format of YYYY-MM-DD. "end" can be set to `null` for an infinite, open-ended goal.',
    )
    interval: Optional[Interval1] = Field(None, description='The interval of the goal')


class Type6(BaseModel):
    name: Optional[str] = Field(None, description='The name of the goal type')
    params: Optional[Params] = Field(
        None, description='The parameters that accompany the goal type'
    )


class Goal2(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the goal')
    owner_id: Optional[int] = Field(
        None, description='The ID of the creator of the goal'
    )
    title: Optional[str] = Field(None, description='The title of the goal')
    type: Optional[Type6] = Field(None, description='The type of the goal')
    assignee: Optional[Assignee] = Field(
        None, description='Who the goal is assigned to'
    )
    interval: Optional[str] = Field(None, description='The interval of the goal')
    duration: Optional[Duration] = Field(None, description='The duration of the goal')
    expected_outcome: Optional[ExpectedOutcome] = Field(
        None, description='The expected outcome of the goal'
    )
    is_active: Optional[bool] = Field(
        None, description='Whether the goal is currently active or not'
    )
    report_ids: Optional[List[str]] = Field(
        None, description='The IDs of the reports that belong to the goal'
    )


class Data49(BaseModel):
    goal: Optional[Goal2] = None


class GoalsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data49] = None


class GoalsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )


class Type7(BaseModel):
    name: Optional[str] = Field(None, description='The name of the goal type')
    params: Optional[Params] = Field(
        None, description='The parameters that accompany the goal type'
    )


class Goal3(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the goal')
    owner_id: Optional[int] = Field(
        None, description='The ID of the creator of the goal'
    )
    title: Optional[str] = Field(None, description='The title of the goal')
    type: Optional[Type7] = Field(None, description='The type of the goal')
    assignee: Optional[Assignee] = Field(
        None, description='Who the goal is assigned to'
    )
    interval: Optional[str] = Field(None, description='The interval of the goal')
    duration: Optional[Duration] = Field(None, description='The duration of the goal')
    expected_outcome: Optional[ExpectedOutcome] = Field(
        None, description='The expected outcome of the goal'
    )
    is_active: Optional[bool] = Field(
        None, description='Whether the goal is currently active or not'
    )
    report_ids: Optional[List[str]] = Field(
        None, description='The IDs of the reports that belong to the goal'
    )


class Data50(BaseModel):
    progress: Optional[int] = Field(
        None, description='The numeric progress of the goal'
    )
    goal: Optional[Goal3] = None


class GoalsIdResultsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data50] = None


class ItemTypes(Enum):
    deal = 'deal'
    person = 'person'
    organization = 'organization'
    product = 'product'
    lead = 'lead'
    file = 'file'
    mail_attachment = 'mail_attachment'
    project = 'project'


class Fields1(Enum):
    address = 'address'
    code = 'code'
    custom_fields = 'custom_fields'
    email = 'email'
    name = 'name'
    notes = 'notes'
    organization_name = 'organization_name'
    person_name = 'person_name'
    phone = 'phone'
    title = 'title'
    description = 'description'


class IncludeFields1(Enum):
    deal_cc_email = 'deal.cc_email'
    person_picture = 'person.picture'
    product_price = 'product.price'


class Item2(BaseModel):
    result_score: Optional[float] = Field(None, description='Search result relevancy')
    item: Optional[Dict[str, Any]] = Field(None, description='Item')


class RelatedItem(BaseModel):
    result_score: Optional[float] = Field(None, description='Search result relevancy')
    item: Optional[Dict[str, Any]] = Field(None, description='Item')


class Data51(BaseModel):
    items: Optional[List[Item2]] = Field(None, description='The array of found items')
    related_items: Optional[List[RelatedItem]] = Field(
        None,
        description='The array of related items if `search_for_related_items` was enabled',
    )


class Pagination5(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='Whether there are more list items in the collection than displayed',
    )
    next_start: Optional[int] = Field(None, description='Next pagination start')


class AdditionalData27(BaseModel):
    pagination: Optional[Pagination5] = Field(
        None, description='Pagination details of the list'
    )


class ItemSearchGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data51] = None
    additional_data: Optional[AdditionalData27] = None


class FieldType6(Enum):
    dealField = 'dealField'
    leadField = 'leadField'
    personField = 'personField'
    organizationField = 'organizationField'
    productField = 'productField'
    projectField = 'projectField'


class Datum21(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the item')
    field_field_key: Optional[Any] = Field(
        None, alias='$field_key', description='The value of the searched `field_key`'
    )


class AdditionalData28(BaseModel):
    pagination: Optional[Pagination5] = Field(
        None, description='Pagination details of the list'
    )


class ItemSearchFieldGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum21]] = Field(None, description='The array of results')
    additional_data: Optional[AdditionalData28] = None


class ArchivedStatus(Enum):
    archived = 'archived'
    not_archived = 'not_archived'
    all = 'all'


class Sort(Enum):
    id = 'id'
    title = 'title'
    owner_id = 'owner_id'
    creator_id = 'creator_id'
    was_seen = 'was_seen'
    expected_close_date = 'expected_close_date'
    next_activity_id = 'next_activity_id'
    add_time = 'add_time'
    update_time = 'update_time'


class Value(BaseModel):
    amount: float
    currency: str


class Datum22(BaseModel):
    id: Optional[UUID] = Field(
        None, description='The unique ID of the lead in the UUID format'
    )
    title: Optional[str] = Field(None, description='The title of the lead')
    owner_id: Optional[int] = Field(
        None, description='The ID of the user who owns the lead'
    )
    creator_id: Optional[int] = Field(
        None, description='The ID of the user who created the lead'
    )
    label_ids: Optional[List[UUID]] = Field(
        None,
        description='The IDs of the lead labels which are associated with the lead',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of a person which this lead is linked to'
    )
    organization_id: Optional[int] = Field(
        None, description='The ID of an organization which this lead is linked to'
    )
    source_name: Optional[str] = Field(
        None,
        description='Defines where the lead comes from. Will be `API` if the lead was created through the Public API and will be `Manually created` if the lead was created manually through the UI.\n',
    )
    is_archived: Optional[bool] = Field(
        None, description='A flag indicating whether the lead is archived or not'
    )
    was_seen: Optional[bool] = Field(
        None,
        description='A flag indicating whether the lead was seen by someone in the Pipedrive UI',
    )
    value: Optional[Value] = Field(None, description='The potential value of the lead')
    expected_close_date: Optional[date] = Field(
        None,
        description='The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.',
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the lead'
    )
    add_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>',
    )
    cc_email: Optional[str] = Field(None, description='The BCC email of the lead')


class AdditionalData29(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class LeadsGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum22]] = None
    additional_data: Optional[AdditionalData29] = Field(
        None, description='The additional data of the list'
    )


class LeadsPostRequest(BaseModel):
    title: str = Field(..., description='The name of the lead')
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user which will be the owner of the created lead. If not provided, the user making the request will be used.',
    )
    label_ids: Optional[List[UUID]] = Field(
        None,
        description='The IDs of the lead labels which will be associated with the lead',
    )
    person_id: Optional[int] = Field(
        None,
        description='The ID of a person which this lead will be linked to. If the person does not exist yet, it needs to be created first. This property is required unless `organization_id` is specified.',
    )
    organization_id: Optional[int] = Field(
        None,
        description='The ID of an organization which this lead will be linked to. If the organization does not exist yet, it needs to be created first. This property is required unless `person_id` is specified.',
    )
    value: Optional[Value] = Field(None, description='The potential value of the lead')
    expected_close_date: Optional[date] = Field(
        None,
        description='The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )
    was_seen: Optional[bool] = Field(
        None,
        description='A flag indicating whether the lead was seen by someone in the Pipedrive UI',
    )


class Data52(BaseModel):
    id: Optional[UUID] = Field(
        None, description='The unique ID of the lead in the UUID format'
    )
    title: Optional[str] = Field(None, description='The title of the lead')
    owner_id: Optional[int] = Field(
        None, description='The ID of the user who owns the lead'
    )
    creator_id: Optional[int] = Field(
        None, description='The ID of the user who created the lead'
    )
    label_ids: Optional[List[UUID]] = Field(
        None,
        description='The IDs of the lead labels which are associated with the lead',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of a person which this lead is linked to'
    )
    organization_id: Optional[int] = Field(
        None, description='The ID of an organization which this lead is linked to'
    )
    source_name: Optional[str] = Field(
        None,
        description='Defines where the lead comes from. Will be `API` if the lead was created through the Public API and will be `Manually created` if the lead was created manually through the UI.\n',
    )
    is_archived: Optional[bool] = Field(
        None, description='A flag indicating whether the lead is archived or not'
    )
    was_seen: Optional[bool] = Field(
        None,
        description='A flag indicating whether the lead was seen by someone in the Pipedrive UI',
    )
    value: Optional[Value] = Field(None, description='The potential value of the lead')
    expected_close_date: Optional[date] = Field(
        None,
        description='The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.',
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the lead'
    )
    add_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>',
    )
    cc_email: Optional[str] = Field(None, description='The BCC email of the lead')


class LeadsPostResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data52] = None


class Data53(BaseModel):
    id: Optional[UUID] = Field(
        None, description='The unique ID of the lead in the UUID format'
    )
    title: Optional[str] = Field(None, description='The title of the lead')
    owner_id: Optional[int] = Field(
        None, description='The ID of the user who owns the lead'
    )
    creator_id: Optional[int] = Field(
        None, description='The ID of the user who created the lead'
    )
    label_ids: Optional[List[UUID]] = Field(
        None,
        description='The IDs of the lead labels which are associated with the lead',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of a person which this lead is linked to'
    )
    organization_id: Optional[int] = Field(
        None, description='The ID of an organization which this lead is linked to'
    )
    source_name: Optional[str] = Field(
        None,
        description='Defines where the lead comes from. Will be `API` if the lead was created through the Public API and will be `Manually created` if the lead was created manually through the UI.\n',
    )
    is_archived: Optional[bool] = Field(
        None, description='A flag indicating whether the lead is archived or not'
    )
    was_seen: Optional[bool] = Field(
        None,
        description='A flag indicating whether the lead was seen by someone in the Pipedrive UI',
    )
    value: Optional[Value] = Field(None, description='The potential value of the lead')
    expected_close_date: Optional[date] = Field(
        None,
        description='The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.',
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the lead'
    )
    add_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>',
    )
    cc_email: Optional[str] = Field(None, description='The BCC email of the lead')


class LeadsIdGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data53] = None


class LeadsIdGetResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(None, description='The description of the error')
    error_info: Optional[str] = Field(
        None, description='A message describing how to solve the problem'
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class LeadsIdPatchRequest(BaseModel):
    title: Optional[str] = Field(None, description='The name of the lead')
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user which will be the owner of the created lead. If not provided, the user making the request will be used.',
    )
    label_ids: Optional[List[UUID]] = Field(
        None,
        description='The IDs of the lead labels which will be associated with the lead',
    )
    person_id: Optional[int] = Field(
        None,
        description='The ID of a person which this lead will be linked to. If the person does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both.\n',
    )
    organization_id: Optional[int] = Field(
        None,
        description='The ID of an organization which this lead will be linked to. If the organization does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both.',
    )
    is_archived: Optional[bool] = Field(
        None, description='A flag indicating whether the lead is archived or not'
    )
    value: Optional[Value] = Field(None, description='The potential value of the lead')
    expected_close_date: Optional[date] = Field(
        None,
        description='The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )
    was_seen: Optional[bool] = Field(
        None,
        description='A flag indicating whether the lead was seen by someone in the Pipedrive UI',
    )


class Data54(BaseModel):
    id: Optional[UUID] = Field(
        None, description='The unique ID of the lead in the UUID format'
    )
    title: Optional[str] = Field(None, description='The title of the lead')
    owner_id: Optional[int] = Field(
        None, description='The ID of the user who owns the lead'
    )
    creator_id: Optional[int] = Field(
        None, description='The ID of the user who created the lead'
    )
    label_ids: Optional[List[UUID]] = Field(
        None,
        description='The IDs of the lead labels which are associated with the lead',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of a person which this lead is linked to'
    )
    organization_id: Optional[int] = Field(
        None, description='The ID of an organization which this lead is linked to'
    )
    source_name: Optional[str] = Field(
        None,
        description='Defines where the lead comes from. Will be `API` if the lead was created through the Public API and will be `Manually created` if the lead was created manually through the UI.\n',
    )
    is_archived: Optional[bool] = Field(
        None, description='A flag indicating whether the lead is archived or not'
    )
    was_seen: Optional[bool] = Field(
        None,
        description='A flag indicating whether the lead was seen by someone in the Pipedrive UI',
    )
    value: Optional[Value] = Field(None, description='The potential value of the lead')
    expected_close_date: Optional[date] = Field(
        None,
        description='The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.',
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the lead'
    )
    add_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>',
    )
    cc_email: Optional[str] = Field(None, description='The BCC email of the lead')


class LeadsIdPatchResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data54] = None


class LeadsIdPatchResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(None, description='The description of the error')
    error_info: Optional[str] = Field(
        None, description='A message describing how to solve the problem'
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Data55(BaseModel):
    id: Optional[UUID] = None


class LeadsIdDeleteResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data55] = None


class LeadsIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(None, description='The description of the error')
    error_info: Optional[str] = Field(
        None, description='A message describing how to solve the problem'
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class LeadsIdPermittedUsersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[int]] = Field(None, description='The list of user IDs')


class Fields2(Enum):
    custom_fields = 'custom_fields'
    notes = 'notes'
    title = 'title'


class IncludeFields2(Enum):
    lead_was_seen = 'lead.was_seen'


class Owner1(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the owner of the lead')


class Person13(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person the lead is associated with'
    )
    name: Optional[str] = Field(
        None, description='The name of the person the lead is associated with'
    )


class Organization13(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization the lead is associated with'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization the lead is associated with'
    )


class Item4(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the lead')
    type: Optional[str] = Field(None, description='The type of the item')
    title: Optional[str] = Field(None, description='The title of the lead')
    owner: Optional[Owner1] = None
    person: Optional[Person13] = None
    organization: Optional[Organization13] = None
    phones: Optional[List[str]] = None
    emails: Optional[List[str]] = None
    custom_fields: Optional[List[str]] = Field(None, description='Custom fields')
    notes: Optional[List[str]] = Field(None, description='An array of notes')
    value: Optional[int] = Field(None, description='The value of the lead')
    currency: Optional[str] = Field(None, description='The currency of the lead')
    visible_to: Optional[int] = Field(None, description='The visibility of the lead')
    is_archived: Optional[bool] = Field(
        None, description='A flag indicating whether the lead is archived or not'
    )


class Item3(BaseModel):
    result_score: Optional[float] = Field(None, description='Search result relevancy')
    item: Optional[Item4] = None


class Data56(BaseModel):
    items: Optional[List[Item3]] = Field(None, description='The array of leads')


class AdditionalData30(BaseModel):
    pagination: Optional[Pagination5] = Field(
        None, description='Pagination details of the list'
    )


class LeadsSearchGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data56] = None
    additional_data: Optional[AdditionalData30] = None


class Color(Enum):
    green = 'green'
    blue = 'blue'
    red = 'red'
    yellow = 'yellow'
    purple = 'purple'
    gray = 'gray'


class Datum23(BaseModel):
    id: Optional[UUID] = Field(None, description='The unique ID of the lead label')
    name: Optional[str] = Field(None, description='The name of the lead label')
    color: Optional[Color] = Field(
        None, description='The color of the label. Only a subset of colors can be used.'
    )
    add_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead label was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead label was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )


class LeadLabelsGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum23]] = None


class LeadLabelsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the lead label')
    color: Color = Field(
        ..., description='The color of the label. Only a subset of colors can be used.'
    )


class Data57(BaseModel):
    id: Optional[UUID] = Field(None, description='The unique ID of the lead label')
    name: Optional[str] = Field(None, description='The name of the lead label')
    color: Optional[Color] = Field(
        None, description='The color of the label. Only a subset of colors can be used.'
    )
    add_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead label was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead label was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )


class LeadLabelsPostResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data57] = None


class LeadLabelsIdPatchRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the lead label')
    color: Optional[Color] = Field(
        None, description='The color of the label. Only a subset of colors can be used.'
    )


class Data58(BaseModel):
    id: Optional[UUID] = Field(None, description='The unique ID of the lead label')
    name: Optional[str] = Field(None, description='The name of the lead label')
    color: Optional[Color] = Field(
        None, description='The color of the label. Only a subset of colors can be used.'
    )
    add_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead label was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The date and time of when the lead label was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.',
    )


class LeadLabelsIdPatchResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data58] = None


class LeadLabelsIdPatchResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(None, description='The description of the error')
    error_info: Optional[str] = Field(
        None, description='A message describing how to solve the problem'
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Data59(BaseModel):
    id: Optional[UUID] = None


class LeadLabelsIdDeleteResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data59] = None


class LeadLabelsIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(None, example=False)
    error: Optional[str] = Field(None, description='The description of the error')
    error_info: Optional[str] = Field(
        None, description='A message describing how to solve the problem'
    )
    data: Optional[Dict[str, Any]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Datum24(BaseModel):
    name: Optional[str] = Field(None, description='The unique name of a lead source')


class LeadSourcesGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum24]] = None


class OrderBy(Enum):
    id = 'id'
    name = 'name'
    manager_id = 'manager_id'
    active_flag = 'active_flag'


class SkipUsers(Enum):
    number_0 = 0
    number_1 = 1


class ActiveFlag(BaseModel):
    pass


class Datum25(BaseModel):
    id: Optional[int] = Field(None, description='The team ID')
    name: Optional[str] = Field(None, description='The team name')
    description: Optional[str] = Field(None, description='The team description')
    manager_id: Optional[int] = Field(None, description='The team manager ID')
    users: Optional[List[int]] = Field(None, description='The list of user IDs')
    active_flag: Optional[ActiveFlag] = Field(
        None, description='Flag that indicates whether the team is active'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Flag that indicates whether the team is deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The team creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the team'
    )


class LegacyTeamsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum25]] = None


class LegacyTeamsPostRequest(BaseModel):
    name: str = Field(..., description='The team name')
    description: Optional[str] = Field(None, description='The team description')
    manager_id: int = Field(..., description='The team manager ID')
    users: Optional[List[int]] = Field(None, description='The list of user IDs')


class Data60(BaseModel):
    id: Optional[int] = Field(None, description='The team ID')
    name: Optional[str] = Field(None, description='The team name')
    description: Optional[str] = Field(None, description='The team description')
    manager_id: Optional[int] = Field(None, description='The team manager ID')
    users: Optional[List[int]] = Field(None, description='The list of user IDs')
    active_flag: Optional[ActiveFlag] = Field(
        None, description='Flag that indicates whether the team is active'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Flag that indicates whether the team is deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The team creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the team'
    )


class LegacyTeamsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data60] = Field(None, title='baseTeam')


class LegacyTeamsPostResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Data61(BaseModel):
    id: Optional[int] = Field(None, description='The team ID')
    name: Optional[str] = Field(None, description='The team name')
    description: Optional[str] = Field(None, description='The team description')
    manager_id: Optional[int] = Field(None, description='The team manager ID')
    users: Optional[List[int]] = Field(None, description='The list of user IDs')
    active_flag: Optional[ActiveFlag] = Field(
        None, description='Flag that indicates whether the team is active'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Flag that indicates whether the team is deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The team creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the team'
    )


class LegacyTeamsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data61] = Field(None, title='baseTeam')


class LegacyTeamsIdGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class LegacyTeamsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The team name')
    description: Optional[str] = Field(None, description='The team description')
    manager_id: Optional[int] = Field(None, description='The team manager ID')
    users: Optional[List[int]] = Field(None, description='The list of user IDs')
    active_flag: Optional[ActiveFlag] = Field(
        None, description='Flag that indicates whether the team is active'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Flag that indicates whether the team is deleted'
    )


class Data62(BaseModel):
    id: Optional[int] = Field(None, description='The team ID')
    name: Optional[str] = Field(None, description='The team name')
    description: Optional[str] = Field(None, description='The team description')
    manager_id: Optional[int] = Field(None, description='The team manager ID')
    users: Optional[List[int]] = Field(None, description='The list of user IDs')
    active_flag: Optional[ActiveFlag] = Field(
        None, description='Flag that indicates whether the team is active'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Flag that indicates whether the team is deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The team creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the team'
    )


class LegacyTeamsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data62] = Field(None, title='baseTeam')


class LegacyTeamsIdPutResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class LegacyTeamsIdUsersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[int]] = Field(None, description='The list of user IDs')


class LegacyTeamsIdUsersGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class LegacyTeamsIdUsersPostRequest(BaseModel):
    users: List[int] = Field(..., description='The list of user IDs')


class LegacyTeamsIdUsersPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[int]] = Field(None, description='The list of user IDs')


class LegacyTeamsIdUsersPostResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class LegacyTeamsIdUsersDeleteRequest(BaseModel):
    users: List[int] = Field(..., description='The list of user IDs')


class LegacyTeamsIdUsersDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[int]] = Field(None, description='The list of user IDs')


class LegacyTeamsIdUsersDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Datum26(BaseModel):
    id: Optional[int] = Field(None, description='The team ID')
    name: Optional[str] = Field(None, description='The team name')
    description: Optional[str] = Field(None, description='The team description')
    manager_id: Optional[int] = Field(None, description='The team manager ID')
    users: Optional[List[int]] = Field(None, description='The list of user IDs')
    active_flag: Optional[ActiveFlag] = Field(
        None, description='Flag that indicates whether the team is active'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Flag that indicates whether the team is deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The team creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the team'
    )


class LegacyTeamsUserIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum26]] = None


class IncludeBody(Enum):
    number_0 = 0
    number_1 = 1


class Data63(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail message.')
    from_: Optional[List[FromItem]] = Field(
        None, alias='from', description='The array of mail message sender (object)'
    )
    to: Optional[List[ToItem]] = Field(
        None, description='The array of mail message receiver (object)'
    )
    cc: Optional[List[CcItem]] = Field(
        None, description='The array of mail message copies (object)'
    )
    bcc: Optional[List[BccItem]] = Field(
        None, description='The array of mail message blind copies (object)'
    )
    body_url: Optional[str] = Field(None, description='The mail message body URL')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    mail_thread_id: Optional[int] = Field(
        None, description='ID of the mail message thread'
    )
    subject: Optional[str] = Field(None, description='The subject of mail message')
    snippet: Optional[str] = Field(
        None,
        description='The snippet of mail message. Snippet length is up to 225 characters.',
    )
    mail_tracking_status: Optional[MailTrackingStatus] = Field(
        None,
        description='The status of tracking mail message. Value is `null` if tracking is not enabled.',
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking in mail message body is enabled.'
    )
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail message is read or not by the user'
    )
    draft: Optional[str] = Field(
        None,
        description='If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.',
    )
    draft_flag: Optional[DraftFlag] = Field(
        None, description='Whether the mail message is a draft or not'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail message is synced with the provider or not'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail message is deleted or not'
    )
    has_body_flag: Optional[HasBodyFlag] = Field(
        None, description='Whether the mail message has a body or not'
    )
    sent_flag: Optional[SentFlag] = Field(
        None, description='Whether the mail message has been sent or not'
    )
    sent_from_pipedrive_flag: Optional[SentFromPipedriveFlag] = Field(
        None,
        description='Whether the mail message has been sent from Pipedrive app or not',
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None,
        description='Whether the mail message has been created by Smart Email BCC feature or not',
    )
    message_time: Optional[datetime] = Field(
        None, description='Creation or receival time of the mail message'
    )
    add_time: Optional[datetime] = Field(
        None, description='The insertion into the database time of the mail message'
    )
    update_time: Optional[datetime] = Field(
        None, description='The updating time in the database of the mail message'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail message has an attachment or not'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail message has an inline attachment or not'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail message has an attachment (which is not inline) or not',
    )


class MailboxMailMessagesIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    statusCode: Optional[int] = Field(
        None,
        description='The email service specific status code and it is returned through the response body.',
    )
    statusText: Optional[str] = Field(
        None, description='The status text of the response.'
    )
    service: Optional[str] = Field(
        None, description='The service name of the response.'
    )
    data: Optional[Data63] = None


class Folder(Enum):
    inbox = 'inbox'
    drafts = 'drafts'
    sent = 'sent'
    archive = 'archive'


class ToItem2(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread participant')
    name: Optional[str] = Field(None, description='Name of the mail thread participant')
    latest_sent: Optional[bool] = Field(
        None,
        description='Whether the mail thread participant was last to send an email',
    )
    email_address: Optional[str] = Field(
        None, description='Email address of the mail thread participant'
    )
    message_time: Optional[float] = Field(None, description='Message time')
    linked_person_id: Optional[int] = Field(None, description='ID of the linked person')
    linked_person_name: Optional[str] = Field(
        None, description='Email of the linked person'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message party'
    )
    linked_organization_id: Optional[int] = Field(
        None, description='Linked Organization ID'
    )


class FromItem2(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread participant')
    name: Optional[str] = Field(None, description='Name of the mail thread participant')
    latest_sent: Optional[bool] = Field(
        None,
        description='Whether the mail thread participant was last to send an email',
    )
    email_address: Optional[str] = Field(
        None, description='Email address of the mail thread participant'
    )
    message_time: Optional[float] = Field(None, description='Message time')
    linked_person_id: Optional[int] = Field(None, description='ID of the linked person')
    linked_person_name: Optional[str] = Field(
        None, description='Email of the linked person'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message party'
    )
    linked_organization_id: Optional[int] = Field(
        None, description='Linked Organization ID'
    )


class Parties(BaseModel):
    to: Optional[List[ToItem2]] = Field(
        None, description='Recipients of the mail thread'
    )
    from_: Optional[List[FromItem2]] = Field(
        None, alias='from', description='Senders of the mail thread'
    )


class HasDraftFlag(BaseModel):
    pass


class HasSentFlag(BaseModel):
    pass


class ArchivedFlag(BaseModel):
    pass


class SharedFlag(BaseModel):
    pass


class ExternalDeletedFlag(BaseModel):
    pass


class FirstMessageToMeFlag(BaseModel):
    pass


class AllMessagesSentFlag(BaseModel):
    pass


class Datum27(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    subject: Optional[str] = Field(None, description='The subject')
    snippet: Optional[str] = Field(None, description='A snippet')
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail thread is read'
    )
    mail_tracking_status: Optional[str] = Field(
        None, description='Mail tracking status'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail thread has an attachment'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail thread has inline attachments'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail thread has real attachments (which are not inline)',
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail thread is deleted'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail thread is synced'
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None, description='Whether one of the parties of the mail thread is Bcc'
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking of the mail thread is enabled'
    )
    parties: Optional[Parties] = Field(None, description='Parties of the mail thread')
    drafts_parties: Optional[List[Dict[str, Any]]] = Field(
        None, description='Parties of the drafted mail thread'
    )
    folders: Optional[List[str]] = Field(
        None, description='Folders in which messages from thread are being stored'
    )
    version: Optional[float] = Field(None, description='Version')
    snippet_draft: Optional[str] = Field(None, description='A snippet from a draft')
    snippet_sent: Optional[str] = Field(
        None, description='A snippet from a message sent'
    )
    message_count: Optional[int] = Field(None, description='An amount of messages')
    has_draft_flag: Optional[HasDraftFlag] = Field(
        None, description='Whether the mail thread has any drafts'
    )
    has_sent_flag: Optional[HasSentFlag] = Field(
        None, description='Whether the mail thread has messages sent'
    )
    archived_flag: Optional[ArchivedFlag] = Field(
        None, description='Whether the mail thread is archived'
    )
    shared_flag: Optional[SharedFlag] = Field(
        None, description='Whether the mail thread is shared'
    )
    external_deleted_flag: Optional[ExternalDeletedFlag] = Field(
        None, description='Whether the mail thread has been deleted externally'
    )
    first_message_to_me_flag: Optional[FirstMessageToMeFlag] = Field(
        None, description='Whether the mail thread was initialized by others'
    )
    last_message_timestamp: Optional[datetime] = Field(
        None, description='Last message timestamp'
    )
    first_message_timestamp: Optional[datetime] = Field(
        None,
        description='The time when the mail thread has had the first message received or created',
    )
    last_message_sent_timestamp: Optional[datetime] = Field(
        None, description='The last time when the mail thread has had a message sent'
    )
    last_message_received_timestamp: Optional[datetime] = Field(
        None,
        description='The last time when the mail thread has had a message received',
    )
    add_time: Optional[datetime] = Field(
        None, description='The time when the mail thread was inserted to database'
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The time when the mail thread was updated in database received',
    )
    deal_id: Optional[int] = Field(None, description='The ID of the deal')
    deal_status: Optional[str] = Field(None, description='Status of the deal')
    lead_id: Optional[UUID] = Field(None, description='The ID of the lead')
    all_messages_sent_flag: Optional[AllMessagesSentFlag] = Field(
        None, description='Whether all the mail thread messages have been sent'
    )


class MailboxMailThreadsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum27]] = Field(None, description='The array of mail threads')


class Data64(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deleted mail thread')


class MailboxMailThreadsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data64] = None


class Parties1(BaseModel):
    to: Optional[List[ToItem2]] = Field(
        None, description='Recipients of the mail thread'
    )
    from_: Optional[List[FromItem2]] = Field(
        None, alias='from', description='Senders of the mail thread'
    )


class Data65(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    subject: Optional[str] = Field(None, description='The subject')
    snippet: Optional[str] = Field(None, description='A snippet')
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail thread is read'
    )
    mail_tracking_status: Optional[str] = Field(
        None, description='Mail tracking status'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail thread has an attachment'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail thread has inline attachments'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail thread has real attachments (which are not inline)',
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail thread is deleted'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail thread is synced'
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None, description='Whether one of the parties of the mail thread is Bcc'
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking of the mail thread is enabled'
    )
    parties: Optional[Parties1] = Field(None, description='Parties of the mail thread')
    drafts_parties: Optional[List[Dict[str, Any]]] = Field(
        None, description='Parties of the drafted mail thread'
    )
    folders: Optional[List[str]] = Field(
        None, description='Folders in which messages from thread are being stored'
    )
    version: Optional[float] = Field(None, description='Version')
    snippet_draft: Optional[str] = Field(None, description='A snippet from a draft')
    snippet_sent: Optional[str] = Field(
        None, description='A snippet from a message sent'
    )
    message_count: Optional[int] = Field(None, description='An amount of messages')
    has_draft_flag: Optional[HasDraftFlag] = Field(
        None, description='Whether the mail thread has any drafts'
    )
    has_sent_flag: Optional[HasSentFlag] = Field(
        None, description='Whether the mail thread has messages sent'
    )
    archived_flag: Optional[ArchivedFlag] = Field(
        None, description='Whether the mail thread is archived'
    )
    shared_flag: Optional[SharedFlag] = Field(
        None, description='Whether the mail thread is shared'
    )
    external_deleted_flag: Optional[ExternalDeletedFlag] = Field(
        None, description='Whether the mail thread has been deleted externally'
    )
    first_message_to_me_flag: Optional[FirstMessageToMeFlag] = Field(
        None, description='Whether the mail thread was initialized by others'
    )
    last_message_timestamp: Optional[datetime] = Field(
        None, description='Last message timestamp'
    )
    first_message_timestamp: Optional[datetime] = Field(
        None,
        description='The time when the mail thread has had the first message received or created',
    )
    last_message_sent_timestamp: Optional[datetime] = Field(
        None, description='The last time when the mail thread has had a message sent'
    )
    last_message_received_timestamp: Optional[datetime] = Field(
        None,
        description='The last time when the mail thread has had a message received',
    )
    add_time: Optional[datetime] = Field(
        None, description='The time when the mail thread was inserted to database'
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The time when the mail thread was updated in database received',
    )
    deal_id: Optional[int] = Field(None, description='The ID of the deal')
    deal_status: Optional[str] = Field(None, description='Status of the deal')
    lead_id: Optional[UUID] = Field(None, description='The ID of the lead')
    all_messages_sent_flag: Optional[AllMessagesSentFlag] = Field(
        None, description='Whether all the mail thread messages have been sent'
    )


class MailboxMailThreadsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data65] = Field(None, description='The mail thread object')


class MailboxMailThreadsIdPutRequest(BaseModel):
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this thread is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead this thread is associated with'
    )
    shared_flag: Optional[SharedFlag] = Field(
        None,
        description='Whether this thread is shared with other users in your company',
    )
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether this thread is read or unread'
    )
    archived_flag: Optional[ArchivedFlag] = Field(
        None,
        description='Whether this thread is archived or not. You can only archive threads that belong to Inbox folder. Archived threads will disappear from Inbox.',
    )


class Parties2(BaseModel):
    to: Optional[List[ToItem2]] = Field(
        None, description='Recipients of the mail thread'
    )
    from_: Optional[List[FromItem2]] = Field(
        None, alias='from', description='Senders of the mail thread'
    )


class Data66(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    subject: Optional[str] = Field(None, description='The subject')
    snippet: Optional[str] = Field(None, description='A snippet')
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail thread is read'
    )
    mail_tracking_status: Optional[str] = Field(
        None, description='Mail tracking status'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail thread has an attachment'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail thread has inline attachments'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail thread has real attachments (which are not inline)',
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail thread is deleted'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail thread is synced'
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None, description='Whether one of the parties of the mail thread is Bcc'
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking of the mail thread is enabled'
    )
    parties: Optional[Parties2] = Field(None, description='Parties of the mail thread')
    drafts_parties: Optional[List[Dict[str, Any]]] = Field(
        None, description='Parties of the drafted mail thread'
    )
    folders: Optional[List[str]] = Field(
        None, description='Folders in which messages from thread are being stored'
    )
    version: Optional[float] = Field(None, description='Version')
    snippet_draft: Optional[str] = Field(None, description='A snippet from a draft')
    snippet_sent: Optional[str] = Field(
        None, description='A snippet from a message sent'
    )
    message_count: Optional[int] = Field(None, description='An amount of messages')
    has_draft_flag: Optional[HasDraftFlag] = Field(
        None, description='Whether the mail thread has any drafts'
    )
    has_sent_flag: Optional[HasSentFlag] = Field(
        None, description='Whether the mail thread has messages sent'
    )
    archived_flag: Optional[ArchivedFlag] = Field(
        None, description='Whether the mail thread is archived'
    )
    shared_flag: Optional[SharedFlag] = Field(
        None, description='Whether the mail thread is shared'
    )
    external_deleted_flag: Optional[ExternalDeletedFlag] = Field(
        None, description='Whether the mail thread has been deleted externally'
    )
    first_message_to_me_flag: Optional[FirstMessageToMeFlag] = Field(
        None, description='Whether the mail thread was initialized by others'
    )
    last_message_timestamp: Optional[datetime] = Field(
        None, description='Last message timestamp'
    )
    first_message_timestamp: Optional[datetime] = Field(
        None,
        description='The time when the mail thread has had the first message received or created',
    )
    last_message_sent_timestamp: Optional[datetime] = Field(
        None, description='The last time when the mail thread has had a message sent'
    )
    last_message_received_timestamp: Optional[datetime] = Field(
        None,
        description='The last time when the mail thread has had a message received',
    )
    add_time: Optional[datetime] = Field(
        None, description='The time when the mail thread was inserted to database'
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The time when the mail thread was updated in database received',
    )
    deal_id: Optional[int] = Field(None, description='The ID of the deal')
    deal_status: Optional[str] = Field(None, description='Status of the deal')
    lead_id: Optional[UUID] = Field(None, description='The ID of the lead')
    all_messages_sent_flag: Optional[AllMessagesSentFlag] = Field(
        None, description='Whether all the mail thread messages have been sent'
    )


class MailboxMailThreadsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data66] = Field(
        None, description='The mail thread object', title='baseMailThread'
    )


class CcItem2(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread participant')
    name: Optional[str] = Field(None, description='Name of the mail thread participant')
    latest_sent: Optional[bool] = Field(
        None,
        description='Whether the mail thread participant was last to send an email',
    )
    email_address: Optional[str] = Field(
        None, description='Email address of the mail thread participant'
    )
    message_time: Optional[float] = Field(None, description='Message time')
    linked_person_id: Optional[int] = Field(None, description='ID of the linked person')
    linked_person_name: Optional[str] = Field(
        None, description='Email of the linked person'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message party'
    )
    linked_organization_id: Optional[int] = Field(
        None, description='Linked Organization ID'
    )


class BccItem2(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread participant')
    name: Optional[str] = Field(None, description='Name of the mail thread participant')
    latest_sent: Optional[bool] = Field(
        None,
        description='Whether the mail thread participant was last to send an email',
    )
    email_address: Optional[str] = Field(
        None, description='Email address of the mail thread participant'
    )
    message_time: Optional[float] = Field(None, description='Message time')
    linked_person_id: Optional[int] = Field(None, description='ID of the linked person')
    linked_person_name: Optional[str] = Field(
        None, description='Email of the linked person'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message party'
    )
    linked_organization_id: Optional[int] = Field(
        None, description='Linked Organization ID'
    )


class Datum28(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail thread')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    subject: Optional[str] = Field(None, description='The subject')
    snippet: Optional[str] = Field(None, description='A snippet')
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail thread is read'
    )
    mail_tracking_status: Optional[str] = Field(
        None, description='Mail tracking status'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail thread has an attachment'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail thread has inline attachments'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail thread has real attachments (which are not inline)',
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail thread is deleted'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail thread is synced'
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None, description='Whether one of the parties of the mail thread is Bcc'
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking of the mail thread is enabled'
    )
    from_: Optional[List[FromItem2]] = Field(
        None, alias='from', description='Senders of the mail thread'
    )
    to: Optional[List[ToItem2]] = Field(
        None, description='Recipients of the mail thread'
    )
    cc: Optional[List[CcItem2]] = Field(None, description='Participants of the Cc')
    bcc: Optional[List[BccItem2]] = Field(None, description='Participants of the Bcc')
    body_url: Optional[str] = Field(
        None, description='A link to the mail thread message'
    )
    mail_thread_id: Optional[int] = Field(None, description='ID of the mail thread')
    draft: Optional[str] = Field(
        None,
        description='If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.',
    )
    has_body_flag: Optional[HasBodyFlag] = Field(
        None, description='Whether the mail thread message has a body'
    )
    sent_flag: Optional[SentFlag] = Field(
        None, description='Whether the mail thread message is sent'
    )
    sent_from_pipedrive_flag: Optional[SentFromPipedriveFlag] = Field(
        None, description='Whether the mail thread message is sent from Pipedrive'
    )
    message_time: Optional[datetime] = Field(
        None, description='The time when the mail message was received or created'
    )
    add_time: Optional[datetime] = Field(
        None, description='The time when the mail message was inserted to database'
    )
    update_time: Optional[datetime] = Field(
        None,
        description='The time when the mail message was updated in database received',
    )


class MailboxMailThreadsIdMailMessagesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum28]] = Field(
        None, description='The array of the mail messages of the mail thread'
    )


class MeetingsUserProviderLinksPostRequest(BaseModel):
    user_provider_id: UUID = Field(
        ...,
        description='Unique identifier linking a user to the installed integration. Generated by the integration.',
        example='1e3943c9-6395-462b-b432-1f252c017f3d',
    )
    user_id: int = Field(..., description='Pipedrive user ID', example=123)
    company_id: int = Field(..., description='Pipedrive company ID', example=456)
    marketplace_client_id: str = Field(
        ...,
        description='Pipedrive Marketplace client ID of the installed integration',
        example='57da5c3c55a82bb4',
    )


class Data67(BaseModel):
    message: Optional[str] = Field(
        None,
        description='The success message of the request',
        example='The user was added successfully',
    )


class MeetingsUserProviderLinksPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the request was successful or not',
    )
    data: Optional[Data67] = None


class MeetingsUserProviderLinksPostResponse1(BaseModel):
    success: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the request was successful or not',
    )
    message: Optional[str] = Field(
        None,
        description='The error message of the request',
        example='Missing user id or company id',
    )


class MeetingsUserProviderLinksIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the request was successful or not',
    )
    data: Optional[Data67] = None


class MeetingsUserProviderLinksIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the request was successful or not',
    )
    message: Optional[str] = Field(
        None,
        description='The error message of the request',
        example='Missing user id or company id',
    )


class PinnedToLeadFlag(Enum):
    number_0 = 0
    number_1 = 1


class PinnedToDealFlag(Enum):
    number_0 = 0
    number_1 = 1


class PinnedToOrganizationFlag(Enum):
    number_0 = 0
    number_1 = 1


class PinnedToPersonFlag(Enum):
    number_0 = 0
    number_1 = 1


class Deal7(BaseModel):
    title: Optional[str] = Field(
        None, description='The title of the deal this note is attached to'
    )


class Organization14(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization the note is attached to'
    )


class Person14(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the person the note is attached to'
    )


class User14(BaseModel):
    email: Optional[str] = Field(None, description='The email of the note creator')
    icon_url: Optional[str] = Field(
        None, description='The URL of the note creator avatar picture'
    )
    is_you: Optional[bool] = Field(
        None, description='Whether the note is created by you or not'
    )
    name: Optional[str] = Field(None, description='The name of the note creator')


class Datum29(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the note')
    active_flag: Optional[bool] = Field(
        None, description='Whether the note is active or deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    deal: Optional[Deal7] = Field(None, description='The deal this note is attached to')
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead the note is attached to'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal the note is attached to'
    )
    last_update_user_id: Optional[int] = Field(
        None, description='The ID of the user who last updated the note'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization the note is attached to'
    )
    organization: Optional[Organization14] = Field(
        None, description='The organization the note is attached to'
    )
    person: Optional[Person14] = Field(
        None, description='The person the note is attached to'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person the note is attached to'
    )
    pinned_to_deal_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to deal pinning state',
    )
    pinned_to_organization_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to organization pinning state',
    )
    pinned_to_person_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to person pinning state',
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the note'
    )
    user: Optional[User14] = Field(None, description='The user who created the note')
    user_id: Optional[int] = Field(None, description='The ID of the note creator')


class Pagination8(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )
    next_start: Optional[int] = Field(None, description='Next pagination start')


class AdditionalData31(BaseModel):
    pagination: Optional[Pagination8] = Field(
        None, description='The pagination details of the list'
    )


class NotesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum29]] = Field(None, description='The array of notes')
    additional_data: Optional[AdditionalData31] = None


class PinnedToLeadFlag1(BaseModel):
    pass


class PinnedToDealFlag1(BaseModel):
    pass


class PinnedToOrganizationFlag1(BaseModel):
    pass


class PinnedToPersonFlag1(BaseModel):
    pass


class NotesPostRequest(BaseModel):
    content: str = Field(
        ...,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead the note will be attached to. This property is required unless one of (`deal_id/person_id/org_id`) is specified.',
    )
    deal_id: Optional[int] = Field(
        None,
        description='The ID of the deal the note will be attached to. This property is required unless one of (`lead_id/person_id/org_id`) is specified.',
    )
    person_id: Optional[int] = Field(
        None,
        description='The ID of the person this note will be attached to. This property is required unless one of (`deal_id/lead_id/org_id`) is specified.',
    )
    org_id: Optional[int] = Field(
        None,
        description='The ID of the organization this note will be attached to. This property is required unless one of (`deal_id/lead_id/person_id`) is specified.',
    )
    user_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the author of the note. Only an admin can change the author.',
    )
    add_time: Optional[str] = Field(
        None,
        description='The optional creation date & time of the note in UTC. Can be set in the past or in the future. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS',
    )
    pinned_to_lead_flag: Optional[PinnedToLeadFlag1] = Field(
        None,
        description='If set, the results are filtered by note to lead pinning state (`lead_id` is also required)',
    )
    pinned_to_deal_flag: Optional[PinnedToDealFlag1] = Field(
        None,
        description='If set, the results are filtered by note to deal pinning state (`deal_id` is also required)',
    )
    pinned_to_organization_flag: Optional[PinnedToOrganizationFlag1] = Field(
        None,
        description='If set, the results are filtered by note to organization pinning state (`org_id` is also required)',
    )
    pinned_to_person_flag: Optional[PinnedToPersonFlag1] = Field(
        None,
        description='If set, the results are filtered by note to person pinning state (`person_id` is also required)',
    )


class Data69(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the note')
    active_flag: Optional[bool] = Field(
        None, description='Whether the note is active or deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    deal: Optional[Deal7] = Field(None, description='The deal this note is attached to')
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead the note is attached to'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal the note is attached to'
    )
    last_update_user_id: Optional[int] = Field(
        None, description='The ID of the user who last updated the note'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization the note is attached to'
    )
    organization: Optional[Organization14] = Field(
        None, description='The organization the note is attached to'
    )
    person: Optional[Person14] = Field(
        None, description='The person the note is attached to'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person the note is attached to'
    )
    pinned_to_deal_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to deal pinning state',
    )
    pinned_to_organization_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to organization pinning state',
    )
    pinned_to_person_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to person pinning state',
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the note'
    )
    user: Optional[User14] = Field(None, description='The user who created the note')
    user_id: Optional[int] = Field(None, description='The ID of the note creator')


class NotesPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data69] = None


class NotesIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )


class Data70(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the note')
    active_flag: Optional[bool] = Field(
        None, description='Whether the note is active or deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    deal: Optional[Deal7] = Field(None, description='The deal this note is attached to')
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead the note is attached to'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal the note is attached to'
    )
    last_update_user_id: Optional[int] = Field(
        None, description='The ID of the user who last updated the note'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization the note is attached to'
    )
    organization: Optional[Organization14] = Field(
        None, description='The organization the note is attached to'
    )
    person: Optional[Person14] = Field(
        None, description='The person the note is attached to'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person the note is attached to'
    )
    pinned_to_deal_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to deal pinning state',
    )
    pinned_to_organization_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to organization pinning state',
    )
    pinned_to_person_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to person pinning state',
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the note'
    )
    user: Optional[User14] = Field(None, description='The user who created the note')
    user_id: Optional[int] = Field(None, description='The ID of the note creator')


class NotesIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data70] = None


class NotesIdPutRequest(BaseModel):
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead the note will be attached to'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal the note will be attached to'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person the note will be attached to'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization the note will be attached to'
    )
    user_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the author of the note. Only an admin can change the author.',
    )
    add_time: Optional[str] = Field(
        None,
        description='The optional creation date & time of the note in UTC. Can be set in the past or in the future. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS',
    )
    pinned_to_lead_flag: Optional[PinnedToLeadFlag1] = Field(
        None,
        description='If set, the results are filtered by note to lead pinning state (`lead_id` is also required)',
    )
    pinned_to_deal_flag: Optional[PinnedToDealFlag1] = Field(
        None,
        description='If set, the results are filtered by note to deal pinning state (`deal_id` is also required)',
    )
    pinned_to_organization_flag: Optional[PinnedToOrganizationFlag1] = Field(
        None,
        description='If set, the results are filtered by note to organization pinning state (`org_id` is also required)',
    )
    pinned_to_person_flag: Optional[PinnedToPersonFlag1] = Field(
        None,
        description='If set, the results are filtered by note to person pinning state (`person_id` is also required)',
    )


class Data71(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the note')
    active_flag: Optional[bool] = Field(
        None, description='Whether the note is active or deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    deal: Optional[Deal7] = Field(None, description='The deal this note is attached to')
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead the note is attached to'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal the note is attached to'
    )
    last_update_user_id: Optional[int] = Field(
        None, description='The ID of the user who last updated the note'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization the note is attached to'
    )
    organization: Optional[Organization14] = Field(
        None, description='The organization the note is attached to'
    )
    person: Optional[Person14] = Field(
        None, description='The person the note is attached to'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person the note is attached to'
    )
    pinned_to_deal_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to deal pinning state',
    )
    pinned_to_organization_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to organization pinning state',
    )
    pinned_to_person_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to person pinning state',
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the note'
    )
    user: Optional[User14] = Field(None, description='The user who created the note')
    user_id: Optional[int] = Field(None, description='The ID of the note creator')


class NotesIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data71] = None


class Datum30(BaseModel):
    uuid: Optional[UUID] = Field(None, description='The ID of the note')
    active_flag: Optional[bool] = Field(
        None, description='Whether the note is active or deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    update_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    object_id: Optional[str] = Field(
        None,
        description='The ID of the object that the comment is attached to, will be the id of the note',
    )
    object_type: Optional[str] = Field(
        None,
        description='The type of object that the comment is attached to, will be "note"',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user who created the comment'
    )
    updater_id: Optional[int] = Field(
        None, description='The ID of the user who last updated the comment'
    )
    company_id: Optional[int] = Field(None, description='The ID of the company')


class AdditionalData32(BaseModel):
    pagination: Optional[Pagination8] = Field(
        None, description='The pagination details of the list'
    )


class NotesIdCommentsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum30]] = Field(None, description='The array of comments')
    additional_data: Optional[AdditionalData32] = None


class NotesIdCommentsPostRequest(BaseModel):
    content: str = Field(
        ...,
        description='The content of the comment in HTML format. Subject to sanitization on the back-end.',
    )


class Data72(BaseModel):
    uuid: Optional[UUID] = Field(None, description='The ID of the note')
    active_flag: Optional[bool] = Field(
        None, description='Whether the note is active or deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    update_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    object_id: Optional[str] = Field(
        None,
        description='The ID of the object that the comment is attached to, will be the id of the note',
    )
    object_type: Optional[str] = Field(
        None,
        description='The type of object that the comment is attached to, will be "note"',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user who created the comment'
    )
    updater_id: Optional[int] = Field(
        None, description='The ID of the user who last updated the comment'
    )
    company_id: Optional[int] = Field(None, description='The ID of the company')


class NotesIdCommentsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data72] = None


class NotesIdCommentsCommentIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data72] = None


class NotesIdCommentsCommentIdPutRequest(BaseModel):
    content: str = Field(
        ...,
        description='The content of the comment in HTML format. Subject to sanitization on the back-end.',
    )


class NotesIdCommentsCommentIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data72] = None


class NotesIdCommentsCommentIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )


class FieldType7(Enum):
    address = 'address'
    date = 'date'
    daterange = 'daterange'
    double = 'double'
    enum = 'enum'
    monetary = 'monetary'
    org = 'org'
    people = 'people'
    phone = 'phone'
    set = 'set'
    text = 'text'
    time = 'time'
    timerange = 'timerange'
    user = 'user'
    varchar = 'varchar'
    varchar_auto = 'varchar_auto'
    visible_to = 'visible_to'


class Option(BaseModel):
    id: Optional[int] = None
    label: Optional[str] = None


class Datum31(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the field')
    key: Optional[str] = Field(None, description='The key of the field')
    name: Optional[str] = Field(None, description='The name of the field')
    field_type: Optional[FieldType7] = Field(
        None,
        description="The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field (has multiple subfields, autocompleted by Google Maps)</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>",
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    bulk_edit_allowed: Optional[bool] = Field(None, description='Not used')
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Option]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )


class AdditionalData33(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class NoteFieldsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum31]] = None
    additional_data: Optional[AdditionalData33] = Field(
        None, description='The additional data of the list'
    )


class Data75(BaseModel):
    id: Optional[List[float]] = Field(
        None, description='The IDs of the organizations that were deleted'
    )


class OrganizationsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data75] = None


class PictureId3(BaseModel):
    value: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Datum32(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the organization')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the organization'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    name: Optional[str] = Field(None, description='The name of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the organization is active or not'
    )
    picture_id: Optional[PictureId3] = None
    country_code: Optional[str] = Field(
        None, description='The country code of the organization'
    )
    first_char: Optional[str] = Field(
        None, description='The first character of the organization name'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the organization'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the organization'
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the organization'
    )
    label: Optional[int] = Field(
        None, description='The label assigned to the organization'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the organization owner'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the organization'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the organization'
    )
    people_count: Optional[int] = Field(
        None, description='The count of persons related to the organization'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the organization'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the organization'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the organization'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the organization'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the organization'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the organization'
    )
    address: Optional[str] = Field(
        None, description='The full address of the organization'
    )
    address_subpremise: Optional[str] = Field(
        None, description='The sub-premise of the organization location'
    )
    address_street_number: Optional[str] = Field(
        None, description='The street number of the organization location'
    )
    address_route: Optional[str] = Field(
        None, description='The route of the organization location'
    )
    address_sublocality: Optional[str] = Field(
        None, description='The sub-locality of the organization location'
    )
    address_locality: Optional[str] = Field(
        None, description='The locality of the organization location'
    )
    address_admin_area_level_1: Optional[str] = Field(
        None, description='The level 1 admin area of the organization location'
    )
    address_admin_area_level_2: Optional[str] = Field(
        None, description='The level 2 admin area of the organization location'
    )
    address_country: Optional[str] = Field(
        None, description='The country of the organization location'
    )
    address_postal_code: Optional[str] = Field(
        None, description='The postal code of the organization location'
    )
    address_formatted_address: Optional[str] = Field(
        None, description='The formatted organization location'
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class Pagination10(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='Whether there are more list items in the collection than displayed',
    )
    next_start: Optional[int] = Field(None, description='Next pagination start')


class AdditionalData34(BaseModel):
    pagination: Optional[Pagination10] = Field(
        None, description='Pagination details of the list'
    )


class ORGANIZATIONID12(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization18(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID12] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User18(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PICTUREID(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Picture(BaseModel):
    PICTURE_ID: Optional[PICTUREID] = Field(None, description='The ID of the picture')


class RelatedObjects14(BaseModel):
    organization: Optional[Organization18] = None
    user: Optional[User18] = None
    picture: Optional[Picture] = Field(
        None, description='The picture that is associated with the item'
    )


class OrganizationsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum32]] = Field(
        None, description='The array of organizations'
    )
    additional_data: Optional[AdditionalData34] = None
    related_objects: Optional[RelatedObjects14] = None


class OrganizationsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the organization')
    add_time: Optional[str] = Field(
        None,
        description='The optional creation date & time of the organization in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.',
    )
    label: Optional[int] = Field(None, description='The ID of the label.')
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the organization. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )


class PictureId4(BaseModel):
    value: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data76(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the organization')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the organization'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    name: Optional[str] = Field(None, description='The name of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the organization is active or not'
    )
    picture_id: Optional[PictureId4] = None
    country_code: Optional[str] = Field(
        None, description='The country code of the organization'
    )
    first_char: Optional[str] = Field(
        None, description='The first character of the organization name'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the organization'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the organization'
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the organization'
    )
    label: Optional[int] = Field(
        None, description='The label assigned to the organization'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the organization owner'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the organization'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the organization'
    )
    people_count: Optional[int] = Field(
        None, description='The count of persons related to the organization'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the organization'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the organization'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the organization'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the organization'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the organization'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the organization'
    )
    address: Optional[str] = Field(
        None, description='The full address of the organization'
    )
    address_subpremise: Optional[str] = Field(
        None, description='The sub-premise of the organization location'
    )
    address_street_number: Optional[str] = Field(
        None, description='The street number of the organization location'
    )
    address_route: Optional[str] = Field(
        None, description='The route of the organization location'
    )
    address_sublocality: Optional[str] = Field(
        None, description='The sub-locality of the organization location'
    )
    address_locality: Optional[str] = Field(
        None, description='The locality of the organization location'
    )
    address_admin_area_level_1: Optional[str] = Field(
        None, description='The level 1 admin area of the organization location'
    )
    address_admin_area_level_2: Optional[str] = Field(
        None, description='The level 2 admin area of the organization location'
    )
    address_country: Optional[str] = Field(
        None, description='The country of the organization location'
    )
    address_postal_code: Optional[str] = Field(
        None, description='The postal code of the organization location'
    )
    address_formatted_address: Optional[str] = Field(
        None, description='The formatted organization location'
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    edit_name: Optional[bool] = Field(
        None,
        description='If the company ID of the organization and company ID of the request is same or not',
    )


class Organization19(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID12] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User19(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PICTUREID1(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Picture1(BaseModel):
    PICTURE_ID: Optional[PICTUREID1] = Field(None, description='The ID of the picture')


class RelatedObjects15(BaseModel):
    organization: Optional[Organization19] = None
    user: Optional[User19] = None
    picture: Optional[Picture1] = Field(
        None, description='The picture that is associated with the item'
    )


class OrganizationsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data76] = Field(None, title='baseOrganizationItemWithEditNameFlag')
    related_objects: Optional[RelatedObjects15] = None


class Datum33(BaseModel):
    address: Optional[str] = Field(
        None, description='The full address of the organization'
    )
    address_subpremise: Optional[str] = Field(
        None, description='The sub-premise of the organization location'
    )
    address_street_number: Optional[str] = Field(
        None, description='The street number of the organization location'
    )
    address_route: Optional[str] = Field(
        None, description='The route of the organization location'
    )
    address_sublocality: Optional[str] = Field(
        None, description='The sub-locality of the organization location'
    )
    address_locality: Optional[str] = Field(
        None, description='The locality of the organization location'
    )
    address_admin_area_level_1: Optional[str] = Field(
        None, description='The level 1 admin area of the organization location'
    )
    address_admin_area_level_2: Optional[str] = Field(
        None, description='The level 2 admin area of the organization location'
    )
    address_country: Optional[str] = Field(
        None, description='The country of the organization location'
    )
    address_postal_code: Optional[str] = Field(
        None, description='The postal code of the organization location'
    )
    address_formatted_address: Optional[str] = Field(
        None, description='The formatted organization location'
    )
    id: Optional[int] = Field(None, description='The ID of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the organization is active or not'
    )
    owner_id: Optional[int] = Field(None, description='The ID of the owner')
    name: Optional[str] = Field(None, description='The name of the organization')
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the organization. Format: YYYY-MM-DD HH:MM:SS',
    )
    delete_time: Optional[str] = Field(
        None,
        description='The date and time this organization was deleted. Format: YYYY-MM-DD HH:MM:SS',
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the organization was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the organization'
    )
    label: Optional[int] = Field(
        None, description='The label assigned to the organization'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the organization'
    )


class AdditionalData35(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class OrganizationsCollectionGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum33]] = None
    additional_data: Optional[AdditionalData35] = Field(
        None, description='The additional data of the list'
    )


class OrganizationsCollectionGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Fields3(Enum):
    address = 'address'
    custom_fields = 'custom_fields'
    notes = 'notes'
    name = 'name'


class Owner2(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the owner of the deal')


class Item6(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the organization')
    type: Optional[str] = Field(None, description='The type of the item')
    name: Optional[str] = Field(None, description='The name of the organization')
    address: Optional[str] = Field(None, description='The address of the organization')
    visible_to: Optional[int] = Field(
        None, description='The visibility of the organization'
    )
    owner: Optional[Owner2] = None
    custom_fields: Optional[List[str]] = Field(None, description='Custom fields')
    notes: Optional[List[str]] = Field(None, description='An array of notes')


class Item5(BaseModel):
    result_score: Optional[float] = Field(None, description='Search result relevancy')
    item: Optional[Item6] = None


class Data77(BaseModel):
    items: Optional[List[Item5]] = Field(None, description='The array of found items')


class AdditionalData36(BaseModel):
    pagination: Optional[Pagination10] = Field(
        None, description='Pagination details of the list'
    )


class OrganizationsSearchGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data77] = None
    additional_data: Optional[AdditionalData36] = None


class Data78(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization that was deleted'
    )


class OrganizationsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data78] = None


class PictureId5(BaseModel):
    value: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data79(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the organization')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the organization'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    name: Optional[str] = Field(None, description='The name of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the organization is active or not'
    )
    picture_id: Optional[PictureId5] = None
    country_code: Optional[str] = Field(
        None, description='The country code of the organization'
    )
    first_char: Optional[str] = Field(
        None, description='The first character of the organization name'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the organization'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the organization'
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the organization'
    )
    label: Optional[int] = Field(
        None, description='The label assigned to the organization'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the organization owner'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the organization'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the organization'
    )
    people_count: Optional[int] = Field(
        None, description='The count of persons related to the organization'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the organization'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the organization'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the organization'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the organization'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the organization'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the organization'
    )
    address: Optional[str] = Field(
        None, description='The full address of the organization'
    )
    address_subpremise: Optional[str] = Field(
        None, description='The sub-premise of the organization location'
    )
    address_street_number: Optional[str] = Field(
        None, description='The street number of the organization location'
    )
    address_route: Optional[str] = Field(
        None, description='The route of the organization location'
    )
    address_sublocality: Optional[str] = Field(
        None, description='The sub-locality of the organization location'
    )
    address_locality: Optional[str] = Field(
        None, description='The locality of the organization location'
    )
    address_admin_area_level_1: Optional[str] = Field(
        None, description='The level 1 admin area of the organization location'
    )
    address_admin_area_level_2: Optional[str] = Field(
        None, description='The level 2 admin area of the organization location'
    )
    address_country: Optional[str] = Field(
        None, description='The country of the organization location'
    )
    address_postal_code: Optional[str] = Field(
        None, description='The postal code of the organization location'
    )
    address_formatted_address: Optional[str] = Field(
        None, description='The formatted organization location'
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    edit_name: Optional[bool] = Field(
        None,
        description='If the company ID of the organization and company ID of the request is same or not',
    )
    last_activity: Optional[Dict[str, Any]] = Field(
        None,
        description='Please refer to response schema of <a href="https://developers.pipedrive.com/docs/api/v1/Activities#getActivity">Activity</a>',
    )
    next_activity: Optional[Dict[str, Any]] = Field(
        None,
        description='Please refer to response schema of <a href="https://developers.pipedrive.com/docs/api/v1/Activities#getActivity">Activity</a>',
    )


class FOLLOWERUSERID(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the follower associated with the item'
    )
    name: Optional[str] = Field(None, description='The name of the follower')
    email: Optional[str] = Field(None, description='The email of the follower')
    user_id: Optional[int] = Field(None, description='The user ID of the follower')
    pic_hash: Optional[str] = Field(None, description='The follower picture hash')


class Followers(BaseModel):
    FOLLOWER_USER_ID: Optional[FOLLOWERUSERID] = Field(
        None, description='The user ID of the follower'
    )


class AdditionalData37(BaseModel):
    followers: Optional[Followers] = Field(
        None, description='The follower that is associated with the item'
    )
    dropbox_email: Optional[str] = Field(
        None, description='Dropbox email for the organization'
    )


class Organization20(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID12] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User20(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PICTUREID2(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Picture2(BaseModel):
    PICTURE_ID: Optional[PICTUREID2] = Field(None, description='The ID of the picture')


class RelatedObjects16(BaseModel):
    organization: Optional[Organization20] = None
    user: Optional[User20] = None
    picture: Optional[Picture2] = Field(
        None, description='The picture that is associated with the item'
    )


class OrganizationsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data79] = Field(None, title='organizationItem')
    additional_data: Optional[AdditionalData37] = None
    related_objects: Optional[RelatedObjects16] = None


class OrganizationsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the organization')
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.',
    )
    label: Optional[int] = Field(None, description='The ID of the label.')
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the organization. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )


class PictureId6(BaseModel):
    value: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data80(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the organization')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the organization'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    name: Optional[str] = Field(None, description='The name of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the organization is active or not'
    )
    picture_id: Optional[PictureId6] = None
    country_code: Optional[str] = Field(
        None, description='The country code of the organization'
    )
    first_char: Optional[str] = Field(
        None, description='The first character of the organization name'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the organization'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the organization'
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the organization'
    )
    label: Optional[int] = Field(
        None, description='The label assigned to the organization'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the organization owner'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the organization'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the organization'
    )
    people_count: Optional[int] = Field(
        None, description='The count of persons related to the organization'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the organization'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the organization'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the organization'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the organization'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the organization'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the organization'
    )
    address: Optional[str] = Field(
        None, description='The full address of the organization'
    )
    address_subpremise: Optional[str] = Field(
        None, description='The sub-premise of the organization location'
    )
    address_street_number: Optional[str] = Field(
        None, description='The street number of the organization location'
    )
    address_route: Optional[str] = Field(
        None, description='The route of the organization location'
    )
    address_sublocality: Optional[str] = Field(
        None, description='The sub-locality of the organization location'
    )
    address_locality: Optional[str] = Field(
        None, description='The locality of the organization location'
    )
    address_admin_area_level_1: Optional[str] = Field(
        None, description='The level 1 admin area of the organization location'
    )
    address_admin_area_level_2: Optional[str] = Field(
        None, description='The level 2 admin area of the organization location'
    )
    address_country: Optional[str] = Field(
        None, description='The country of the organization location'
    )
    address_postal_code: Optional[str] = Field(
        None, description='The postal code of the organization location'
    )
    address_formatted_address: Optional[str] = Field(
        None, description='The formatted organization location'
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class Organization21(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID12] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User21(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PICTUREID3(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Picture3(BaseModel):
    PICTURE_ID: Optional[PICTUREID3] = Field(None, description='The ID of the picture')


class RelatedObjects17(BaseModel):
    organization: Optional[Organization21] = None
    user: Optional[User21] = None
    picture: Optional[Picture3] = Field(
        None, description='The picture that is associated with the item'
    )


class OrganizationsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data80] = Field(None, title='baseOrganizationItem')
    related_objects: Optional[RelatedObjects17] = None


class Datum34(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.',
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    reference_type: Optional[str] = Field(
        None,
        description='If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.',
    )
    reference_id: Optional[int] = Field(
        None,
        description='Together with the `reference_type`, gives the ID of the other object',
    )
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    last_notification_time: Optional[str] = Field(
        None,
        description='The date and time of latest notifications sent about this activity to the participants or the attendees of this activity',
    )
    last_notification_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity',
    )
    notification_language_id: Optional[int] = Field(
        None, description='The ID of the language the notifications are sent in'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    gcal_event_id: Optional[str] = Field(
        None,
        description='For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_id: Optional[str] = Field(
        None,
        description='The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_etag: Optional[str] = Field(
        None,
        description='The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    calendar_sync_include_context: Optional[str] = Field(
        None,
        description='For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)',
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    rec_rule: Optional[str] = Field(
        None,
        description='The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"',
    )
    rec_rule_extension: Optional[str] = Field(
        None,
        description='Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.',
    )
    rec_master_activity_id: Optional[int] = Field(
        None,
        description='The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules',
    )
    series: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the activity'
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )
    org_name: Optional[str] = Field(
        None,
        description='The name of the organization this activity is associated with',
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person this activity is associated with'
    )
    deal_title: Optional[str] = Field(
        None, description='The name of the deal this activity is associated with'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the user this activity is owned by'
    )
    person_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the person'
    )
    deal_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the deal'
    )
    assigned_to_user_id: Optional[int] = Field(
        None,
        description='The ID of the user to whom the activity is assigned to. Equal to `user_id`.',
    )
    file: Optional[Dict[str, Any]] = Field(
        None,
        description='The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.',
    )


class ASSIGNEDTOUSERID1(BaseModel):
    activities: Optional[Activities] = Field(
        None,
        description='The count of activities related to the user grouped by activity type',
    )
    name: Optional[str] = Field(None, description='The name of the user')
    activity_count: Optional[int] = Field(
        None, description='The overall count of activities for the user'
    )
    share: Optional[int] = Field(
        None, description='The percentage of activities belongs to the user'
    )


class ActivityDistribution1(BaseModel):
    ASSIGNED_TO_USER_ID: Optional[ASSIGNEDTOUSERID1] = Field(
        None, description='The ID of the user'
    )


class AdditionalData38(BaseModel):
    activity_distribution: Optional[ActivityDistribution1] = Field(
        None,
        description='The distribution of activities related to the organization grouped by the user ID',
    )
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class OrganizationsIdActivitiesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum34]] = Field(None, description='The array of activities')
    additional_data: Optional[AdditionalData38] = Field(
        None, title='activityDistributionDataWithAdditionalData'
    )


class Datum35(BaseModel):
    field_key: Optional[str] = Field(
        None, description='The key of the field that was changed'
    )
    old_value: Optional[str] = Field(
        None, description='The value of the field before the change'
    )
    new_value: Optional[str] = Field(
        None, description='The value of the field after the change'
    )
    actor_user_id: Optional[int] = Field(
        None, description='The ID of the user who made the change'
    )
    time: Optional[str] = Field(None, description='The date and time of the change')
    change_source: Optional[str] = Field(
        None,
        description="The source of change, for example 'app', 'mobile', 'api', etc.",
    )
    change_source_user_agent: Optional[str] = Field(
        None, description='The user agent from which the change was made'
    )
    is_bulk_update_flag: Optional[bool] = Field(
        None, description='Whether the change was made as part of a bulk update'
    )


class AdditionalData39(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class OrganizationsIdChangelogGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum35]] = None
    additional_data: Optional[AdditionalData39] = Field(
        None, description='The additional data of the list'
    )


class Status8(Enum):
    open = 'open'
    won = 'won'
    lost = 'lost'
    deleted = 'deleted'
    all_not_deleted = 'all_not_deleted'


class OnlyPrimaryAssociation(Enum):
    number_0 = 0
    number_1 = 1


class EmailItem19(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='If this is the primary email or not'
    )


class PhoneItem19(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the deal'
    )
    primary: Optional[bool] = Field(
        None, description='If this is the primary phone number or not'
    )


class PersonId4(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    email: Optional[List[EmailItem19]] = Field(
        None, description='The emails of the person associated with the deal'
    )
    phone: Optional[List[PhoneItem19]] = Field(
        None, description='The phone numbers of the person associated with the deal'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the deal',
    )
    value: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )


class OrgId7(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the deal',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the deal',
    )
    address: Optional[str] = Field(
        None,
        description='The address of the organization that is associated with the deal',
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the deal'
    )
    value: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )


class Datum36(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[CreatorUserId] = Field(
        None, description='The creator of the deal'
    )
    user_id: Optional[UserId] = Field(None, title='dealUserDataWithId')
    person_id: Optional[PersonId4] = Field(None, title='dealPersonDataWithId')
    org_id: Optional[OrgId7] = Field(None, title='dealOrganizationDataWithId')
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class AdditionalData40(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class ORGANIZATIONID16(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization22(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID16] = Field(
        None, description='The ID of the organization associated with the item'
    )


class EmailItem20(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem20(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID12(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem20]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem20]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person18(BaseModel):
    PERSON_ID: Optional[PERSONID12] = Field(
        None, description='The ID of the person associated with the item'
    )


class User22(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Stage1(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the stage')
    order_nr: Optional[int] = Field(None, description='Defines the order of the stage')
    name: Optional[str] = Field(None, description='The name of the stage')
    active_flag: Optional[bool] = Field(
        None, description='Whether the stage is active or deleted'
    )
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when the deal weighted values are used.',
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline to add the stage to'
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )
    add_time: Optional[str] = Field(
        None, description='The stage creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The stage update time. Format: YYYY-MM-DD HH:MM:SS.'
    )


class Pipeline(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the pipeline')
    name: Optional[str] = Field(None, description='The name of the pipeline')
    url_title: Optional[str] = Field(
        None, description='The pipeline title displayed in the URL'
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )
    deal_probability: Optional[bool] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    add_time: Optional[str] = Field(
        None, description='The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The pipeline update time. Format: YYYY-MM-DD HH:MM:SS.'
    )


class RelatedObjects18(BaseModel):
    organization: Optional[Organization22] = None
    person: Optional[Person18] = None
    user: Optional[User22] = None
    stage: Optional[Stage1] = None
    pipeline: Optional[Pipeline] = None


class OrganizationsIdDealsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum36]] = Field(None, description='The array of deals')
    additional_data: Optional[AdditionalData40] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects18] = None


class Datum37(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    user_id: Optional[int] = Field(
        None, description='The ID of the user to associate the file with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate the file with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate the file with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate the file with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate the file with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate the file with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate the file with'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file')
    active_flag: Optional[bool] = Field(
        None,
        description='Whether the user is active or not. false = Not activated, true = Activated',
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    cid: Optional[str] = Field(None, description='The ID of the inline attachment')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    mail_message_id: Optional[str] = Field(
        None, description='The ID of the mail message to associate the file with'
    )
    mail_template_id: Optional[str] = Field(
        None, description='The ID of the mail template to associate the file with'
    )
    deal_name: Optional[str] = Field(
        None, description='The name of the deal associated with the dile'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the file'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the file'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    lead_name: Optional[str] = Field(
        None, description='The name of the lead associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL of the download file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class OrganizationsIdFilesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum37]] = Field(None, description='The array of files')
    additional_data: Optional[AdditionalData40] = Field(
        None, description='The additional data of the list'
    )


class Datum38(BaseModel):
    object: Optional[str] = Field(
        None,
        description='The type of the person update. (Possible object types - organizationChange, dealChange, file, activity)',
    )
    timestamp: Optional[str] = Field(
        None, description='The creation date and time of the update'
    )
    data: Optional[Dict[str, Any]] = Field(
        None, description='The data related to the update'
    )


class ORGANIZATIONID17(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization23(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID17] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User23(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects19(BaseModel):
    organization: Optional[Organization23] = None
    user: Optional[User23] = None


class OrganizationsIdFlowGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum38]] = None
    additional_data: Optional[AdditionalData40] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects19] = None


class Datum39(BaseModel):
    org_id: Optional[int] = Field(None, description='The ID of the organization')
    user_id: Optional[int] = Field(
        None, description='The user ID of the follower related to the item'
    )
    id: Optional[int] = Field(None, description='The ID of the follower')
    add_time: Optional[datetime] = Field(
        None, description='The date and time of adding the follower to the item'
    )


class AdditionalData43(BaseModel):
    pagination: Optional[Pagination10] = Field(
        None, description='Pagination details of the list'
    )


class OrganizationsIdFollowersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum39]] = Field(None, description='The array of followers')
    additional_data: Optional[AdditionalData43] = None


class OrganizationsIdFollowersPostRequest(BaseModel):
    user_id: int = Field(..., description='The ID of the user')


class Data81(BaseModel):
    org_id: Optional[int] = Field(None, description='The ID of the organization')
    user_id: Optional[int] = Field(
        None, description='The user ID of the follower related to the item'
    )
    id: Optional[int] = Field(None, description='The ID of the follower')
    add_time: Optional[datetime] = Field(
        None, description='The date and time of adding the follower to the item'
    )


class OrganizationsIdFollowersPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data81] = None


class Data82(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The ID of the follower that was deleted from the organization',
    )


class OrganizationsIdFollowersFollowerIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data82] = None


class FromItem6(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class ToItem6(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class CcItem3(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class BccItem3(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail participant')
    email_address: Optional[str] = Field(
        None, description='Mail address of the mail participant'
    )
    name: Optional[str] = Field(None, description='Name of the mail participant')
    linked_person_id: Optional[int] = Field(
        None, description='ID of the linked person to the mail message'
    )
    linked_person_name: Optional[str] = Field(
        None, description='Name of the linked person to the mail message'
    )
    mail_message_party_id: Optional[int] = Field(
        None, description='ID of the mail message participant'
    )


class Data83(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail message.')
    from_: Optional[List[FromItem6]] = Field(
        None, alias='from', description='The array of mail message sender (object)'
    )
    to: Optional[List[ToItem6]] = Field(
        None, description='The array of mail message receiver (object)'
    )
    cc: Optional[List[CcItem3]] = Field(
        None, description='The array of mail message copies (object)'
    )
    bcc: Optional[List[BccItem3]] = Field(
        None, description='The array of mail message blind copies (object)'
    )
    body_url: Optional[str] = Field(None, description='The mail message body URL')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    mail_thread_id: Optional[int] = Field(
        None, description='ID of the mail message thread'
    )
    subject: Optional[str] = Field(None, description='The subject of mail message')
    snippet: Optional[str] = Field(
        None,
        description='The snippet of mail message. Snippet length is up to 225 characters.',
    )
    mail_tracking_status: Optional[MailTrackingStatus] = Field(
        None,
        description='The status of tracking mail message. Value is `null` if tracking is not enabled.',
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking in mail message body is enabled.'
    )
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail message is read or not by the user'
    )
    draft: Optional[str] = Field(
        None,
        description='If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.',
    )
    draft_flag: Optional[DraftFlag] = Field(
        None, description='Whether the mail message is a draft or not'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail message is synced with the provider or not'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail message is deleted or not'
    )
    has_body_flag: Optional[HasBodyFlag] = Field(
        None, description='Whether the mail message has a body or not'
    )
    sent_flag: Optional[SentFlag] = Field(
        None, description='Whether the mail message has been sent or not'
    )
    sent_from_pipedrive_flag: Optional[SentFromPipedriveFlag] = Field(
        None,
        description='Whether the mail message has been sent from Pipedrive app or not',
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None,
        description='Whether the mail message has been created by Smart Email BCC feature or not',
    )
    message_time: Optional[datetime] = Field(
        None, description='Creation or receival time of the mail message'
    )
    add_time: Optional[datetime] = Field(
        None, description='The insertion into the database time of the mail message'
    )
    update_time: Optional[datetime] = Field(
        None, description='The updating time in the database of the mail message'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail message has an attachment or not'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail message has an inline attachment or not'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail message has an attachment (which is not inline) or not',
    )
    nylas_id: Optional[str] = Field(
        None, description='The Mail Message ID assigned by the sync provider'
    )
    s3_bucket: Optional[str] = Field(None, description='The name of the S3 bucket')
    s3_bucket_path: Optional[str] = Field(None, description='The path of the S3 bucket')
    external_deleted_flag: Optional[bool] = Field(
        None,
        description='If the Mail Message has been deleted on the provider side or not',
    )
    mua_message_id: Optional[str] = Field(
        None, description='The Mail Message ID assigned by the mail user agent'
    )
    template_id: Optional[int] = Field(None, description='The ID of the mail template')
    timestamp: Optional[str] = Field(
        None, description='The add date and time of the Mail Message'
    )
    item_type: Optional[str] = Field(None, description='The type of the data item')
    company_id: Optional[int] = Field(None, description='The ID of the company')


class Datum40(BaseModel):
    object: Optional[str] = Field(None, description='The type of the data item')
    timestamp: Optional[str] = Field(
        None, description='The date and time when the item was created'
    )
    data: Optional[Data83] = Field(None, title='mailMessageItemForList')


class AdditionalData44(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class OrganizationsIdMailMessagesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum40]] = Field(
        None, description='The array of mail messages'
    )
    additional_data: Optional[AdditionalData44] = Field(
        None, description='The additional data of the list'
    )


class OrganizationsIdMergePutRequest(BaseModel):
    merge_with_id: int = Field(
        ...,
        description='The ID of the organization that the organization will be merged with',
    )


class Data84(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the merged organization')


class OrganizationsIdMergePutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data84] = None


class OrganizationsIdPermittedUsersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[float]] = Field(
        None, description='The list of permitted user IDs'
    )


class PhoneItem21(BaseModel):
    value: Optional[str] = Field(None, description='The phone number')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if phone number is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)',
    )


class EmailItem21(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId7(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class OrgId8(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )
    value: Optional[int] = Field(None, description='The ID of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )


class Datum41(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem21]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId7] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId8] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class ORGANIZATIONID18(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization24(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID18] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User24(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects20(BaseModel):
    organization: Optional[Organization24] = None
    user: Optional[User24] = None


class OrganizationsIdPersonsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum41]] = Field(None, description='The array of persons')
    additional_data: Optional[AdditionalData44] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects20] = None


class FieldType8(BaseModel):
    pass


class Datum42(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType8] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class OrganizationFieldsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum42]] = None
    additional_data: Optional[AdditionalData44] = Field(
        None, description='The additional data of the list'
    )


class FieldType9(Enum):
    address = 'address'
    date = 'date'
    daterange = 'daterange'
    double = 'double'
    enum = 'enum'
    monetary = 'monetary'
    org = 'org'
    people = 'people'
    phone = 'phone'
    set = 'set'
    text = 'text'
    time = 'time'
    timerange = 'timerange'
    user = 'user'
    varchar = 'varchar'
    varchar_auto = 'varchar_auto'
    visible_to = 'visible_to'


class OrganizationFieldsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. Example: `[{"label":"New Item"}]`',
    )
    add_visible_flag: Optional[bool] = Field(
        True,
        description="Whether the field is available in the 'add new' modal or not (both in the web and mobile app)",
    )
    field_type: FieldType9 = Field(
        ...,
        description="The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field (has multiple subfields, autocompleted by Google Maps)</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>",
    )


class FieldType10(BaseModel):
    pass


class Data85(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType10] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class OrganizationFieldsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data85] = None


class Data86(BaseModel):
    id: Optional[List[int]] = Field(None, description='The list of deleted field IDs')


class OrganizationFieldsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data86] = None


class Data87(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType10] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class OrganizationFieldsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data87] = None


class Data88(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the field that was deleted')


class OrganizationFieldsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data88] = None


class OrganizationFieldsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. All active items must be supplied and already existing items must have their ID supplied. New items only require a label. Example: `[{"id":123,"label":"Existing Item"},{"label":"New Item"}]`',
    )
    add_visible_flag: Optional[bool] = Field(
        True,
        description="Whether the field is available in 'add new' modal or not (both in web and mobile app)",
    )


class Data89(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType10] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class OrganizationFieldsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data89] = None


class RelOwnerOrgId(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )
    value: Optional[int] = Field(None, description='The ID of the organization')


class RelLinkedOrgId(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )
    value: Optional[int] = Field(None, description='The ID of the organization')


class Datum43(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization relationship'
    )
    type: Optional[str] = Field(None, description='The type of the relationship')
    rel_owner_org_id: Optional[RelOwnerOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    rel_linked_org_id: Optional[RelLinkedOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the relationship'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the relationship'
    )
    active_flag: Optional[str] = Field(
        None, description='Whether the relationship is active or not'
    )
    calculated_type: Optional[str] = Field(
        None,
        description='The calculated type of the relationship with the linked organization',
    )
    calculated_related_org_id: Optional[int] = Field(
        None, description='The ID of the linked organization'
    )
    related_organization_name: Optional[str] = Field(
        None, description='The name of the linked organization'
    )


class ORGANIZATIONID19(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization25(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID19] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects21(BaseModel):
    organization: Optional[Organization25] = None


class OrganizationRelationshipsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum43]] = Field(
        None, description='The array of organization relationships'
    )
    additional_data: Optional[AdditionalData44] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects21] = None


class Type8(Enum):
    parent = 'parent'
    related = 'related'


class OrganizationRelationshipsPostRequest(BaseModel):
    org_id: Optional[int] = Field(
        None,
        description='The ID of the base organization for the returned calculated values',
    )
    type: Type8 = Field(..., description='The type of organization relationship')
    rel_owner_org_id: int = Field(
        ...,
        description='The owner of the relationship. If type is `parent`, then the owner is the parent and the linked organization is the daughter.',
    )
    rel_linked_org_id: int = Field(
        ...,
        description='The linked organization in the relationship. If type is `parent`, then the linked organization is the daughter.',
    )


class Data90(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization relationship'
    )
    type: Optional[str] = Field(None, description='The type of the relationship')
    rel_owner_org_id: Optional[RelOwnerOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    rel_linked_org_id: Optional[RelLinkedOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the relationship'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the relationship'
    )
    active_flag: Optional[str] = Field(
        None, description='Whether the relationship is active or not'
    )


class Organization26(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID19] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects22(BaseModel):
    organization: Optional[Organization26] = None


class OrganizationRelationshipsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data90] = None
    related_objects: Optional[RelatedObjects22] = None


class Data91(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the deleted organization relationship'
    )


class OrganizationRelationshipsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data91] = None


class Data92(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization relationship'
    )
    type: Optional[str] = Field(None, description='The type of the relationship')
    rel_owner_org_id: Optional[RelOwnerOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    rel_linked_org_id: Optional[RelLinkedOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the relationship'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the relationship'
    )
    active_flag: Optional[str] = Field(
        None, description='Whether the relationship is active or not'
    )
    calculated_type: Optional[str] = Field(
        None,
        description='The calculated type of the relationship with the linked organization',
    )
    calculated_related_org_id: Optional[int] = Field(
        None, description='The ID of the linked organization'
    )


class Organization27(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID19] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects23(BaseModel):
    organization: Optional[Organization27] = None


class OrganizationRelationshipsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data92] = Field(
        None, title='organizationRelationshipWithCalculatedFields'
    )
    related_objects: Optional[RelatedObjects23] = None


class OrganizationRelationshipsIdPutRequest(BaseModel):
    org_id: Optional[int] = Field(
        None,
        description='The ID of the base organization for the returned calculated values',
    )
    type: Optional[Type8] = Field(
        None, description='The type of organization relationship'
    )
    rel_owner_org_id: Optional[int] = Field(
        None,
        description='The owner of this relationship. If type is `parent`, then the owner is the parent and the linked organization is the daughter.',
    )
    rel_linked_org_id: Optional[int] = Field(
        None,
        description='The linked organization in this relationship. If type is `parent`, then the linked organization is the daughter.',
    )


class Data93(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization relationship'
    )
    type: Optional[str] = Field(None, description='The type of the relationship')
    rel_owner_org_id: Optional[RelOwnerOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    rel_linked_org_id: Optional[RelLinkedOrgId] = Field(
        None, title='relationshipOrganizationInfoItem'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the relationship'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the relationship'
    )
    active_flag: Optional[str] = Field(
        None, description='Whether the relationship is active or not'
    )


class Organization28(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID19] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects24(BaseModel):
    organization: Optional[Organization28] = None


class OrganizationRelationshipsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data93] = None
    related_objects: Optional[RelatedObjects24] = None


class App(Enum):
    sales = 'sales'
    projects = 'projects'
    campaigns = 'campaigns'
    global_ = 'global'
    account_settings = 'account_settings'


class Type10(Enum):
    admin = 'admin'
    manager = 'manager'
    regular = 'regular'
    custom = 'custom'


class Datum44(BaseModel):
    id: Optional[str] = Field(None, description='The ID of user permission set')
    name: Optional[str] = Field(None, description='The name of the permission set')
    description: Optional[str] = Field(
        None, description='The description of the permission set'
    )
    app: Optional[App] = Field(
        None, description='The app that permission set belongs to'
    )
    type: Optional[Type10] = Field(None, description='The type of permission set')
    assignment_count: Optional[int] = Field(
        None, description='The number of users assigned to this permission set'
    )


class PermissionSetsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum44]] = Field(
        None, description='The array of permission set'
    )


class PermissionSetsIdGetResponse(BaseModel):
    id: Optional[str] = Field(None, description='The ID of user permission set')
    name: Optional[str] = Field(None, description='The name of the permission set')
    description: Optional[str] = Field(
        None, description='The description of the permission set'
    )
    app: Optional[App] = Field(
        None, description='The app that permission set belongs to'
    )
    type: Optional[Type10] = Field(None, description='The type of permission set')
    assignment_count: Optional[int] = Field(
        None, description='The number of users assigned to this permission set'
    )
    contents: Optional[List[str]] = Field(
        None, description='A permission assigned to this permission set'
    )


class Datum45(BaseModel):
    user_id: Optional[int] = Field(
        None, description='The ID of the user in the permission set'
    )
    permission_set_id: Optional[str] = Field(
        None, description='The ID of the permission set'
    )
    name: Optional[str] = Field(None, description='The name of the permission set')


class PermissionSetsIdAssignmentsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum45]] = Field(
        None, description='An array of the assignments of the user'
    )


class Data94(BaseModel):
    id: Optional[List[int]] = Field(None, description='The list of deleted persons IDs')


class PersonsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data94] = None


class PictureId8(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Datum46(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem21]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId8] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId8] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class AdditionalData48(BaseModel):
    pagination: Optional[Pagination10] = Field(
        None, description='Pagination details of the list'
    )


class Organization29(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID19] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User25(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PICTUREID4(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Picture4(BaseModel):
    PICTURE_ID: Optional[PICTUREID4] = Field(None, description='The ID of the picture')


class RelatedObjects25(BaseModel):
    organization: Optional[Organization29] = None
    user: Optional[User25] = None
    picture: Optional[Picture4] = Field(
        None, description='The picture that is associated with the item'
    )


class PersonsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum46]] = Field(None, description='The array of persons')
    additional_data: Optional[AdditionalData48] = None
    related_objects: Optional[RelatedObjects25] = None


class EmailItem23(BaseModel):
    value: Optional[str] = Field(None, description='The email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class MarketingStatus(BaseModel):
    pass


class PersonsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the person')
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.',
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this person will belong to'
    )
    email: Optional[List[EmailItem23]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" }]`. Please note that only `value` is required.',
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    label: Optional[int] = Field(None, description='The ID of the label.')
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the person. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )
    marketing_status: Optional[MarketingStatus] = Field(
        None,
        description='If the person does not have a valid email address, then the marketing status is **not set** and `no_consent` is returned for the `marketing_status` value when the new person is created. If the change is forbidden, the status will remain unchanged for every call that tries to modify the marketing status. Please be aware that it is only allowed **once** to change the marketing status from an old status to a new one.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`no_consent`</td><td>The customer has not given consent to receive any marketing communications</td></tr><tr><td>`unsubscribed`</td><td>The customers have unsubscribed from ALL marketing communications</td></tr><tr><td>`subscribed`</td><td>The customers are subscribed and are counted towards marketing caps</td></tr><tr><td>`archived`</td><td>The customers with `subscribed` status can be moved to `archived` to save consent, but they are not paid for</td></tr></table>',
    )
    add_time: Optional[str] = Field(
        None,
        description='The optional creation date & time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS',
    )


class EmailItem24(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId9(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data95(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem24]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId9] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId8] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class User26(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects26(BaseModel):
    user: Optional[User26] = None


class PersonsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data95] = Field(None, title='personItem')
    related_objects: Optional[RelatedObjects26] = None


class EmailItem25(BaseModel):
    value: Optional[str] = Field(None, description='The email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class Datum47(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    owner_id: Optional[int] = Field(
        None, description='The ID of the owner related to the person'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization related to the person'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    email: Optional[List[EmailItem25]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" }]`. Please note that only `value` is required.',
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    delete_time: Optional[str] = Field(
        None,
        description='The date and time this person was deleted. Format: YYYY-MM-DD HH:MM:SS',
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    label: Optional[int] = Field(None, description='The label assigned to the person')
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )


class AdditionalData49(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class PersonsCollectionGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum47]] = None
    additional_data: Optional[AdditionalData49] = Field(
        None, description='The additional data of the list'
    )


class PersonsCollectionGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Fields4(Enum):
    custom_fields = 'custom_fields'
    email = 'email'
    notes = 'notes'
    phone = 'phone'
    name = 'name'


class IncludeFields3(Enum):
    person_picture = 'person.picture'


class Owner3(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the owner of the person')


class Organization30(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization the person is associated with'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization the person is associated with'
    )


class Item8(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    type: Optional[str] = Field(None, description='The type of the item')
    name: Optional[str] = Field(None, description='The name of the person')
    phones: Optional[List[str]] = Field(None, description='An array of phone numbers')
    emails: Optional[List[str]] = Field(None, description='An array of email addresses')
    visible_to: Optional[int] = Field(None, description='The visibility of the person')
    owner: Optional[Owner3] = None
    organization: Optional[Organization30] = None
    custom_fields: Optional[List[str]] = Field(None, description='Custom fields')
    notes: Optional[List[str]] = Field(None, description='An array of notes')


class Item7(BaseModel):
    result_score: Optional[float] = Field(None, description='Search result relevancy')
    item: Optional[Item8] = None


class Data96(BaseModel):
    items: Optional[List[Item7]] = Field(None, description='The array of found items')


class AdditionalData50(BaseModel):
    pagination: Optional[Pagination10] = Field(
        None, description='Pagination details of the list'
    )


class PersonsSearchGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data96] = None
    additional_data: Optional[AdditionalData50] = None


class Data97(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deleted person')


class PersonsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data97] = None


class EmailItem26(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId10(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data98(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem26]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId10] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId8] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class AdditionalData51(BaseModel):
    dropbox_email: Optional[str] = Field(
        None, description='Dropbox email for the person'
    )


class Organization31(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID19] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User27(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PICTUREID5(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Picture5(BaseModel):
    PICTURE_ID: Optional[PICTUREID5] = Field(None, description='The ID of the picture')


class RelatedObjects27(BaseModel):
    organization: Optional[Organization31] = None
    user: Optional[User27] = None
    picture: Optional[Picture5] = Field(
        None, description='The picture that is associated with the item'
    )


class PersonsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data98] = Field(None, title='personItem')
    additional_data: Optional[AdditionalData51] = None
    related_objects: Optional[RelatedObjects27] = None


class EmailItem27(BaseModel):
    value: Optional[str] = Field(None, description='The email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PersonsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the person')
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.',
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this person will belong to'
    )
    email: Optional[List[EmailItem27]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" }]`. Please note that only `value` is required.',
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    label: Optional[int] = Field(None, description='The ID of the label.')
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the person. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )
    marketing_status: Optional[MarketingStatus] = Field(
        None,
        description='If the person does not have a valid email address, then the marketing status is **not set** and `no_consent` is returned for the `marketing_status` value when the new person is created. If the change is forbidden, the status will remain unchanged for every call that tries to modify the marketing status. Please be aware that it is only allowed **once** to change the marketing status from an old status to a new one.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`no_consent`</td><td>The customer has not given consent to receive any marketing communications</td></tr><tr><td>`unsubscribed`</td><td>The customers have unsubscribed from ALL marketing communications</td></tr><tr><td>`subscribed`</td><td>The customers are subscribed and are counted towards marketing caps</td></tr><tr><td>`archived`</td><td>The customers with `subscribed` status can be moved to `archived` to save consent, but they are not paid for</td></tr></table>',
    )
    add_time: Optional[str] = Field(
        None,
        description='The optional creation date & time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS',
    )


class EmailItem28(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId11(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data99(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem21]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem28]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId11] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    org_id: Optional[OrgId8] = Field(
        None, title='relationshipOrganizationInfoItemWithActiveFlag'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class User28(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects28(BaseModel):
    user: Optional[User28] = None


class PersonsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data99] = Field(None, title='personItem')
    related_objects: Optional[RelatedObjects28] = None


class Datum48(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.',
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    reference_type: Optional[str] = Field(
        None,
        description='If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.',
    )
    reference_id: Optional[int] = Field(
        None,
        description='Together with the `reference_type`, gives the ID of the other object',
    )
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    last_notification_time: Optional[str] = Field(
        None,
        description='The date and time of latest notifications sent about this activity to the participants or the attendees of this activity',
    )
    last_notification_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity',
    )
    notification_language_id: Optional[int] = Field(
        None, description='The ID of the language the notifications are sent in'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    gcal_event_id: Optional[str] = Field(
        None,
        description='For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_id: Optional[str] = Field(
        None,
        description='The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_etag: Optional[str] = Field(
        None,
        description='The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    calendar_sync_include_context: Optional[str] = Field(
        None,
        description='For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)',
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    rec_rule: Optional[str] = Field(
        None,
        description='The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"',
    )
    rec_rule_extension: Optional[str] = Field(
        None,
        description='Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.',
    )
    rec_master_activity_id: Optional[int] = Field(
        None,
        description='The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules',
    )
    series: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the activity'
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )
    org_name: Optional[str] = Field(
        None,
        description='The name of the organization this activity is associated with',
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person this activity is associated with'
    )
    deal_title: Optional[str] = Field(
        None, description='The name of the deal this activity is associated with'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the user this activity is owned by'
    )
    person_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the person'
    )
    deal_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the deal'
    )
    assigned_to_user_id: Optional[int] = Field(
        None,
        description='The ID of the user to whom the activity is assigned to. Equal to `user_id`.',
    )
    file: Optional[Dict[str, Any]] = Field(
        None,
        description='The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.',
    )


class ASSIGNEDTOUSERID2(BaseModel):
    activities: Optional[Activities] = Field(
        None,
        description='The count of activities related to the user grouped by activity type',
    )
    name: Optional[str] = Field(None, description='The name of the user')
    activity_count: Optional[int] = Field(
        None, description='The overall count of activities for the user'
    )
    share: Optional[int] = Field(
        None, description='The percentage of activities belongs to the user'
    )


class ActivityDistribution2(BaseModel):
    ASSIGNED_TO_USER_ID: Optional[ASSIGNEDTOUSERID2] = Field(
        None, description='The ID of the user'
    )


class AdditionalData52(BaseModel):
    activity_distribution: Optional[ActivityDistribution2] = Field(
        None,
        description='The distribution of activities related to the organization grouped by the user ID',
    )
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class PersonsIdActivitiesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum48]] = Field(None, description='The array of activities')
    additional_data: Optional[AdditionalData52] = Field(
        None, title='activityDistributionDataWithAdditionalData'
    )


class Datum49(BaseModel):
    field_key: Optional[str] = Field(
        None, description='The key of the field that was changed'
    )
    old_value: Optional[str] = Field(
        None, description='The value of the field before the change'
    )
    new_value: Optional[str] = Field(
        None, description='The value of the field after the change'
    )
    actor_user_id: Optional[int] = Field(
        None, description='The ID of the user who made the change'
    )
    time: Optional[str] = Field(None, description='The date and time of the change')
    change_source: Optional[str] = Field(
        None,
        description="The source of change, for example 'app', 'mobile', 'api', etc.",
    )
    change_source_user_agent: Optional[str] = Field(
        None, description='The user agent from which the change was made'
    )
    is_bulk_update_flag: Optional[bool] = Field(
        None, description='Whether the change was made as part of a bulk update'
    )


class AdditionalData53(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class PersonsIdChangelogGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum49]] = None
    additional_data: Optional[AdditionalData53] = Field(
        None, description='The additional data of the list'
    )


class EmailItem29(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='If this is the primary email or not'
    )


class PhoneItem29(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the deal'
    )
    primary: Optional[bool] = Field(
        None, description='If this is the primary phone number or not'
    )


class PersonId5(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    email: Optional[List[EmailItem29]] = Field(
        None, description='The emails of the person associated with the deal'
    )
    phone: Optional[List[PhoneItem29]] = Field(
        None, description='The phone numbers of the person associated with the deal'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the deal',
    )
    value: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )


class OrgId13(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the deal',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the deal',
    )
    address: Optional[str] = Field(
        None,
        description='The address of the organization that is associated with the deal',
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the deal'
    )
    value: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )


class Datum50(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[CreatorUserId] = Field(
        None, description='The creator of the deal'
    )
    user_id: Optional[UserId] = Field(None, title='dealUserDataWithId')
    person_id: Optional[PersonId5] = Field(None, title='dealPersonDataWithId')
    org_id: Optional[OrgId13] = Field(None, title='dealOrganizationDataWithId')
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class AdditionalData54(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class ORGANIZATIONID25(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization32(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID25] = Field(
        None, description='The ID of the organization associated with the item'
    )


class EmailItem30(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem30(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID13(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem30]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem30]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person19(BaseModel):
    PERSON_ID: Optional[PERSONID13] = Field(
        None, description='The ID of the person associated with the item'
    )


class User29(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects29(BaseModel):
    organization: Optional[Organization32] = None
    person: Optional[Person19] = None
    user: Optional[User29] = None
    stage: Optional[Stage1] = None
    pipeline: Optional[Pipeline] = None


class PersonsIdDealsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum50]] = Field(None, description='The array of deals')
    additional_data: Optional[AdditionalData54] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects29] = None


class Datum51(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    user_id: Optional[int] = Field(
        None, description='The ID of the user to associate the file with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate the file with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate the file with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate the file with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate the file with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate the file with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate the file with'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file')
    active_flag: Optional[bool] = Field(
        None,
        description='Whether the user is active or not. false = Not activated, true = Activated',
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    cid: Optional[str] = Field(None, description='The ID of the inline attachment')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    mail_message_id: Optional[str] = Field(
        None, description='The ID of the mail message to associate the file with'
    )
    mail_template_id: Optional[str] = Field(
        None, description='The ID of the mail template to associate the file with'
    )
    deal_name: Optional[str] = Field(
        None, description='The name of the deal associated with the dile'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the file'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the file'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    lead_name: Optional[str] = Field(
        None, description='The name of the lead associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL of the download file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class PersonsIdFilesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum51]] = Field(None, description='The array of files')
    additional_data: Optional[AdditionalData54] = Field(
        None, description='The additional data of the list'
    )


class Datum52(BaseModel):
    object: Optional[str] = Field(
        None,
        description='The type of the person update. (Possible object types - personChange, note, activity, file)',
    )
    timestamp: Optional[str] = Field(
        None, description='The creation date and time of the update'
    )
    data: Optional[Dict[str, Any]] = Field(
        None, description='The data related to the update'
    )


class Deal11(BaseModel):
    DEAL_ID: Optional[DEALID] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class ORGANIZATIONID26(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization33(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID26] = Field(
        None, description='The ID of the organization associated with the item'
    )


class User30(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class PERSONID14(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem30]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem30]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person20(BaseModel):
    PERSON_ID: Optional[PERSONID14] = Field(
        None, description='The ID of the person associated with the item'
    )


class RelatedObjects30(BaseModel):
    deal: Optional[Deal11] = None
    organization: Optional[Organization33] = None
    user: Optional[User30] = None
    person: Optional[Person20] = None


class PersonsIdFlowGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum52]] = None
    additional_data: Optional[AdditionalData54] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects30] = None


class Datum53(BaseModel):
    user_id: Optional[int] = Field(None, description='The ID of the user')
    id: Optional[int] = Field(None, description='The ID of the user follower')
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal which the follower was added to'
    )
    add_time: Optional[str] = Field(
        None, description='The date and time when the follower was added to the person'
    )


class PersonsIdFollowersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum53]] = Field(None, description='The list of followers')
    additional_data: Optional[AdditionalData54] = Field(
        None, description='The additional data of the list'
    )


class PersonsIdFollowersPostRequest(BaseModel):
    user_id: int = Field(..., description='The ID of the user')


class Data100(BaseModel):
    user_id: Optional[int] = Field(
        None, description='The ID of the user who was added as a follower to a person'
    )
    id: Optional[int] = Field(None, description='The ID of the follower')
    person_id: Optional[int] = Field(
        None, description='The ID of the person to whom the follower was added'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the follower was added to a person. Format: YYYY-MM-DD HH:MM:SS',
    )


class PersonsIdFollowersPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data100] = None


class Data101(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deleted person')


class PersonsIdFollowersFollowerIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data101] = None


class Data102(BaseModel):
    id: Optional[int] = Field(None, description='ID of the mail message.')
    from_: Optional[List[FromItem6]] = Field(
        None, alias='from', description='The array of mail message sender (object)'
    )
    to: Optional[List[ToItem6]] = Field(
        None, description='The array of mail message receiver (object)'
    )
    cc: Optional[List[CcItem3]] = Field(
        None, description='The array of mail message copies (object)'
    )
    bcc: Optional[List[BccItem3]] = Field(
        None, description='The array of mail message blind copies (object)'
    )
    body_url: Optional[str] = Field(None, description='The mail message body URL')
    account_id: Optional[str] = Field(None, description='The connection account ID')
    user_id: Optional[int] = Field(
        None, description='ID of the user whom mail message will be assigned to'
    )
    mail_thread_id: Optional[int] = Field(
        None, description='ID of the mail message thread'
    )
    subject: Optional[str] = Field(None, description='The subject of mail message')
    snippet: Optional[str] = Field(
        None,
        description='The snippet of mail message. Snippet length is up to 225 characters.',
    )
    mail_tracking_status: Optional[MailTrackingStatus] = Field(
        None,
        description='The status of tracking mail message. Value is `null` if tracking is not enabled.',
    )
    mail_link_tracking_enabled_flag: Optional[MailLinkTrackingEnabledFlag] = Field(
        None, description='Whether the link tracking in mail message body is enabled.'
    )
    read_flag: Optional[ReadFlag] = Field(
        None, description='Whether the mail message is read or not by the user'
    )
    draft: Optional[str] = Field(
        None,
        description='If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.',
    )
    draft_flag: Optional[DraftFlag] = Field(
        None, description='Whether the mail message is a draft or not'
    )
    synced_flag: Optional[SyncedFlag] = Field(
        None, description='Whether the mail message is synced with the provider or not'
    )
    deleted_flag: Optional[DeletedFlag] = Field(
        None, description='Whether the mail message is deleted or not'
    )
    has_body_flag: Optional[HasBodyFlag] = Field(
        None, description='Whether the mail message has a body or not'
    )
    sent_flag: Optional[SentFlag] = Field(
        None, description='Whether the mail message has been sent or not'
    )
    sent_from_pipedrive_flag: Optional[SentFromPipedriveFlag] = Field(
        None,
        description='Whether the mail message has been sent from Pipedrive app or not',
    )
    smart_bcc_flag: Optional[SmartBccFlag] = Field(
        None,
        description='Whether the mail message has been created by Smart Email BCC feature or not',
    )
    message_time: Optional[datetime] = Field(
        None, description='Creation or receival time of the mail message'
    )
    add_time: Optional[datetime] = Field(
        None, description='The insertion into the database time of the mail message'
    )
    update_time: Optional[datetime] = Field(
        None, description='The updating time in the database of the mail message'
    )
    has_attachments_flag: Optional[HasAttachmentsFlag] = Field(
        None, description='Whether the mail message has an attachment or not'
    )
    has_inline_attachments_flag: Optional[HasInlineAttachmentsFlag] = Field(
        None, description='Whether the mail message has an inline attachment or not'
    )
    has_real_attachments_flag: Optional[HasRealAttachmentsFlag] = Field(
        None,
        description='Whether the mail message has an attachment (which is not inline) or not',
    )
    nylas_id: Optional[str] = Field(
        None, description='The Mail Message ID assigned by the sync provider'
    )
    s3_bucket: Optional[str] = Field(None, description='The name of the S3 bucket')
    s3_bucket_path: Optional[str] = Field(None, description='The path of the S3 bucket')
    external_deleted_flag: Optional[bool] = Field(
        None,
        description='If the Mail Message has been deleted on the provider side or not',
    )
    mua_message_id: Optional[str] = Field(
        None, description='The Mail Message ID assigned by the mail user agent'
    )
    template_id: Optional[int] = Field(None, description='The ID of the mail template')
    timestamp: Optional[str] = Field(
        None, description='The add date and time of the Mail Message'
    )
    item_type: Optional[str] = Field(None, description='The type of the data item')
    company_id: Optional[int] = Field(None, description='The ID of the company')


class Datum54(BaseModel):
    object: Optional[str] = Field(None, description='The type of the data item')
    timestamp: Optional[str] = Field(
        None, description='The date and time when the item was created'
    )
    data: Optional[Data102] = Field(None, title='mailMessageItemForList')


class PersonsIdMailMessagesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum54]] = Field(
        None, description='The array of mail messages'
    )
    additional_data: Optional[AdditionalData54] = Field(
        None, description='The additional data of the list'
    )


class PersonsIdMergePutRequest(BaseModel):
    merge_with_id: int = Field(
        ...,
        description='The ID of the person that will not be overwritten. This person’s data will be prioritized in case of conflict with the other person.',
    )


class PhoneItem32(BaseModel):
    value: Optional[str] = Field(None, description='The phone number')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if phone number is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)',
    )


class EmailItem32(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId12(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data103(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem32]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem32]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId12] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[int] = Field(
        None, description='The ID of the owner related to the person'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization related to the person'
    )
    merge_what_id: Optional[int] = Field(
        None, description='The ID of the person with what the main person was merged'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    participant_open_deals_count: Optional[int] = Field(
        None, description='The count of open participant deals related with the item'
    )
    participant_closed_deals_count: Optional[int] = Field(
        None, description='The count of closed participant deals related with the item'
    )


class PersonsIdMergePutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data103] = Field(None, title='mergePersonItem')


class PersonsIdPermittedUsersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[float]] = Field(
        None, description='The list of permitted user IDs'
    )


class Data104(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deleted person')


class PersonsIdPictureDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data104] = None


class PersonsIdPicturePostRequest(BaseModel):
    file: bytes = Field(
        ..., description='One image supplied in the multipart/form-data encoding'
    )
    crop_x: Optional[int] = Field(
        None, description='X coordinate to where start cropping form (in pixels)'
    )
    crop_y: Optional[int] = Field(
        None, description='Y coordinate to where start cropping form (in pixels)'
    )
    crop_width: Optional[int] = Field(
        None, description='The width of the cropping area (in pixels)'
    )
    crop_height: Optional[int] = Field(
        None, description='The height of the cropping area (in pixels)'
    )


class PICTUREID6(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data105(BaseModel):
    PICTURE_ID: Optional[PICTUREID6] = Field(None, description='The ID of the picture')


class PersonsIdPicturePostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data105] = Field(
        None, description='The picture that is associated with the item'
    )


class Deal12(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    company_id: Optional[int] = Field(None, description='The ID of the company')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    first_add_time: Optional[str] = Field(
        None, description='The first creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )


class Product1(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the product')
    company_id: Optional[int] = Field(None, description='The ID of the company')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    description: Optional[str] = Field(
        None, description='The description of the product'
    )
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    category: Optional[str] = Field(None, description='The category of the product')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product will be made active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product can be selected in deals or not'
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the product name'
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the product. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.',
    )
    files_count: Optional[int] = Field(None, description='The count of files')
    add_time: Optional[str] = Field(
        None, description='The date and time when the product was added to the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The date and time when the product was updated to the deal'
    )
    deal_id: Optional[int] = Field(None, description='The ID of the deal')


class DEALID7(BaseModel):
    deal: Optional[Deal12] = None
    product: Optional[Product1] = None


class Datum55(BaseModel):
    DEAL_ID: Optional[DEALID7] = None


class AdditionalData59(BaseModel):
    pagination: Optional[Pagination10] = Field(
        None, description='Pagination details of the list'
    )


class PersonsIdProductsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum55]] = Field(
        None, description='The array of deal products'
    )
    additional_data: Optional[AdditionalData59] = None


class Datum56(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType10] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class AdditionalData60(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class PersonFieldsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum56]] = None
    additional_data: Optional[AdditionalData60] = Field(
        None, description='The additional data of the list'
    )


class FieldType14(Enum):
    address = 'address'
    date = 'date'
    daterange = 'daterange'
    double = 'double'
    enum = 'enum'
    monetary = 'monetary'
    org = 'org'
    people = 'people'
    phone = 'phone'
    set = 'set'
    text = 'text'
    time = 'time'
    timerange = 'timerange'
    user = 'user'
    varchar = 'varchar'
    varchar_auto = 'varchar_auto'
    visible_to = 'visible_to'


class PersonFieldsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. Example: `[{"label":"New Item"}]`',
    )
    add_visible_flag: Optional[bool] = Field(
        True,
        description="Whether the field is available in the 'add new' modal or not (both in the web and mobile app)",
    )
    field_type: FieldType14 = Field(
        ...,
        description="The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field (has multiple subfields, autocompleted by Google Maps)</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>",
    )


class FieldType15(BaseModel):
    pass


class Data106(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType15] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class PersonFieldsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data106] = None


class Data107(BaseModel):
    id: Optional[List[int]] = Field(None, description='The list of deleted field IDs')


class PersonFieldsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data107] = None


class Data108(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType15] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class PersonFieldsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data108] = None


class Data109(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the field that was deleted')


class PersonFieldsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data109] = None


class PersonFieldsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. All active items must be supplied and already existing items must have their ID supplied. New items only require a label. Example: `[{"id":123,"label":"Existing Item"},{"label":"New Item"}]`',
    )
    add_visible_flag: Optional[bool] = Field(
        True,
        description="Whether the field is available in 'add new' modal or not (both in web and mobile app)",
    )


class Data110(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the field. Value is `null` in case of subfields.'
    )
    key: Optional[str] = Field(
        None,
        description='The key of the field. For custom fields this is generated upon creation.',
    )
    name: Optional[str] = Field(None, description='The name of the field')
    order_nr: Optional[int] = Field(None, description='The order number of the field')
    field_type: Optional[FieldType15] = None
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the field'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the field'
    )
    last_updated_by_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created or most recently updated the field, only applicable for custom fields',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the field'
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the field'
    )
    edit_flag: Optional[bool] = Field(None, description='The edit flag of the field')
    index_visible_flag: Optional[bool] = Field(None, description='Not used')
    details_visible_flag: Optional[bool] = Field(None, description='Not used')
    add_visible_flag: Optional[bool] = Field(None, description='Not used')
    important_flag: Optional[bool] = Field(None, description='Not used')
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the field of an item can be edited in bulk'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be searched by this field'
    )
    filtering_allowed: Optional[bool] = Field(
        None, description='Whether or not items can be filtered by this field'
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not items can be sorted by this field'
    )
    mandatory_flag: Optional[bool] = Field(
        None, description='Whether or not the field is mandatory'
    )
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The options of the field. When there are no options, `null` is returned.',
    )
    options_deleted: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The deleted options of the field. Only present when there is at least 1 deleted option.',
    )
    is_subfield: Optional[bool] = Field(
        None,
        description='Whether or not the field is a subfield of another field. Only present if field is subfield.',
    )
    subfields: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The subfields of the field. Only present when the field has subfields.',
    )


class PersonFieldsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data110] = None


class Datum57(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the pipeline')
    name: Optional[str] = Field(None, description='The name of the pipeline')
    url_title: Optional[str] = Field(
        None, description='The pipeline title displayed in the URL'
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )
    deal_probability: Optional[bool] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    add_time: Optional[str] = Field(
        None, description='The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The pipeline update time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    selected: Optional[bool] = Field(
        None,
        description='A boolean that shows if the pipeline is selected from a filter or not',
    )


class PipelinesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum57]] = Field(None, description='Pipelines array')


class DealProbability(BaseModel):
    pass


class Active(BaseModel):
    pass


class PipelinesPostRequest(BaseModel):
    name: str = Field(..., description='The name of the pipeline')
    deal_probability: Optional[DealProbability] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[Active] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )


class Data111(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the pipeline')
    name: Optional[str] = Field(None, description='The name of the pipeline')
    url_title: Optional[str] = Field(
        None, description='The pipeline title displayed in the URL'
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )
    deal_probability: Optional[bool] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    add_time: Optional[str] = Field(
        None, description='The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The pipeline update time. Format: YYYY-MM-DD HH:MM:SS.'
    )


class PipelinesPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data111] = Field(None, description='The pipeline object')


class Data112(BaseModel):
    id: Optional[int] = Field(None, description='Deleted Pipeline ID')


class PipelinesIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data112] = None


class CURRENCYID(BaseModel):
    count: Optional[int] = Field(None, description='Deals count per currency')
    value: Optional[int] = Field(None, description='Deals value per currency')
    value_formatted: Optional[str] = Field(
        None, description='Deals value formatted per currency'
    )
    weighted_value: Optional[int] = Field(
        None, description='Deals weighted value per currency'
    )
    weighted_value_formatted: Optional[str] = Field(
        None, description='Deals weighted value formatted per currency'
    )


class STAGEID(BaseModel):
    CURRENCY_ID: Optional[CURRENCYID] = Field(
        None,
        description='The currency summary. This parameter is dynamic and changes according to `currency_id` value.',
    )


class PerStages(BaseModel):
    STAGE_ID: Optional[STAGEID] = Field(
        None,
        description='The currency summaries per stage. This parameter is dynamic and changes according to `stage_id` value.',
    )


class PerCurrency(BaseModel):
    CURRENCY_ID: Optional[int] = Field(
        None,
        description='Deals count per currency. This parameter is dynamic and changes according to `currency_id` value.',
    )


class CURRENCYID1(BaseModel):
    count: Optional[int] = Field(None, description='Deals count per currency')
    value: Optional[int] = Field(None, description='Deals value per currency')


class PerCurrencyFull(BaseModel):
    CURRENCY_ID: Optional[CURRENCYID1] = Field(
        None,
        description='The currency summary. This parameter is dynamic and changes according to `currency_id` value.',
    )


class DealsSummary(BaseModel):
    per_stages: Optional[PerStages] = Field(
        None, description='The stage objects containing deals currency information'
    )
    per_currency: Optional[PerCurrency] = Field(
        None, description='The currency count summary'
    )
    total_count: Optional[int] = Field(None, description='Deals count')
    per_currency_full: Optional[PerCurrencyFull] = Field(
        None, description='Full currency summaries'
    )


class Data113(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the pipeline')
    name: Optional[str] = Field(None, description='The name of the pipeline')
    url_title: Optional[str] = Field(
        None, description='The pipeline title displayed in the URL'
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )
    deal_probability: Optional[bool] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    add_time: Optional[str] = Field(
        None, description='The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The pipeline update time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    selected: Optional[bool] = Field(
        None,
        description='A boolean that shows if the pipeline is selected from a filter or not',
    )
    deals_summary: Optional[DealsSummary] = Field(None, description='Deals summary')


class PipelinesIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data113] = Field(
        None, description='The pipeline object', title='pipelineDetails'
    )


class PipelinesIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the pipeline')
    deal_probability: Optional[DealProbability] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[Active] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )


class Data114(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the pipeline')
    name: Optional[str] = Field(None, description='The name of the pipeline')
    url_title: Optional[str] = Field(
        None, description='The pipeline title displayed in the URL'
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )
    deal_probability: Optional[bool] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    add_time: Optional[str] = Field(
        None, description='The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The pipeline update time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    selected: Optional[bool] = Field(
        None,
        description='A boolean that shows if the pipeline is selected from a filter or not',
    )


class PipelinesIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data114] = Field(None, description='The pipeline object')


class StageConversion(BaseModel):
    from_stage_id: Optional[int] = Field(
        None, description='The stage ID from where conversion starts'
    )
    to_stage_id: Optional[int] = Field(
        None, description='The stage ID to where conversion ends'
    )
    conversion_rate: Optional[int] = Field(None, description='The conversion rate')


class Data115(BaseModel):
    stage_conversions: Optional[List[StageConversion]] = Field(
        None, description='The stage conversions'
    )
    won_conversion: Optional[int] = Field(None, description='The won conversion')
    lost_conversion: Optional[int] = Field(None, description='The lost conversion')


class PipelinesIdConversionStatisticsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data115] = Field(None, description='The pipeline object')


class Everyone(Enum):
    number_0 = 0
    number_1 = 1


class GetSummary(Enum):
    number_0 = 0
    number_1 = 1


class Datum58(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class PipelinesIdDealsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum58]] = Field(None, description='The array of deals')
    additional_data: Optional[AdditionalData60] = Field(
        None, description='The additional data of the list'
    )


class MovementsBetweenStages(BaseModel):
    count: Optional[int] = Field(
        None, description='The count of the deals that have been moved between stages'
    )


class Values(BaseModel):
    CURRENCY_ID: Optional[int] = Field(None, description='The value of the deals')


class FormattedValues(BaseModel):
    CURRENCY_ID: Optional[str] = Field(
        None, description='The formatted values of the deals'
    )


class NewDeals(BaseModel):
    count: Optional[int] = Field(None, description='The count of the deals')
    deals_ids: Optional[List[int]] = Field(
        None, description='The IDs of the deals that have been moved'
    )
    values: Optional[Values] = Field(None, description='The values of the deals')
    formatted_values: Optional[FormattedValues] = Field(
        None, description='The formatted values of the deals'
    )


class DealsLeftOpen(BaseModel):
    count: Optional[int] = Field(None, description='The count of the deals')
    deals_ids: Optional[List[int]] = Field(
        None, description='The IDs of the deals that have been moved'
    )
    values: Optional[Values] = Field(None, description='The values of the deals')
    formatted_values: Optional[FormattedValues] = Field(
        None, description='The formatted values of the deals'
    )


class WonDeals(BaseModel):
    count: Optional[int] = Field(None, description='The count of the deals')
    deals_ids: Optional[List[int]] = Field(
        None, description='The IDs of the deals that have been moved'
    )
    values: Optional[Values] = Field(None, description='The values of the deals')
    formatted_values: Optional[FormattedValues] = Field(
        None, description='The formatted values of the deals'
    )


class LostDeals(BaseModel):
    count: Optional[int] = Field(None, description='The count of the deals')
    deals_ids: Optional[List[int]] = Field(
        None, description='The IDs of the deals that have been moved'
    )
    values: Optional[Values] = Field(None, description='The values of the deals')
    formatted_values: Optional[FormattedValues] = Field(
        None, description='The formatted values of the deals'
    )


class ByStage(BaseModel):
    stage_id: Optional[int] = Field(None, description='The stage ID')
    value: Optional[int] = Field(
        None, description='The average deals age in specific stage'
    )


class AverageAgeInDays(BaseModel):
    across_all_stages: Optional[int] = Field(
        None, description='The moved deals average age across all stages'
    )
    by_stages: Optional[List[ByStage]] = Field(
        None, description='The moved deals average age by stages'
    )


class Data116(BaseModel):
    movements_between_stages: Optional[MovementsBetweenStages] = Field(
        None, description='Movements between stages'
    )
    new_deals: Optional[NewDeals] = Field(None, description='Deals summary')
    deals_left_open: Optional[DealsLeftOpen] = Field(None, description='Deals summary')
    won_deals: Optional[WonDeals] = Field(None, description='Deals summary')
    lost_deals: Optional[LostDeals] = Field(None, description='Deals summary')
    average_age_in_days: Optional[AverageAgeInDays] = Field(
        None, description='The moved deals average age in days'
    )


class PipelinesIdMovementStatisticsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data116] = Field(None, description='The pipeline object')


class Data117(BaseModel):
    id: Optional[float] = Field(None, description='The ID of the product')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The ax percentage')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product is active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product is selected in deals or not'
    )
    visible_to: Optional[VisibleTo] = Field(
        None, description='Visibility of the product'
    )
    owner_id: Optional[Dict[str, Any]] = Field(
        None, description='Information about the Pipedrive user who owns the product'
    )
    prices: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)',
    )


class User31(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class DEALID8(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the deal associated with the item'
    )
    title: Optional[str] = Field(
        None, description='The title of the deal associated with the item'
    )
    status: Optional[str] = Field(
        None, description='The status of the deal associated with the item'
    )
    value: Optional[float] = Field(
        None, description='The value of the deal that is associated with the item'
    )
    currency: Optional[str] = Field(None, description='The currency of the deal value')
    stage_id: Optional[int] = Field(
        None, description='The ID of the stage the deal is currently at'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline the deal is in'
    )


class Deal13(BaseModel):
    DEAL_ID: Optional[DEALID8] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class EmailItem33(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem33(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID15(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem33]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem33]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person21(BaseModel):
    PERSON_ID: Optional[PERSONID15] = Field(
        None, description='The ID of the person associated with the item'
    )


class Organization34(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID26] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects31(BaseModel):
    user: Optional[User31] = None
    deal: Optional[Deal13] = None
    person: Optional[Person21] = None
    organization: Optional[Organization34] = None


class Datum59(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data117] = None
    related_objects: Optional[RelatedObjects31] = None


class User32(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Deal14(BaseModel):
    DEAL_ID: Optional[DEALID8] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class PERSONID16(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem33]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem33]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person22(BaseModel):
    PERSON_ID: Optional[PERSONID16] = Field(
        None, description='The ID of the person associated with the item'
    )


class Organization35(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID26] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects32(BaseModel):
    user: Optional[User32] = None
    deal: Optional[Deal14] = None
    person: Optional[Person22] = None
    organization: Optional[Organization35] = None


class ProductsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum59]] = Field(
        None, description='Array containing data for all products'
    )
    additional_data: Optional[AdditionalData60] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects32] = None


class ProductsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product will be made active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product can be selected in deals or not'
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the product. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.',
    )
    prices: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="An array of objects, each containing: `currency` (string), `price` (number), `cost` (number, optional), `overhead_cost` (number, optional). Note that there can only be one price per product per currency. When `prices` is omitted altogether, a default price of 0 and a default currency based on the company's currency will be assigned.",
    )


class Data118(BaseModel):
    id: Optional[float] = Field(None, description='The ID of the product')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The ax percentage')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product is active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product is selected in deals or not'
    )
    visible_to: Optional[VisibleTo] = Field(
        None, description='Visibility of the product'
    )
    owner_id: Optional[Dict[str, Any]] = Field(
        None, description='Information about the Pipedrive user who owns the product'
    )
    prices: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)',
    )


class User33(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Deal15(BaseModel):
    DEAL_ID: Optional[DEALID8] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class PERSONID17(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem33]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem33]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person23(BaseModel):
    PERSON_ID: Optional[PERSONID17] = Field(
        None, description='The ID of the person associated with the item'
    )


class Organization36(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID26] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects33(BaseModel):
    user: Optional[User33] = None
    deal: Optional[Deal15] = None
    person: Optional[Person23] = None
    organization: Optional[Organization36] = None


class ProductsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data118] = None
    related_objects: Optional[RelatedObjects33] = None


class Fields5(Enum):
    code = 'code'
    custom_fields = 'custom_fields'
    name = 'name'


class IncludeFields4(Enum):
    product_price = 'product.price'


class Owner4(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the owner of the product')


class Item10(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the product')
    type: Optional[str] = Field(None, description='The type of the item')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[int] = Field(None, description='The code of the product')
    visible_to: Optional[int] = Field(None, description='The visibility of the product')
    owner: Optional[Owner4] = None
    custom_fields: Optional[List[str]] = Field(None, description='The custom fields')


class Item9(BaseModel):
    result_score: Optional[float] = Field(None, description='Search result relevancy')
    item: Optional[Item10] = None


class Data119(BaseModel):
    items: Optional[List[Item9]] = Field(None, description='The array of found items')


class AdditionalData63(BaseModel):
    pagination: Optional[Pagination10] = Field(
        None, description='Pagination details of the list'
    )


class ProductsSearchGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data119] = None
    additional_data: Optional[AdditionalData63] = None


class Id(BaseModel):
    pass


class Data120(BaseModel):
    id: Optional[Id] = Field(None, description='The ID of the removed product')


class ProductsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data120] = None


class Data121(BaseModel):
    id: Optional[float] = Field(None, description='The ID of the product')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The ax percentage')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product is active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product is selected in deals or not'
    )
    visible_to: Optional[VisibleTo] = Field(
        None, description='Visibility of the product'
    )
    owner_id: Optional[Dict[str, Any]] = Field(
        None, description='Information about the Pipedrive user who owns the product'
    )
    prices: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)',
    )


class User34(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Deal16(BaseModel):
    DEAL_ID: Optional[DEALID8] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class PERSONID18(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem33]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem33]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person24(BaseModel):
    PERSON_ID: Optional[PERSONID18] = Field(
        None, description='The ID of the person associated with the item'
    )


class Organization37(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID26] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects34(BaseModel):
    user: Optional[User34] = None
    deal: Optional[Deal16] = None
    person: Optional[Person24] = None
    organization: Optional[Organization37] = None


class ProductsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data121] = None
    related_objects: Optional[RelatedObjects34] = None


class ProductsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product will be made active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product can be selected in deals or not'
    )
    visible_to: Optional[VisibleTo] = Field(
        None,
        description='The visibility of the product. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner\'s visibility group</td></tr><tr><td>`5`</td><td>Owner\'s visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.',
    )
    prices: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="An array of objects, each containing: `currency` (string), `price` (number), `cost` (number, optional), `overhead_cost` (number, optional). Note that there can only be one price per product per currency. When `prices` is omitted altogether, a default price of 0 and a default currency based on the company's currency will be assigned.",
    )


class Data122(BaseModel):
    id: Optional[float] = Field(None, description='The ID of the product')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The ax percentage')
    active_flag: Optional[bool] = Field(
        True, description='Whether this product is active or not'
    )
    selectable: Optional[bool] = Field(
        True, description='Whether this product is selected in deals or not'
    )
    visible_to: Optional[VisibleTo] = Field(
        None, description='Visibility of the product'
    )
    owner_id: Optional[Dict[str, Any]] = Field(
        None, description='Information about the Pipedrive user who owns the product'
    )
    prices: Optional[Dict[str, Any]] = Field(
        None,
        description='Object of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)',
    )


class User35(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class Deal17(BaseModel):
    DEAL_ID: Optional[DEALID8] = Field(
        None, description='The ID of the deal which is associated with the item'
    )


class PERSONID19(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem33]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem33]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person25(BaseModel):
    PERSON_ID: Optional[PERSONID19] = Field(
        None, description='The ID of the person associated with the item'
    )


class Organization38(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID26] = Field(
        None, description='The ID of the organization associated with the item'
    )


class RelatedObjects35(BaseModel):
    user: Optional[User35] = None
    deal: Optional[Deal17] = None
    person: Optional[Person25] = None
    organization: Optional[Organization38] = None


class ProductsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data122] = None
    related_objects: Optional[RelatedObjects35] = None


class EmailItem38(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='If this is the primary email or not'
    )


class PhoneItem38(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the deal'
    )
    primary: Optional[bool] = Field(
        None, description='If this is the primary phone number or not'
    )


class PersonId6(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    email: Optional[List[EmailItem38]] = Field(
        None, description='The emails of the person associated with the deal'
    )
    phone: Optional[List[PhoneItem38]] = Field(
        None, description='The phone numbers of the person associated with the deal'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the deal',
    )
    value: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )


class Datum60(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[CreatorUserId] = Field(
        None, description='The creator of the deal'
    )
    user_id: Optional[UserId] = Field(None, title='dealUserDataWithId')
    person_id: Optional[PersonId6] = Field(None, title='dealPersonDataWithId')
    org_id: Optional[OrgId13] = Field(None, title='dealOrganizationDataWithId')
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class AdditionalData64(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class ORGANIZATIONID32(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated organization is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the organization associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the organization associated with the item'
    )
    people_count: Optional[int] = Field(
        None,
        description='The number of people connected with the organization that is associated with the item',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the organization that is associated with the item',
    )
    address: Optional[str] = Field(None, description='The address of the organization')
    cc_email: Optional[str] = Field(
        None, description='The BCC email of the organization associated with the item'
    )


class Organization39(BaseModel):
    ORGANIZATION_ID: Optional[ORGANIZATIONID32] = Field(
        None, description='The ID of the organization associated with the item'
    )


class EmailItem39(BaseModel):
    label: Optional[str] = Field(None, description='The type of the email')
    value: Optional[str] = Field(None, description='The email of the associated person')
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary email or not'
    )


class PhoneItem39(BaseModel):
    label: Optional[str] = Field(None, description='The type of the phone number')
    value: Optional[str] = Field(
        None, description='The phone number of the person associated with the item'
    )
    primary: Optional[bool] = Field(
        None, description='Whether this is the primary phone number or not'
    )


class PERSONID20(BaseModel):
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated person is active or not'
    )
    id: Optional[int] = Field(
        None, description='The ID of the person associated with the item'
    )
    name: Optional[str] = Field(
        None, description='The name of the person associated with the item'
    )
    email: Optional[List[EmailItem39]] = Field(
        None, description='The emails of the person associated with the item'
    )
    phone: Optional[List[PhoneItem39]] = Field(
        None, description='The phone numbers of the person associated with the item'
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the owner of the person that is associated with the item',
    )


class Person26(BaseModel):
    PERSON_ID: Optional[PERSONID20] = Field(
        None, description='The ID of the person associated with the item'
    )


class User36(BaseModel):
    USER_ID: Optional[USERID] = Field(None, title='userDataWithId')


class RelatedObjects36(BaseModel):
    organization: Optional[Organization39] = None
    person: Optional[Person26] = None
    user: Optional[User36] = None
    stage: Optional[Stage1] = None
    pipeline: Optional[Pipeline] = None


class ProductsIdDealsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum60]] = Field(None, description='The array of deals')
    additional_data: Optional[AdditionalData64] = Field(
        None, description='The additional data of the list'
    )
    related_objects: Optional[RelatedObjects36] = None


class Datum61(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    product_id: Optional[int] = Field(
        None, description='The ID of the product associated with the file'
    )
    add_time: Optional[str] = Field(
        None,
        description='The UTC date time when the file was uploaded. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The UTC date time when the file was last updated. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file in bytes')
    active_flag: Optional[bool] = Field(
        None, description='Whether the user is active or not.'
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL to download the file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class ProductsIdFilesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum61]] = Field(None, description='The array of files')
    additional_data: Optional[AdditionalData64] = Field(
        None, description='The additional data of the list'
    )


class Datum62(BaseModel):
    user_id: Optional[int] = Field(None, description='The ID of the user')
    id: Optional[int] = Field(None, description='The ID of the user follower')
    product_id: Optional[int] = Field(None, description='The ID of the product')
    add_time: Optional[str] = Field(
        None, description='The date and time when the follower was added to the person'
    )


class ProductsIdFollowersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum62]] = Field(None, description='The list of followers')
    additional_data: Optional[AdditionalData64] = Field(
        None, description='The additional data of the list'
    )


class ProductsIdFollowersPostRequest(BaseModel):
    user_id: int = Field(..., description='The ID of the user')


class Data123(BaseModel):
    user_id: Optional[int] = Field(
        None, description='The ID of the user that was added as follower'
    )
    id: Optional[int] = Field(None, description='The ID of the follower')
    product_id: Optional[int] = Field(None, description='The ID of the product')
    add_time: Optional[str] = Field(
        None, description='The follower creation time. Format: YYYY-MM-DD HH:MM:SS'
    )


class ProductsIdFollowersPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data123] = None


class Data124(BaseModel):
    id: Optional[Id] = Field(None, description='The ID of the removed follower')


class ProductsIdFollowersFollowerIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data124] = None


class ProductsIdPermittedUsersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[int]] = Field(None, description='The list of user IDs')


class Data125(BaseModel):
    id: Optional[List[int]] = Field(
        None, description='Array of all the IDs of the deleted product fields'
    )


class ProductFieldsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data125] = None


class FieldType18(Enum):
    varchar = 'varchar'
    varchar_auto = 'varchar_auto'
    text = 'text'
    double = 'double'
    monetary = 'monetary'
    date = 'date'
    set = 'set'
    enum = 'enum'
    user = 'user'
    org = 'org'
    people = 'people'
    phone = 'phone'
    time = 'time'
    timerange = 'timerange'
    daterange = 'daterange'
    address = 'address'


class Datum63(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`',
    )
    field_type: FieldType18 = Field(
        ...,
        description='The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>',
    )
    id: Optional[int] = Field(None, description='The ID of the product field')
    key: Optional[str] = Field(None, description='The key of the product field')
    order_nr: Optional[int] = Field(
        None, description='The position (index) of the product field in the detail view'
    )
    add_time: Optional[str] = Field(
        None, description='The product field creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    update_time: Optional[str] = Field(
        None,
        description='The product field last update time. Format: YYYY-MM-DD HH:MM:SS',
    )
    last_updated_by_user_id: Optional[int] = Field(
        None, description='The ID of the last user to update the product field'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the product field'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is currently active'
    )
    edit_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field name and metadata is editable',
    )
    add_visible_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is visible in the Add Product Modal',
    )
    important_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is marked as important'
    )
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the product field data can be edited'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is searchable'
    )
    filtering_allowed: Optional[bool] = Field(
        None,
        description='Whether or not the product field value can be used when filtering searches',
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is sortable'
    )
    mandatory_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is mandatory when creating products',
    )


class ProductFieldsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum63]] = Field(
        None, description='Array containing data for all product fields'
    )
    additional_data: Optional[Dict[str, Any]] = Field(
        None, description='Additional data for the product field, such as pagination'
    )


class ProductFieldsPostRequest(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`',
    )
    field_type: FieldType18 = Field(
        ...,
        description='The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>',
    )


class Data126(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`',
    )
    field_type: FieldType18 = Field(
        ...,
        description='The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>',
    )
    id: Optional[int] = Field(None, description='The ID of the product field')
    key: Optional[str] = Field(None, description='The key of the product field')
    order_nr: Optional[int] = Field(
        None, description='The position (index) of the product field in the detail view'
    )
    add_time: Optional[str] = Field(
        None, description='The product field creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    update_time: Optional[str] = Field(
        None,
        description='The product field last update time. Format: YYYY-MM-DD HH:MM:SS',
    )
    last_updated_by_user_id: Optional[int] = Field(
        None, description='The ID of the last user to update the product field'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the product field'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is currently active'
    )
    edit_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field name and metadata is editable',
    )
    add_visible_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is visible in the Add Product Modal',
    )
    important_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is marked as important'
    )
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the product field data can be edited'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is searchable'
    )
    filtering_allowed: Optional[bool] = Field(
        None,
        description='Whether or not the product field value can be used when filtering searches',
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is sortable'
    )
    mandatory_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is mandatory when creating products',
    )


class ProductFieldsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data126] = Field(None, description='All data for the product field')


class Data127(BaseModel):
    id: Optional[Id] = Field(None, description='The ID of the deleted product field')


class ProductFieldsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data127] = None


class ProductFieldsIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Data128(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`',
    )
    field_type: FieldType18 = Field(
        ...,
        description='The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>',
    )
    id: Optional[int] = Field(None, description='The ID of the product field')
    key: Optional[str] = Field(None, description='The key of the product field')
    order_nr: Optional[int] = Field(
        None, description='The position (index) of the product field in the detail view'
    )
    add_time: Optional[str] = Field(
        None, description='The product field creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    update_time: Optional[str] = Field(
        None,
        description='The product field last update time. Format: YYYY-MM-DD HH:MM:SS',
    )
    last_updated_by_user_id: Optional[int] = Field(
        None, description='The ID of the last user to update the product field'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the product field'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is currently active'
    )
    edit_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field name and metadata is editable',
    )
    add_visible_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is visible in the Add Product Modal',
    )
    important_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is marked as important'
    )
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the product field data can be edited'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is searchable'
    )
    filtering_allowed: Optional[bool] = Field(
        None,
        description='Whether or not the product field value can be used when filtering searches',
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is sortable'
    )
    mandatory_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is mandatory when creating products',
    )


class ProductFieldsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data128] = Field(None, description='All data for the product field')


class ProductFieldsIdGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class ProductFieldsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either set or enum, possible options on update must be supplied as an array of objects each containing id and label, for example: [{"id":1, "label":"red"},{"id":2, "label":"blue"},{"id":3, "label":"lilac"}]',
    )


class Data129(BaseModel):
    name: str = Field(..., description='The name of the field')
    options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`',
    )
    field_type: FieldType18 = Field(
        ...,
        description='The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>',
    )
    id: Optional[int] = Field(None, description='The ID of the product field')
    key: Optional[str] = Field(None, description='The key of the product field')
    order_nr: Optional[int] = Field(
        None, description='The position (index) of the product field in the detail view'
    )
    add_time: Optional[str] = Field(
        None, description='The product field creation time. Format: YYYY-MM-DD HH:MM:SS'
    )
    update_time: Optional[str] = Field(
        None,
        description='The product field last update time. Format: YYYY-MM-DD HH:MM:SS',
    )
    last_updated_by_user_id: Optional[int] = Field(
        None, description='The ID of the last user to update the product field'
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the product field'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is currently active'
    )
    edit_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field name and metadata is editable',
    )
    add_visible_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is visible in the Add Product Modal',
    )
    important_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is marked as important'
    )
    bulk_edit_allowed: Optional[bool] = Field(
        None, description='Whether or not the product field data can be edited'
    )
    searchable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is searchable'
    )
    filtering_allowed: Optional[bool] = Field(
        None,
        description='Whether or not the product field value can be used when filtering searches',
    )
    sortable_flag: Optional[bool] = Field(
        None, description='Whether or not the product field is sortable'
    )
    mandatory_flag: Optional[bool] = Field(
        None,
        description='Whether or not the product field is mandatory when creating products',
    )


class ProductFieldsIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data129] = Field(None, description='All data for the product field')


class Datum64(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the project, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the project')
    board_id: Optional[float] = Field(
        None, description='The ID of the board this project is associated with'
    )
    phase_id: Optional[float] = Field(
        None, description='The ID of the phase this project is associated with'
    )
    description: Optional[str] = Field(
        None, description='The description of the project'
    )
    status: Optional[str] = Field(None, description='The status of the project')
    owner_id: Optional[float] = Field(None, description='The ID of a project owner')
    start_date: Optional[date] = Field(
        None, description='The start date of the project. Format: YYYY-MM-DD.'
    )
    end_date: Optional[date] = Field(
        None, description='The end date of the project. Format: YYYY-MM-DD.'
    )
    deal_ids: Optional[List[int]] = Field(
        None, description='An array of IDs of the deals this project is associated with'
    )
    org_id: Optional[float] = Field(
        None, description='The ID of the organization this project is associated with'
    )
    person_id: Optional[float] = Field(
        None, description='The ID of the person this project is associated with'
    )
    labels: Optional[List[int]] = Field(
        None, description='An array of IDs of the labels this project has'
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    status_change_time: Optional[str] = Field(
        None,
        description='The status changed date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    archive_time: Optional[str] = Field(
        None,
        description="The archived date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. If not archived then 'null'.",
    )


class AdditionalData67(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class ProjectsGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum64]] = None
    additional_data: Optional[AdditionalData67] = Field(
        None, description='The additional data of the list'
    )


class ProjectsPostRequest(BaseModel):
    title: str = Field(..., description='The title of the project')
    board_id: float = Field(..., description='The ID of a project board')
    phase_id: float = Field(..., description='The ID of a phase on a project board')
    description: Optional[str] = Field(
        None, description='The description of the project'
    )
    status: Optional[str] = Field(None, description='The status of the project')
    owner_id: Optional[float] = Field(None, description='The ID of a project owner')
    start_date: Optional[date] = Field(
        None, description='The start date of the project. Format: YYYY-MM-DD.'
    )
    end_date: Optional[date] = Field(
        None, description='The end date of the project. Format: YYYY-MM-DD.'
    )
    deal_ids: Optional[List[int]] = Field(
        None, description='An array of IDs of the deals this project is associated with'
    )
    org_id: Optional[float] = Field(
        None, description='The ID of the organization this project is associated with'
    )
    person_id: Optional[float] = Field(
        None, description='The ID of the person this project is associated with'
    )
    labels: Optional[List[int]] = Field(
        None, description='An array of IDs of the labels this project has'
    )
    template_id: Optional[float] = Field(
        None, description='The ID of the template the project will be based on'
    )


class Data130(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the project, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the project')
    board_id: Optional[float] = Field(
        None, description='The ID of the board this project is associated with'
    )
    phase_id: Optional[float] = Field(
        None, description='The ID of the phase this project is associated with'
    )
    description: Optional[str] = Field(
        None, description='The description of the project'
    )
    status: Optional[str] = Field(None, description='The status of the project')
    owner_id: Optional[float] = Field(None, description='The ID of a project owner')
    start_date: Optional[date] = Field(
        None, description='The start date of the project. Format: YYYY-MM-DD.'
    )
    end_date: Optional[date] = Field(
        None, description='The end date of the project. Format: YYYY-MM-DD.'
    )
    deal_ids: Optional[List[int]] = Field(
        None, description='An array of IDs of the deals this project is associated with'
    )
    org_id: Optional[float] = Field(
        None, description='The ID of the organization this project is associated with'
    )
    person_id: Optional[float] = Field(
        None, description='The ID of the person this project is associated with'
    )
    labels: Optional[List[int]] = Field(
        None, description='An array of IDs of the labels this project has'
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    status_change_time: Optional[str] = Field(
        None,
        description='The status changed date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    archive_time: Optional[str] = Field(
        None,
        description="The archived date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. If not archived then 'null'.",
    )


class ProjectsPostResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data130] = Field(None, title='projectResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class ProjectsIdGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data130] = Field(None, title='projectResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class ProjectsIdPutRequest(BaseModel):
    title: Optional[str] = Field(None, description='The title of the project')
    board_id: Optional[float] = Field(
        None, description='The ID of the board this project is associated with'
    )
    phase_id: Optional[float] = Field(
        None, description='The ID of the phase this project is associated with'
    )
    description: Optional[str] = Field(
        None, description='The description of the project'
    )
    status: Optional[str] = Field(None, description='The status of the project')
    owner_id: Optional[float] = Field(None, description='The ID of a project owner')
    start_date: Optional[date] = Field(
        None, description='The start date of the project. Format: YYYY-MM-DD.'
    )
    end_date: Optional[date] = Field(
        None, description='The end date of the project. Format: YYYY-MM-DD.'
    )
    deal_ids: Optional[List[int]] = Field(
        None, description='An array of IDs of the deals this project is associated with'
    )
    org_id: Optional[float] = Field(
        None, description='The ID of the organization this project is associated with'
    )
    person_id: Optional[float] = Field(
        None, description='The ID of the person this project is associated with'
    )
    labels: Optional[List[int]] = Field(
        None, description='An array of IDs of the labels this project has'
    )


class ProjectsIdPutResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data130] = Field(None, title='projectResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class Data134(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the project that was deleted'
    )


class Data133(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data134] = None


class ProjectsIdDeleteResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data133] = Field(None, title='deleteProject')
    additional_data: Optional[Dict[str, Any]] = None


class Data135(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the project, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the project')
    board_id: Optional[float] = Field(
        None, description='The ID of the board this project is associated with'
    )
    phase_id: Optional[float] = Field(
        None, description='The ID of the phase this project is associated with'
    )
    description: Optional[str] = Field(
        None, description='The description of the project'
    )
    status: Optional[str] = Field(None, description='The status of the project')
    owner_id: Optional[float] = Field(None, description='The ID of a project owner')
    start_date: Optional[date] = Field(
        None, description='The start date of the project. Format: YYYY-MM-DD.'
    )
    end_date: Optional[date] = Field(
        None, description='The end date of the project. Format: YYYY-MM-DD.'
    )
    deal_ids: Optional[List[int]] = Field(
        None, description='An array of IDs of the deals this project is associated with'
    )
    org_id: Optional[float] = Field(
        None, description='The ID of the organization this project is associated with'
    )
    person_id: Optional[float] = Field(
        None, description='The ID of the person this project is associated with'
    )
    labels: Optional[List[int]] = Field(
        None, description='An array of IDs of the labels this project has'
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    status_change_time: Optional[str] = Field(
        None,
        description='The status changed date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    archive_time: Optional[str] = Field(
        None,
        description="The archived date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. If not archived then 'null'.",
    )


class ProjectsIdArchivePostResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data135] = Field(None, title='projectResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class Datum65(BaseModel):
    item_id: Optional[float] = Field(
        None, description='ID of plan item (either activity or task ID)'
    )
    item_type: Optional[str] = Field(
        None, description='Type of a plan item (task / activity)'
    )
    phase_id: Optional[float] = Field(
        None,
        description='The ID of the board this project is associated with. If null then plan item is not in any phase.',
    )
    group_id: Optional[float] = Field(
        None,
        description='The ID of the board this project is associated with. If null then plan item is not in any group.',
    )


class ProjectsIdPlanGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum65]] = None
    additional_data: Optional[Dict[str, Any]] = None


class ProjectsIdPlanActivitiesActivityIdPutRequest(BaseModel):
    phase_id: Optional[float] = Field(
        None, description='The ID of a phase on a project board'
    )
    group_id: Optional[float] = Field(
        None, description='The ID of a group on a project board'
    )


class Data136(BaseModel):
    item_id: Optional[float] = Field(
        None, description='ID of plan item (either activity or task ID)'
    )
    item_type: Optional[str] = Field(
        None, description='Type of a plan item (task / activity)'
    )
    phase_id: Optional[float] = Field(
        None,
        description='The ID of the board this project is associated with. If null then plan item is not in any phase.',
    )
    group_id: Optional[float] = Field(
        None,
        description='The ID of the board this project is associated with. If null then plan item is not in any group.',
    )


class ProjectsIdPlanActivitiesActivityIdPutResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data136] = None
    additional_data: Optional[Dict[str, Any]] = None


class ProjectsIdPlanTasksTaskIdPutRequest(BaseModel):
    phase_id: Optional[float] = Field(
        None, description='The ID of a phase on a project board'
    )
    group_id: Optional[float] = Field(
        None, description='The ID of a group on a project board'
    )


class ProjectsIdPlanTasksTaskIdPutResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data136] = None
    additional_data: Optional[Dict[str, Any]] = None


class Datum66(BaseModel):
    id: Optional[float] = Field(None, description='ID of the group')
    name: Optional[str] = Field(None, description='Name of the group')
    order_nr: Optional[float] = Field(None, description='Order number of the group')


class ProjectsIdGroupsGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum66]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Done6(BaseModel):
    pass


class Datum67(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the task, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the task')
    project_id: Optional[float] = Field(
        None, description='The ID of the project this task is associated with'
    )
    description: Optional[str] = Field(None, description='The description of the task')
    parent_task_id: Optional[float] = Field(
        None,
        description='The ID of a parent task. Can not be ID of a task which is already a subtask.',
    )
    assignee_id: Optional[float] = Field(
        None, description='The ID of the user who will be the assignee of the task'
    )
    done: Optional[Done6] = Field(
        None, description='Whether the task is done or not. 0 = Not done, 1 = Done.'
    )
    due_date: Optional[date] = Field(
        None, description='The due date of the task. Format: YYYY-MM-DD.'
    )
    creator_id: Optional[float] = Field(None, description='The creator of a task')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The marked as done date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class ProjectsIdTasksGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum67]] = None
    additional_data: Optional[AdditionalData67] = Field(
        None, description='The additional data of the list'
    )


class Datum68(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )


class ProjectsIdActivitiesGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum68]] = None
    additional_data: Optional[AdditionalData67] = Field(
        None, description='The additional data of the list'
    )


class Datum69(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the project board')
    name: Optional[str] = Field(None, description='Name of a project board')
    order_nr: Optional[float] = Field(None, description='The order of a board')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class ProjectsBoardsGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum69]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Data138(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the project board')
    name: Optional[str] = Field(None, description='Name of a project board')
    order_nr: Optional[float] = Field(None, description='The order of a board')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class ProjectsBoardsIdGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data138] = None
    additional_data: Optional[Dict[str, Any]] = None


class Datum70(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the project phase')
    name: Optional[str] = Field(None, description='Name of a project phase')
    board_id: Optional[float] = Field(
        None, description='The ID of the project board this phase is linked to'
    )
    order_nr: Optional[float] = Field(None, description='The order of a phase')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class ProjectsPhasesGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum70]] = None
    additional_data: Optional[Dict[str, Any]] = None


class Data139(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the project phase')
    name: Optional[str] = Field(None, description='Name of a project phase')
    board_id: Optional[float] = Field(
        None, description='The ID of the project board this phase is linked to'
    )
    order_nr: Optional[float] = Field(None, description='The order of a phase')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the board in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class ProjectsPhasesIdGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data139] = None
    additional_data: Optional[Dict[str, Any]] = None


class Datum71(BaseModel):
    id: Optional[float] = Field(None, description='The ID of a template')
    title: Optional[str] = Field(None, description='The title of a template')
    description: Optional[str] = Field(
        None, description='The description of a template'
    )
    projects_board_id: Optional[float] = Field(
        None, description='The ID of the project board this template is associated with'
    )
    owner_id: Optional[float] = Field(None, description='The ID of a template owner')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the template in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the template in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class ProjectTemplatesGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum71]] = None
    additional_data: Optional[AdditionalData67] = Field(
        None, description='The additional data of the list'
    )


class Data140(BaseModel):
    id: Optional[float] = Field(None, description='The ID of a template')
    title: Optional[str] = Field(None, description='The title of a template')
    description: Optional[str] = Field(
        None, description='The description of a template'
    )
    projects_board_id: Optional[float] = Field(
        None, description='The ID of the project board this template is associated with'
    )
    owner_id: Optional[float] = Field(None, description='The ID of a template owner')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the template in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the template in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class ProjectTemplatesIdGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data140] = Field(None, title='templateResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class Items(Enum):
    activity = 'activity'
    activityType = 'activityType'
    deal = 'deal'
    file = 'file'
    filter = 'filter'
    note = 'note'
    person = 'person'
    organization = 'organization'
    pipeline = 'pipeline'
    product = 'product'
    stage = 'stage'
    user = 'user'


class Item11(Enum):
    activity = 'activity'


class Data142(BaseModel):
    due_date: Optional[date] = Field(
        None, description='The due date of the activity. Format: YYYY-MM-DD'
    )
    due_time: Optional[str] = Field(
        None, description='The due time of the activity in UTC. Format: HH:MM'
    )
    duration: Optional[str] = Field(
        None, description='The duration of the activity. Format: HH:MM'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this activity is associated with'
    )
    lead_id: Optional[UUID] = Field(
        None,
        description='The ID of the lead in the UUID format this activity is associated with',
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person this activity is associated with'
    )
    project_id: Optional[int] = Field(
        None, description='The ID of the project this activity is associated with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization this activity is associated with'
    )
    location: Optional[str] = Field(
        None,
        description='The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.',
    )
    public_description: Optional[str] = Field(
        None,
        description='Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.',
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the activity, generated when the activity was created',
    )
    note: Optional[str] = Field(
        None, description='The note of the activity (HTML format)'
    )
    done: Optional[bool] = Field(
        None, description='Whether the activity is done or not'
    )
    subject: Optional[str] = Field(None, description='The subject of the activity')
    type: Optional[str] = Field(
        None,
        description='The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.',
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user whom the activity is assigned to'
    )
    participants: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='List of multiple persons (participants) this activity is associated with',
    )
    busy_flag: Optional[bool] = Field(
        None,
        description="Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.",
    )
    attendees: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.',
    )
    company_id: Optional[int] = Field(None, description="The user's company ID")
    reference_type: Optional[str] = Field(
        None,
        description='If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.',
    )
    reference_id: Optional[int] = Field(
        None,
        description='Together with the `reference_type`, gives the ID of the other object',
    )
    conference_meeting_client: Optional[str] = Field(
        None,
        description='The ID of the Marketplace app, which is connected to this activity',
    )
    conference_meeting_url: Optional[str] = Field(
        None,
        description='The link to join the meeting which is associated with this activity',
    )
    conference_meeting_id: Optional[str] = Field(
        None,
        description='The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity',
    )
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.',
    )
    last_notification_time: Optional[str] = Field(
        None,
        description='The date and time of latest notifications sent about this activity to the participants or the attendees of this activity',
    )
    last_notification_user_id: Optional[int] = Field(
        None,
        description='The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity',
    )
    notification_language_id: Optional[int] = Field(
        None, description='The ID of the language the notifications are sent in'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the activity is active or not'
    )
    update_time: Optional[str] = Field(
        None,
        description='The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_user_id: Optional[int] = Field(
        None, description='The ID of the user who was the last to update this activity'
    )
    gcal_event_id: Optional[str] = Field(
        None,
        description='For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_id: Optional[str] = Field(
        None,
        description='The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    google_calendar_etag: Optional[str] = Field(
        None,
        description='The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.',
    )
    calendar_sync_include_context: Optional[str] = Field(
        None,
        description='For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)',
    )
    source_timezone: Optional[str] = Field(
        None,
        description='The timezone the activity was created in an external calendar',
    )
    rec_rule: Optional[str] = Field(
        None,
        description='The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"',
    )
    rec_rule_extension: Optional[str] = Field(
        None,
        description='Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.',
    )
    rec_master_activity_id: Optional[int] = Field(
        None,
        description='The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules',
    )
    series: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`',
    )
    created_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who created the activity'
    )
    location_subpremise: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates apartment/suite number.',
    )
    location_street_number: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates house number.'
    )
    location_route: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates street name.'
    )
    location_sublocality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates district/sublocality.',
    )
    location_locality: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates city/town/village/locality.',
    )
    location_admin_area_level_1: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates state/county.'
    )
    location_admin_area_level_2: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates region.'
    )
    location_country: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates country.'
    )
    location_postal_code: Optional[str] = Field(
        None, description='A subfield of the location field. Indicates ZIP/postal code.'
    )
    location_formatted_address: Optional[str] = Field(
        None,
        description='A subfield of the location field. Indicates full/combined address.',
    )
    org_name: Optional[str] = Field(
        None,
        description='The name of the organization this activity is associated with',
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person this activity is associated with'
    )
    deal_title: Optional[str] = Field(
        None, description='The name of the deal this activity is associated with'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the user this activity is owned by'
    )
    person_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the person'
    )
    deal_dropbox_bcc: Optional[str] = Field(
        None, description='The BCC email address of the deal'
    )
    assigned_to_user_id: Optional[int] = Field(
        None,
        description='The ID of the user to whom the activity is assigned to. Equal to `user_id`.',
    )
    file: Optional[Dict[str, Any]] = Field(
        None,
        description='The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.',
    )


class Data141(BaseModel):
    item: Optional[Item11] = None
    id: Optional[int] = None
    data: Optional[Data142] = Field(None, title='activityResponseObject')


class Item12(Enum):
    activityType = 'activityType'


class Data144(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the activity type')
    name: Optional[str] = Field(None, description='The name of the activity type')
    icon_key: Optional[IconKey] = Field(
        None, description='Icon graphic to use for representing this activity type'
    )
    color: Optional[str] = Field(
        None,
        description='A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)',
    )
    order_nr: Optional[int] = Field(
        None,
        description='An order number for the activity type. Order numbers should be used to order the types in the activity type selections.',
    )
    key_string: Optional[str] = Field(
        None,
        description='A string that is generated by the API based on the given name of the activity type upon creation',
    )
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the activity type'
    )
    is_custom_flag: Optional[bool] = Field(
        None, description='Whether the activity type is a custom one or not'
    )
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the activity type'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the activity type'
    )


class Data143(BaseModel):
    item: Optional[Item12] = None
    id: Optional[int] = None
    data: Optional[Data144] = None


class Item13(Enum):
    deal = 'deal'


class Data146(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class Data145(BaseModel):
    item: Optional[Item13] = None
    id: Optional[int] = None
    data: Optional[Data146] = Field(None, title='dealStrict')


class Item14(Enum):
    file = 'file'


class Data148(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the file')
    user_id: Optional[int] = Field(
        None, description='The ID of the user to associate the file with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal to associate the file with'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person to associate the file with'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization to associate the file with'
    )
    product_id: Optional[int] = Field(
        None, description='The ID of the product to associate the file with'
    )
    activity_id: Optional[int] = Field(
        None, description='The ID of the activity to associate the file with'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead to associate the file with'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS',
    )
    file_name: Optional[str] = Field(None, description='The original name of the file')
    file_size: Optional[int] = Field(None, description='The size of the file')
    active_flag: Optional[bool] = Field(
        None,
        description='Whether the user is active or not. false = Not activated, true = Activated',
    )
    inline_flag: Optional[bool] = Field(
        None, description='Whether the file was uploaded as inline or not'
    )
    remote_location: Optional[str] = Field(
        None,
        description='The location type to send the file to. Only googledrive is supported at the moment.',
    )
    remote_id: Optional[str] = Field(None, description='The ID of the remote item')
    cid: Optional[str] = Field(None, description='The ID of the inline attachment')
    s3_bucket: Optional[str] = Field(
        None, description='The location of the cloud storage'
    )
    mail_message_id: Optional[str] = Field(
        None, description='The ID of the mail message to associate the file with'
    )
    mail_template_id: Optional[str] = Field(
        None, description='The ID of the mail template to associate the file with'
    )
    deal_name: Optional[str] = Field(
        None, description='The name of the deal associated with the dile'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the file'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the file'
    )
    product_name: Optional[str] = Field(
        None, description='The name of the product associated with the file'
    )
    lead_name: Optional[str] = Field(
        None, description='The name of the lead associated with the file'
    )
    url: Optional[str] = Field(None, description='The URL of the download file')
    name: Optional[str] = Field(None, description='The visible name of the file')
    description: Optional[str] = Field(None, description='The description of the file')


class Data147(BaseModel):
    item: Optional[Item14] = None
    id: Optional[int] = None
    data: Optional[Data148] = Field(None, description='The file data')


class Item15(Enum):
    filter = 'filter'


class Data150(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the filter')
    name: Optional[str] = Field(None, description='The name of the filter')
    active_flag: Optional[bool] = Field(
        None, description='The active flag of the filter'
    )
    type: Optional[str] = Field(None, description='The type of the item')
    user_id: Optional[int] = Field(None, description='The owner of the filter')
    add_time: Optional[str] = Field(
        None, description='The date and time when the filter was added'
    )
    update_time: Optional[str] = Field(
        None, description='The date and time when the filter was updated'
    )
    visible_to: Optional[int] = Field(
        None, description='The visibility group ID of who can see then filter'
    )
    custom_view_id: Optional[int] = Field(None, description='Used by Pipedrive webapp')


class Data149(BaseModel):
    item: Optional[Item15] = None
    id: Optional[int] = None
    data: Optional[Data150] = Field(None, description='The filter object')


class Item16(Enum):
    note = 'note'


class Deal18(BaseModel):
    title: Optional[str] = Field(
        None, description='The title of the deal this note is attached to'
    )


class Organization40(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the organization the note is attached to'
    )


class Person27(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the person the note is attached to'
    )


class User37(BaseModel):
    email: Optional[str] = Field(None, description='The email of the note creator')
    icon_url: Optional[str] = Field(
        None, description='The URL of the note creator avatar picture'
    )
    is_you: Optional[bool] = Field(
        None, description='Whether the note is created by you or not'
    )
    name: Optional[str] = Field(None, description='The name of the note creator')


class Data152(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the note')
    active_flag: Optional[bool] = Field(
        None, description='Whether the note is active or deleted'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the note'
    )
    content: Optional[str] = Field(
        None,
        description='The content of the note in HTML format. Subject to sanitization on the back-end.',
    )
    deal: Optional[Deal18] = Field(
        None, description='The deal this note is attached to'
    )
    lead_id: Optional[UUID] = Field(
        None, description='The ID of the lead the note is attached to'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal the note is attached to'
    )
    last_update_user_id: Optional[int] = Field(
        None, description='The ID of the user who last updated the note'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization the note is attached to'
    )
    organization: Optional[Organization40] = Field(
        None, description='The organization the note is attached to'
    )
    person: Optional[Person27] = Field(
        None, description='The person the note is attached to'
    )
    person_id: Optional[int] = Field(
        None, description='The ID of the person the note is attached to'
    )
    pinned_to_deal_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to deal pinning state',
    )
    pinned_to_organization_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to organization pinning state',
    )
    pinned_to_person_flag: Optional[bool] = Field(
        None,
        description='If true, the results are filtered by note to person pinning state',
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the note'
    )
    user: Optional[User37] = Field(None, description='The user who created the note')
    user_id: Optional[int] = Field(None, description='The ID of the note creator')


class Data151(BaseModel):
    item: Optional[Item16] = None
    id: Optional[int] = None
    data: Optional[Data152] = None


class Item17(Enum):
    person = 'person'


class PhoneItem40(BaseModel):
    value: Optional[str] = Field(None, description='The phone number')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if phone number is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)',
    )


class EmailItem40(BaseModel):
    value: Optional[str] = Field(None, description='Email')
    primary: Optional[bool] = Field(
        None,
        description='Boolean that indicates if email is primary for the person or not',
    )
    label: Optional[str] = Field(
        None,
        description='The label that indicates the type of the email. (Possible values - work, home or other)',
    )


class PictureId13(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data154(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the person')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the person'
    )
    active_flag: Optional[bool] = Field(
        None, description='Whether the person is active or not'
    )
    phone: Optional[List[PhoneItem40]] = Field(
        None,
        description='A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.',
    )
    email: Optional[List[EmailItem40]] = Field(
        None,
        description='An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.',
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the name of the person'
    )
    add_time: Optional[str] = Field(
        None,
        description='The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS',
    )
    update_time: Optional[str] = Field(
        None,
        description='The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS',
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the person'
    )
    picture_id: Optional[PictureId13] = None
    label: Optional[int] = Field(None, description='The label assigned to the person')
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the person'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the owner associated with the person'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the person'
    )
    owner_id: Optional[int] = Field(
        None, description='The ID of the owner related to the person'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization related to the person'
    )
    merge_what_id: Optional[int] = Field(
        None, description='The ID of the person with what the main person was merged'
    )
    name: Optional[str] = Field(None, description='The name of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    last_name: Optional[str] = Field(None, description='The last name of the person')
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the person'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the person'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the person'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the person'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the person'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the person'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the person'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the person',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the person',
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    participant_open_deals_count: Optional[int] = Field(
        None, description='The count of open participant deals related with the item'
    )
    participant_closed_deals_count: Optional[int] = Field(
        None, description='The count of closed participant deals related with the item'
    )


class Data153(BaseModel):
    item: Optional[Item17] = None
    id: Optional[int] = None
    data: Optional[Data154] = Field(None, title='mergePersonItem')


class Item18(Enum):
    organization = 'organization'


class PictureId14(BaseModel):
    value: Optional[int] = Field(
        None, description='The ID of the picture associated with the item'
    )
    item_type: Optional[str] = Field(
        None, description='The type of item the picture is related to'
    )
    item_id: Optional[int] = Field(None, description='The ID of related item')
    active_flag: Optional[bool] = Field(
        None, description='Whether the associated picture is active or not'
    )
    add_time: Optional[str] = Field(None, description='The add time of the picture')
    update_time: Optional[str] = Field(
        None, description='The update time of the picture'
    )
    added_by_user_id: Optional[int] = Field(
        None, description='The ID of the user who added the picture'
    )
    pictures: Optional[Pictures] = None


class Data156(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the organization')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the organization'
    )
    owner_id: Optional[OwnerId] = Field(None, title='owner')
    name: Optional[str] = Field(None, description='The name of the organization')
    active_flag: Optional[bool] = Field(
        None, description='Whether the organization is active or not'
    )
    picture_id: Optional[PictureId14] = None
    country_code: Optional[str] = Field(
        None, description='The country code of the organization'
    )
    first_char: Optional[str] = Field(
        None, description='The first character of the organization name'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the organization'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the organization'
    )
    visible_to: Optional[str] = Field(
        None, description='The visibility group ID of who can see the organization'
    )
    label: Optional[int] = Field(
        None, description='The label assigned to the organization'
    )
    owner_name: Optional[str] = Field(
        None, description='The name of the organization owner'
    )
    cc_email: Optional[str] = Field(
        None, description='The BCC email associated with the organization'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The count of email messages related to the organization'
    )
    people_count: Optional[int] = Field(
        None, description='The count of persons related to the organization'
    )
    activities_count: Optional[int] = Field(
        None, description='The count of activities related to the organization'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The count of done activities related to the organization'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The count of undone activities related to the organization'
    )
    files_count: Optional[int] = Field(
        None, description='The count of files related to the organization'
    )
    notes_count: Optional[int] = Field(
        None, description='The count of notes related to the organization'
    )
    followers_count: Optional[int] = Field(
        None, description='The count of followers related to the organization'
    )
    address: Optional[str] = Field(
        None, description='The full address of the organization'
    )
    address_subpremise: Optional[str] = Field(
        None, description='The sub-premise of the organization location'
    )
    address_street_number: Optional[str] = Field(
        None, description='The street number of the organization location'
    )
    address_route: Optional[str] = Field(
        None, description='The route of the organization location'
    )
    address_sublocality: Optional[str] = Field(
        None, description='The sub-locality of the organization location'
    )
    address_locality: Optional[str] = Field(
        None, description='The locality of the organization location'
    )
    address_admin_area_level_1: Optional[str] = Field(
        None, description='The level 1 admin area of the organization location'
    )
    address_admin_area_level_2: Optional[str] = Field(
        None, description='The level 2 admin area of the organization location'
    )
    address_country: Optional[str] = Field(
        None, description='The country of the organization location'
    )
    address_postal_code: Optional[str] = Field(
        None, description='The postal code of the organization location'
    )
    address_formatted_address: Optional[str] = Field(
        None, description='The formatted organization location'
    )
    open_deals_count: Optional[int] = Field(
        None, description='The count of open deals related with the item'
    )
    related_open_deals_count: Optional[int] = Field(
        None, description='The count of related open deals related with the item'
    )
    closed_deals_count: Optional[int] = Field(
        None, description='The count of closed deals related with the item'
    )
    related_closed_deals_count: Optional[int] = Field(
        None, description='The count of related closed deals related with the item'
    )
    won_deals_count: Optional[int] = Field(
        None, description='The count of won deals related with the item'
    )
    related_won_deals_count: Optional[int] = Field(
        None, description='The count of related won deals related with the item'
    )
    lost_deals_count: Optional[int] = Field(
        None, description='The count of lost deals related with the item'
    )
    related_lost_deals_count: Optional[int] = Field(
        None, description='The count of related lost deals related with the item'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )


class Data155(BaseModel):
    item: Optional[Item18] = None
    id: Optional[int] = None
    data: Optional[Data156] = Field(None, title='baseOrganizationItem')


class Item19(Enum):
    pipeline = 'pipeline'


class Data158(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the pipeline')
    name: Optional[str] = Field(None, description='The name of the pipeline')
    url_title: Optional[str] = Field(
        None, description='The pipeline title displayed in the URL'
    )
    order_nr: Optional[int] = Field(
        None,
        description='Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether this pipeline will be made inactive (hidden) or active',
    )
    deal_probability: Optional[bool] = Field(
        None,
        description='Whether deal probability is disabled or enabled for this pipeline',
    )
    add_time: Optional[str] = Field(
        None, description='The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The pipeline update time. Format: YYYY-MM-DD HH:MM:SS.'
    )


class Data157(BaseModel):
    item: Optional[Item19] = None
    id: Optional[int] = None
    data: Optional[Data158] = None


class Item20(Enum):
    product = 'product'


class Data160(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the product')
    name: Optional[str] = Field(None, description='The name of the product')
    code: Optional[str] = Field(None, description='The product code')
    description: Optional[str] = Field(
        None, description='The description of the product'
    )
    unit: Optional[str] = Field(
        None, description='The unit in which this product is sold'
    )
    tax: Optional[float] = Field(0, description='The tax percentage')
    category: Optional[str] = Field(None, description='The category of the product')
    active_flag: Optional[bool] = Field(
        None, description='Whether this product will be made active or not'
    )
    selectable: Optional[bool] = Field(
        None, description='Whether this product can be selected in deals or not'
    )
    first_char: Optional[str] = Field(
        None, description='The first letter of the product name'
    )
    visible_to: Optional[int] = Field(
        None,
        description='The visibility of the product. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.',
    )
    owner_id: Optional[int] = Field(
        None,
        description='The ID of the user who will be marked as the owner of this product. When omitted, authorized user ID will be used.',
    )
    files_count: Optional[int] = Field(None, description='The count of files')
    add_time: Optional[str] = Field(
        None, description='The date and time when the product was added to the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The date and time when the product was updated to the deal'
    )
    prices: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="Array of objects, each containing: `currency` (string), `price` (number), `cost` (number, optional), `overhead_cost` (number, optional). Note that there can only be one price per product per currency. When `prices` is omitted altogether, a default price of 0 and a default currency based on the company's currency will be assigned.",
    )


class Data159(BaseModel):
    item: Optional[Item20] = None
    id: Optional[int] = None
    data: Optional[Data160] = None


class Item21(Enum):
    stage = 'stage'


class Data162(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the stage')
    order_nr: Optional[int] = Field(None, description='Defines the order of the stage')
    name: Optional[str] = Field(None, description='The name of the stage')
    active_flag: Optional[bool] = Field(
        None, description='Whether the stage is active or deleted'
    )
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when the deal weighted values are used.',
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline to add the stage to'
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )
    add_time: Optional[str] = Field(
        None, description='The stage creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The stage update time. Format: YYYY-MM-DD HH:MM:SS.'
    )


class Data161(BaseModel):
    item: Optional[Item21] = None
    id: Optional[int] = None
    data: Optional[Data162] = None


class Item22(Enum):
    user = 'user'


class Acces(BaseModel):
    app: Optional[App] = None
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class Data164(BaseModel):
    id: Optional[int] = Field(None, description='The user ID')
    name: Optional[str] = Field(None, description='The user name')
    default_currency: Optional[str] = Field(
        None, description='The user default currency'
    )
    locale: Optional[str] = Field(None, description='The user locale')
    lang: Optional[int] = Field(None, description='The user language ID')
    email: Optional[str] = Field(None, description='The user email')
    phone: Optional[str] = Field(None, description='The user phone')
    activated: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    last_login: Optional[str] = Field(
        None,
        description='The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    created: Optional[str] = Field(
        None,
        description='The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    modified: Optional[str] = Field(
        None,
        description='The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    has_created_company: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user has created a company',
    )
    access: Optional[List[Acces]] = None
    active_flag: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    timezone_name: Optional[str] = Field(None, description='The user timezone name')
    timezone_offset: Optional[str] = Field(None, description='The user timezone offset')
    role_id: Optional[int] = Field(None, description='The ID of the user role')
    icon_url: Optional[str] = Field(None, description='The user icon URL')
    is_you: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the requested user is the same which is logged in (in this case, always true)',
    )
    is_deleted: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user is deleted from the company',
    )


class Data163(BaseModel):
    item: Optional[Item22] = None
    id: Optional[int] = None
    data: Optional[Data164] = None


class Pagination17(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class AdditionalData71(BaseModel):
    since_timestamp: Optional[str] = Field(
        None, description='The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS'
    )
    last_timestamp_on_page: Optional[str] = Field(
        None, description='The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS'
    )
    pagination: Optional[Pagination17] = Field(
        None, description='The additional data of the list'
    )


class RecentsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[
        List[
            Union[
                Data141,
                Data143,
                Data145,
                Data147,
                Data149,
                Data151,
                Data153,
                Data155,
                Data157,
                Data159,
                Data161,
                Data163,
            ]
        ]
    ] = None
    additional_data: Optional[AdditionalData71] = None


class Datum72(BaseModel):
    parent_role_id: Optional[int] = Field(None, description='The ID of the parent role')
    name: Optional[str] = Field(None, description='The name of the role')
    id: Optional[int] = Field(None, description='The ID of the role')
    active_flag: Optional[bool] = Field(
        None, description='Whether the role is active or not'
    )
    assignment_count: Optional[str] = Field(
        None, description='The number of users assigned to this role'
    )
    sub_role_count: Optional[str] = Field(None, description='The number of sub-roles')
    level: Optional[int] = Field(
        None, description='The level of role in the role hierarchy'
    )


class Pagination18(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='Whether there are more list items in the collection than displayed',
    )


class AdditionalData72(BaseModel):
    pagination: Optional[Pagination18] = Field(
        None, description='The pagination details in the role list'
    )


class RolesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum72]] = Field(None, description='The array of roles')
    additional_data: Optional[AdditionalData72] = Field(
        None, description='The additional data in the role list'
    )


class RolesPostRequest(BaseModel):
    name: str = Field(..., description='The name of the role')
    parent_role_id: Optional[int] = Field(None, description='The ID of the parent role')


class Data165(BaseModel):
    id: Optional[Id] = Field(None, description='The ID of the created role')


class RolesPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data165] = Field(None, description='The response data')


class Data166(BaseModel):
    id: Optional[Id] = Field(None, description='The ID of the deleted role')


class RolesIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data166] = Field(None, description='The response data')


class Data167(BaseModel):
    parent_role_id: Optional[int] = Field(None, description='The ID of the parent role')
    name: Optional[str] = Field(None, description='The name of the role')
    id: Optional[int] = Field(None, description='The ID of the role')
    active_flag: Optional[bool] = Field(
        None, description='Whether the role is active or not'
    )
    assignment_count: Optional[str] = Field(
        None, description='The number of users assigned to this role'
    )
    sub_role_count: Optional[str] = Field(None, description='The number of sub-roles')


class Settings(BaseModel):
    deal_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the deals for the role'
    )
    lead_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the leads for the role'
    )
    org_default_visibility: Optional[float] = Field(
        None,
        description='The default visibility level of the organizations for the role',
    )
    person_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the people for the role'
    )
    product_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the products for the role'
    )
    deal_access_level: Optional[float] = Field(
        None,
        description='The access level of the deals for the role (only for default role)',
    )
    org_access_level: Optional[float] = Field(
        None,
        description='The access level of the organizations for the role (only for default role)',
    )
    person_access_level: Optional[float] = Field(
        None,
        description='The access level of the people for the role (only for default role)',
    )
    product_access_level: Optional[float] = Field(
        None,
        description='The access level of the products for the role (only for default role)',
    )


class AdditionalData73(BaseModel):
    settings: Optional[Settings] = Field(None, description='The settings for the role')


class RolesIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data167] = Field(
        None, description='The details of the sub-role', title='subRole'
    )
    additional_data: Optional[AdditionalData73] = Field(
        None, description='The additional data in the role'
    )


class RolesIdPutRequest(BaseModel):
    parent_role_id: Optional[int] = Field(None, description='The ID of the parent role')
    name: Optional[str] = Field(None, description='The name of the role')


class Data168(BaseModel):
    id: Optional[Id] = Field(None, description='The ID of the updated role')


class RolesIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data168] = Field(None, description='The response data')


class RolesIdAssignmentsDeleteRequest(BaseModel):
    user_id: int = Field(..., description='The ID of the user')


class Data169(BaseModel):
    id: Optional[Id] = Field(
        None, description='The ID of the role the user was removed from'
    )


class RolesIdAssignmentsDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data169] = Field(None, description='The response data')


class Datum73(BaseModel):
    parent_role_id: Optional[int] = Field(None, description='The ID of the parent role')
    name: Optional[str] = Field(None, description='The name of the role')
    user_id: Optional[int] = Field(None, description='The user ID')
    role_id: Optional[int] = Field(None, description='The role ID')
    active_flag: Optional[bool] = Field(
        None, description='Whether the role is active or not'
    )
    type: Optional[str] = Field(None, description='The assignment type')


class AdditionalData74(BaseModel):
    pagination: Optional[Pagination18] = Field(
        None, description='The pagination details in the role list'
    )


class RolesIdAssignmentsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum73]] = Field(None, description='The role assignments')
    additional_data: Optional[AdditionalData74] = Field(
        None, description='The additional data in the role list'
    )


class RolesIdAssignmentsPostRequest(BaseModel):
    user_id: int = Field(..., description='The ID of the user')


class Data170(BaseModel):
    user_id: Optional[int] = Field(
        None, description='The ID of the user that was added to the role'
    )
    role_id: Optional[int] = Field(
        None, description='The ID of the role the user was added to'
    )


class RolesIdAssignmentsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data170] = Field(None, description='The response data')


class Data171(BaseModel):
    deal_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the deals for the role'
    )
    lead_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the leads for the role'
    )
    org_default_visibility: Optional[float] = Field(
        None,
        description='The default visibility level of the organizations for the role',
    )
    person_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the people for the role'
    )
    product_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the products for the role'
    )
    deal_access_level: Optional[float] = Field(
        None,
        description='The access level of the deals for the role (only for default role)',
    )
    org_access_level: Optional[float] = Field(
        None,
        description='The access level of the organizations for the role (only for default role)',
    )
    person_access_level: Optional[float] = Field(
        None,
        description='The access level of the people for the role (only for default role)',
    )
    product_access_level: Optional[float] = Field(
        None,
        description='The access level of the products for the role (only for default role)',
    )


class RolesIdSettingsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data171] = Field(None, description='The settings for the role')


class SettingKey(Enum):
    deal_default_visibility = 'deal_default_visibility'
    lead_default_visibility = 'lead_default_visibility'
    org_default_visibility = 'org_default_visibility'
    person_default_visibility = 'person_default_visibility'
    product_default_visibility = 'product_default_visibility'


class Value6(Enum):
    integer_1 = 1
    integer_3 = 3
    integer_5 = 5
    integer_7 = 7


class RolesIdSettingsPostRequest(BaseModel):
    setting_key: SettingKey
    value: Value6 = Field(
        ...,
        description="Possible values for the `default_visibility` setting depending on the subscription plan:<br> <table class='role-setting'> <caption><b>Essential / Advanced plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner & Followers</td></tr> <tr><td>`3`</td><td>Entire company</td></tr> </table> <br> <table class='role-setting'> <caption><b>Professional / Enterprise plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner only</td></tr> <tr><td>`3`</td><td>Owner&#39;s visibility group</td></tr> <tr><td>`5`</td><td>Owner&#39;s visibility group and sub-groups</td></tr> <tr><td>`7`</td><td>Entire company</td></tr> </table> <br> Read more about visibility groups <a href='https://support.pipedrive.com/en/article/visibility-groups'>here</a>.",
    )


class DealDefaultVisibility(Enum):
    number_1 = 1
    number_3 = 3
    number_5 = 5
    number_7 = 7


class Data172(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the role')
    deal_default_visibility: Optional[DealDefaultVisibility] = Field(
        None, description='The setting'
    )


class RolesIdSettingsPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data172] = Field(None, description='The response data')


class Data173(BaseModel):
    pipeline_ids: Optional[List[float]] = Field(
        None, description='Either visible or hidden pipeline ids'
    )
    visible: Optional[bool] = Field(
        None, description='Whether visible or hidden pipeline ids were returned'
    )


class RolesIdPipelinesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data173] = Field(None, description='The response data')


class RolesIdPipelinesPutRequest(BaseModel):
    visible_pipeline_ids: Dict[str, Any] = Field(
        ...,
        description='The pipeline IDs to make the pipelines visible (add) and/or hidden (remove) for the specified role. It requires the following JSON structure: `{ "add": "[1]", "remove": "[3, 4]" }`.',
    )


class RolesIdPipelinesPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data173] = Field(None, description='The response data')


class Data175(BaseModel):
    id: Optional[List[int]] = Field(None, description='The list of deleted stage IDs')


class StagesDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data175] = None


class Datum74(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the stage')
    order_nr: Optional[int] = Field(None, description='Defines the order of the stage')
    name: Optional[str] = Field(None, description='The name of the stage')
    active_flag: Optional[bool] = Field(
        None, description='Whether the stage is active or deleted'
    )
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when the deal weighted values are used.',
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline to add the stage to'
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )
    add_time: Optional[str] = Field(
        None, description='The stage creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The stage update time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    pipeline_name: Optional[str] = Field(None, description='The name of the pipeline')
    pipeline_deal_probability: Optional[bool] = Field(
        None,
        description='The pipeline deal probability. When `true`, overrides the stage probability.',
    )


class StagesGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum74]] = Field(None, description='The array of stages')


class StagesPostRequest(BaseModel):
    name: str = Field(..., description='The name of the stage')
    pipeline_id: int = Field(..., description='The ID of the pipeline to add stage to')
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when deal weighted values are used.',
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )


class Data176(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the stage')
    order_nr: Optional[int] = Field(None, description='Defines the order of the stage')
    name: Optional[str] = Field(None, description='The name of the stage')
    active_flag: Optional[bool] = Field(
        None, description='Whether the stage is active or deleted'
    )
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when the deal weighted values are used.',
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline to add the stage to'
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )
    add_time: Optional[str] = Field(
        None, description='The stage creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The stage update time. Format: YYYY-MM-DD HH:MM:SS.'
    )


class StagesPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data176] = Field(None, description='Updated stage object')


class Data177(BaseModel):
    id: Optional[int] = Field(None, description='Deleted stage ID')


class StagesIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data177] = None


class CURRENCYID2(BaseModel):
    count: Optional[int] = Field(None, description='Deals count per currency')
    value: Optional[int] = Field(None, description='Deals value per currency')
    value_formatted: Optional[str] = Field(
        None, description='Deals value formatted per currency'
    )
    weighted_value: Optional[int] = Field(
        None, description='Deals weighted value per currency'
    )
    weighted_value_formatted: Optional[str] = Field(
        None, description='Deals weighted value formatted per currency'
    )


class STAGEID1(BaseModel):
    CURRENCY_ID: Optional[CURRENCYID2] = Field(
        None,
        description='The currency summary. This parameter is dynamic and changes according to `currency_id` value.',
    )


class PerStages1(BaseModel):
    STAGE_ID: Optional[STAGEID1] = Field(
        None,
        description='The currency summaries per stage. This parameter is dynamic and changes according to `stage_id` value.',
    )


class CURRENCYID3(BaseModel):
    count: Optional[int] = Field(None, description='Deals count per currency')
    value: Optional[int] = Field(None, description='Deals value per currency')


class PerCurrencyFull1(BaseModel):
    CURRENCY_ID: Optional[CURRENCYID3] = Field(
        None,
        description='The currency summary. This parameter is dynamic and changes according to `currency_id` value.',
    )


class DealsSummary1(BaseModel):
    per_stages: Optional[PerStages1] = Field(
        None, description='The stage objects containing deals currency information'
    )
    per_currency: Optional[PerCurrency] = Field(
        None, description='The currency count summary'
    )
    total_count: Optional[int] = Field(None, description='Deals count')
    per_currency_full: Optional[PerCurrencyFull1] = Field(
        None, description='Full currency summaries'
    )


class Data178(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the stage')
    order_nr: Optional[int] = Field(None, description='Defines the order of the stage')
    name: Optional[str] = Field(None, description='The name of the stage')
    active_flag: Optional[bool] = Field(
        None, description='Whether the stage is active or deleted'
    )
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when the deal weighted values are used.',
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline to add the stage to'
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )
    add_time: Optional[str] = Field(
        None, description='The stage creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The stage update time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    deals_summary: Optional[DealsSummary1] = Field(None, description='Deals summary')


class StagesIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data178] = Field(None, description='The stage object')


class StagesIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='The name of the stage')
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline to add stage to'
    )
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when deal weighted values are used.',
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )
    order_nr: Optional[int] = Field(
        None,
        description='An order number for this stage. Order numbers should be used to order the stages in the pipeline.',
    )


class Data179(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the stage')
    order_nr: Optional[int] = Field(None, description='Defines the order of the stage')
    name: Optional[str] = Field(None, description='The name of the stage')
    active_flag: Optional[bool] = Field(
        None, description='Whether the stage is active or deleted'
    )
    deal_probability: Optional[int] = Field(
        None,
        description='The success probability percentage of the deal. Used/shown when the deal weighted values are used.',
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline to add the stage to'
    )
    rotten_flag: Optional[bool] = Field(
        None, description='Whether deals in this stage can become rotten'
    )
    rotten_days: Optional[int] = Field(
        None,
        description='The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.',
    )
    add_time: Optional[str] = Field(
        None, description='The stage creation time. Format: YYYY-MM-DD HH:MM:SS.'
    )
    update_time: Optional[str] = Field(
        None, description='The stage update time. Format: YYYY-MM-DD HH:MM:SS.'
    )


class StagesIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data179] = Field(None, description='Updated stage object')


class Datum75(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the deal')
    creator_user_id: Optional[int] = Field(
        None, description='The ID of the deal creator'
    )
    user_id: Optional[int] = Field(None, description='The ID of the user')
    person_id: Optional[int] = Field(
        None, description='The ID of the person associated with the deal'
    )
    org_id: Optional[int] = Field(
        None, description='The ID of the organization associated with the deal'
    )
    stage_id: Optional[int] = Field(None, description='The ID of the deal stage')
    title: Optional[str] = Field(None, description='The title of the deal')
    value: Optional[float] = Field(None, description='The value of the deal')
    currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    add_time: Optional[str] = Field(
        None, description='The creation date and time of the deal'
    )
    update_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal'
    )
    stage_change_time: Optional[str] = Field(
        None, description='The last updated date and time of the deal stage'
    )
    active: Optional[bool] = Field(
        None, description='Whether the deal is active or not'
    )
    deleted: Optional[bool] = Field(
        None, description='Whether the deal is deleted or not'
    )
    status: Optional[str] = Field(None, description='The status of the deal')
    probability: Optional[float] = Field(
        None, description='The success probability percentage of the deal'
    )
    next_activity_date: Optional[str] = Field(
        None, description='The date of the next activity associated with the deal'
    )
    next_activity_time: Optional[str] = Field(
        None, description='The time of the next activity associated with the deal'
    )
    next_activity_id: Optional[int] = Field(
        None, description='The ID of the next activity associated with the deal'
    )
    last_activity_id: Optional[int] = Field(
        None, description='The ID of the last activity associated with the deal'
    )
    last_activity_date: Optional[str] = Field(
        None, description='The date of the last activity associated with the deal'
    )
    lost_reason: Optional[str] = Field(
        None, description='The reason for losing the deal'
    )
    visible_to: Optional[str] = Field(None, description='The visibility of the deal')
    close_time: Optional[str] = Field(
        None, description='The date and time of closing the deal'
    )
    pipeline_id: Optional[int] = Field(
        None, description='The ID of the pipeline associated with the deal'
    )
    won_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as won'
    )
    first_won_time: Optional[str] = Field(
        None,
        description='The date and time of the first time changing the deal status as won',
    )
    lost_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as lost'
    )
    products_count: Optional[int] = Field(
        None, description='The number of products associated with the deal'
    )
    files_count: Optional[int] = Field(
        None, description='The number of files associated with the deal'
    )
    notes_count: Optional[int] = Field(
        None, description='The number of notes associated with the deal'
    )
    followers_count: Optional[int] = Field(
        None, description='The number of followers associated with the deal'
    )
    email_messages_count: Optional[int] = Field(
        None, description='The number of emails associated with the deal'
    )
    activities_count: Optional[int] = Field(
        None, description='The number of activities associated with the deal'
    )
    done_activities_count: Optional[int] = Field(
        None, description='The number of completed activities associated with the deal'
    )
    undone_activities_count: Optional[int] = Field(
        None, description='The number of incomplete activities associated with the deal'
    )
    participants_count: Optional[int] = Field(
        None, description='The number of participants associated with the deal'
    )
    expected_close_date: Optional[date] = Field(
        None, description='The expected close date of the deal'
    )
    last_incoming_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last incoming email associated with the deal',
    )
    last_outgoing_mail_time: Optional[str] = Field(
        None,
        description='The date and time of the last outgoing email associated with the deal',
    )
    label: Optional[str] = Field(
        None, description='The label or multiple labels assigned to the deal'
    )
    stage_order_nr: Optional[int] = Field(
        None, description='The order number of the deal stage associated with the deal'
    )
    person_name: Optional[str] = Field(
        None, description='The name of the person associated with the deal'
    )
    org_name: Optional[str] = Field(
        None, description='The name of the organization associated with the deal'
    )
    next_activity_subject: Optional[str] = Field(
        None, description='The subject of the next activity associated with the deal'
    )
    next_activity_type: Optional[str] = Field(
        None, description='The type of the next activity associated with the deal'
    )
    next_activity_duration: Optional[str] = Field(
        None, description='The duration of the next activity associated with the deal'
    )
    next_activity_note: Optional[str] = Field(
        None, description='The note of the next activity associated with the deal'
    )
    formatted_value: Optional[str] = Field(
        None, description='The deal value formatted with selected currency. E.g. US$500'
    )
    weighted_value: Optional[float] = Field(
        None,
        description='Probability times deal value. Probability can either be deal probability or if not set, then stage probability.',
    )
    formatted_weighted_value: Optional[str] = Field(
        None,
        description='The weighted_value formatted with selected currency. E.g. US$500',
    )
    weighted_value_currency: Optional[str] = Field(
        None, description='The currency associated with the deal'
    )
    rotten_time: Optional[str] = Field(
        None, description='The date and time of changing the deal status as rotten'
    )
    owner_name: Optional[str] = Field(None, description='The name of the deal owner')
    cc_email: Optional[str] = Field(None, description='The BCC email of the deal')
    org_hidden: Optional[bool] = Field(
        None,
        description='If the organization that is associated with the deal is hidden or not',
    )
    person_hidden: Optional[bool] = Field(
        None,
        description='If the person that is associated with the deal is hidden or not',
    )


class AdditionalData75(BaseModel):
    start: Optional[int] = Field(None, description='Pagination start')
    limit: Optional[int] = Field(None, description='Items shown per page')
    more_items_in_collection: Optional[bool] = Field(
        None,
        description='If there are more list items in the collection than displayed or not',
    )


class StagesIdDealsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[List[Datum75]] = Field(None, description='The array of deals')
    additional_data: Optional[AdditionalData75] = Field(
        None, description='The additional data of the list'
    )


class Data180(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the subscription')
    user_id: Optional[int] = Field(
        None, description='The ID of the user who created the subscription'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this subscription is associated with'
    )
    description: Optional[str] = Field(
        None, description='The description of the recurring subscription'
    )
    is_active: Optional[bool] = Field(None, description='The subscription status')
    cycles_count: Optional[int] = Field(
        None, description='Shows how many payments a recurring subscription has'
    )
    cycle_amount: Optional[int] = Field(None, description='The amount of each payment')
    infinite: Optional[bool] = Field(
        None,
        description='Indicates that the recurring subscription will last until it is manually canceled or deleted',
    )
    currency: Optional[str] = Field(
        None, description='The currency of the subscription'
    )
    cadence_type: Optional[str] = Field(
        None, description='The interval between payments'
    )
    start_date: Optional[date] = Field(
        None, description='The start date of the recurring subscription'
    )
    end_date: Optional[date] = Field(
        None, description='The end date of the subscription'
    )
    lifetime_value: Optional[float] = Field(
        None, description='The total value of all payments'
    )
    final_status: Optional[str] = Field(
        None, description='The final status of the subscription'
    )
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the subscription'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the subscription'
    )


class SubscriptionsIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class SubscriptionsIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class SubscriptionsFindDealIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class RevenueMovementType(Enum):
    new = 'new'
    recurring = 'recurring'
    expansion = 'expansion'
    contraction = 'contraction'
    none = 'none'
    churn = 'churn'


class PaymentType(Enum):
    recurring = 'recurring'
    additional = 'additional'
    installment = 'installment'


class Datum76(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the payment')
    subscription_id: Optional[int] = Field(
        None, description='The ID of the subscription this payment is associated with'
    )
    deal_id: Optional[int] = Field(
        None, description='The ID of the deal this payment is associated with'
    )
    is_active: Optional[bool] = Field(None, description='The payment status')
    amount: Optional[float] = Field(None, description='The payment amount')
    currency: Optional[str] = Field(None, description='The currency of the payment')
    change_amount: Optional[float] = Field(
        None,
        description='The difference between the amount of the current payment and the previous payment. The value can be either positive or negative.',
    )
    due_at: Optional[date] = Field(None, description='The date when payment occurs')
    revenue_movement_type: Optional[RevenueMovementType] = Field(
        None,
        description='Represents the movement of revenue in comparison with the previous payment. Possible values are: `New` - first payment of the subscription. `Recurring` - no movement. `Expansion` - current payment amount > previous payment amount. `Contraction` - current payment amount < previous payment amount. `Churn` - last payment of the subscription.',
    )
    payment_type: Optional[PaymentType] = Field(
        None,
        description='The type of the payment. Possible values are: `Recurring` - payments occur over fixed intervals of time, `Additional` - extra payment not the recurring payment of the recurring subscription, `Installment` - payment of the installment subscription.',
    )
    description: Optional[str] = Field(
        None, description='The description of the payment'
    )
    add_time: Optional[datetime] = Field(
        None, description='The creation time of the payment'
    )
    update_time: Optional[datetime] = Field(
        None, description='The update time of the payment'
    )


class SubscriptionsIdPaymentsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum76]] = None


class CadenceType(Enum):
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    yearly = 'yearly'


class SubscriptionsRecurringPostRequest(BaseModel):
    deal_id: int = Field(
        ...,
        description='The ID of the deal this recurring subscription is associated with',
    )
    currency: str = Field(
        ...,
        description='The currency of the recurring subscription. Accepts a 3-character currency code.',
    )
    description: Optional[str] = Field(
        None, description='The description of the recurring subscription'
    )
    cadence_type: CadenceType = Field(..., description='The interval between payments')
    cycles_count: Optional[int] = Field(
        None,
        description='Shows how many payments the subscription has. Note that one field must be set: `cycles_count` or `infinite`. If `cycles_count` is set, then `cycle_amount` and `start_date` are also required.',
    )
    cycle_amount: int = Field(..., description='The amount of each payment')
    start_date: date = Field(
        ...,
        description='The start date of the recurring subscription. Format: YYYY-MM-DD',
    )
    infinite: Optional[bool] = Field(
        None,
        description="This indicates that the recurring subscription will last until it's manually canceled or deleted. Note that only one field must be set: `cycles_count` or `infinite`.",
    )
    payments: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).',
    )
    update_deal_value: Optional[bool] = Field(
        None,
        description="Indicates that the deal value must be set to recurring subscription's MRR value",
    )


class SubscriptionsRecurringPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class SubscriptionsInstallmentPostRequest(BaseModel):
    deal_id: int = Field(
        ...,
        description='The ID of the deal this installment subscription is associated with',
    )
    currency: str = Field(
        ...,
        description='The currency of the installment subscription. Accepts a 3-character currency code.',
    )
    payments: List[Dict[str, Any]] = Field(
        ...,
        description='Array of payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).',
    )
    update_deal_value: Optional[bool] = Field(
        None,
        description="Indicates that the deal value must be set to the installment subscription's total value",
    )


class SubscriptionsInstallmentPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class SubscriptionsRecurringIdPutRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the recurring subscription'
    )
    cycle_amount: Optional[int] = Field(None, description='The amount of each payment')
    payments: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).',
    )
    update_deal_value: Optional[bool] = Field(
        None,
        description="Indicates that the deal value must be set to recurring subscription's MRR value",
    )
    effective_date: date = Field(
        ...,
        description='All payments after that date will be affected. Format: YYYY-MM-DD',
    )


class SubscriptionsRecurringIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class SubscriptionsInstallmentIdPutRequest(BaseModel):
    payments: List[Dict[str, Any]] = Field(
        ...,
        description='Array of payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with a explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).',
    )
    update_deal_value: Optional[bool] = Field(
        None,
        description="Indicates that the deal value must be set to installment subscription's total value",
    )


class SubscriptionsInstallmentIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class SubscriptionsRecurringIdCancelPutRequest(BaseModel):
    end_date: Optional[date] = Field(
        None,
        description='The subscription termination date. All payments after the specified date will be deleted. The end_date of the subscription will be set to the due date of the payment to follow the specified date. Default value is the current date.',
    )


class SubscriptionsRecurringIdCancelPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data180] = None


class Done7(Enum):
    number_0 = 0
    number_1 = 1


class Done8(BaseModel):
    pass


class Datum77(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the task, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the task')
    project_id: Optional[float] = Field(
        None, description='The ID of the project this task is associated with'
    )
    description: Optional[str] = Field(None, description='The description of the task')
    parent_task_id: Optional[float] = Field(
        None,
        description='The ID of a parent task. Can not be ID of a task which is already a subtask.',
    )
    assignee_id: Optional[float] = Field(
        None, description='The ID of the user who will be the assignee of the task'
    )
    done: Optional[Done8] = Field(
        None, description='Whether the task is done or not. 0 = Not done, 1 = Done.'
    )
    due_date: Optional[date] = Field(
        None, description='The due date of the task. Format: YYYY-MM-DD.'
    )
    creator_id: Optional[float] = Field(None, description='The creator of a task')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The marked as done date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class AdditionalData76(BaseModel):
    next_cursor: Optional[str] = Field(
        None,
        description='The first item on the next page. The value of the `next_cursor` field will be `null` if you have reached the end of the dataset and there’s no more pages to be returned.',
    )


class TasksGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[List[Datum77]] = None
    additional_data: Optional[AdditionalData76] = Field(
        None, description='The additional data of the list'
    )


class TasksPostRequest(BaseModel):
    title: str = Field(..., description='The title of the task')
    project_id: float = Field(..., description='The ID of a project')
    description: Optional[str] = Field(None, description='The description of the task')
    parent_task_id: Optional[float] = Field(
        None,
        description='The ID of a parent task. Can not be ID of a task which is already a subtask.',
    )
    assignee_id: Optional[float] = Field(
        None, description='The ID of the user who will be the assignee of the task'
    )
    done: Optional[Done8] = Field(
        None, description='Whether the task is done or not. 0 = Not done, 1 = Done.'
    )
    due_date: Optional[date] = Field(
        None, description='The due date of the task. Format: YYYY-MM-DD.'
    )


class Data188(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the task, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the task')
    project_id: Optional[float] = Field(
        None, description='The ID of the project this task is associated with'
    )
    description: Optional[str] = Field(None, description='The description of the task')
    parent_task_id: Optional[float] = Field(
        None,
        description='The ID of a parent task. Can not be ID of a task which is already a subtask.',
    )
    assignee_id: Optional[float] = Field(
        None, description='The ID of the user who will be the assignee of the task'
    )
    done: Optional[Done8] = Field(
        None, description='Whether the task is done or not. 0 = Not done, 1 = Done.'
    )
    due_date: Optional[date] = Field(
        None, description='The due date of the task. Format: YYYY-MM-DD.'
    )
    creator_id: Optional[float] = Field(None, description='The creator of a task')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The marked as done date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class TasksPostResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data188] = Field(None, title='taskResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class Data189(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the task, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the task')
    project_id: Optional[float] = Field(
        None, description='The ID of the project this task is associated with'
    )
    description: Optional[str] = Field(None, description='The description of the task')
    parent_task_id: Optional[float] = Field(
        None,
        description='The ID of a parent task. Can not be ID of a task which is already a subtask.',
    )
    assignee_id: Optional[float] = Field(
        None, description='The ID of the user who will be the assignee of the task'
    )
    done: Optional[Done8] = Field(
        None, description='Whether the task is done or not. 0 = Not done, 1 = Done.'
    )
    due_date: Optional[date] = Field(
        None, description='The due date of the task. Format: YYYY-MM-DD.'
    )
    creator_id: Optional[float] = Field(None, description='The creator of a task')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The marked as done date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class TasksIdGetResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data189] = Field(None, title='taskResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class TasksIdPutRequest(BaseModel):
    title: Optional[str] = Field(None, description='The title of the task')
    project_id: Optional[float] = Field(
        None, description='The ID of the project this task is associated with'
    )
    description: Optional[str] = Field(None, description='The description of the task')
    parent_task_id: Optional[float] = Field(
        None,
        description='The ID of a parent task. Can not be ID of a task which is already a subtask.',
    )
    assignee_id: Optional[float] = Field(
        None, description='The ID of the user who will be the assignee of the task'
    )
    done: Optional[Done8] = Field(
        None, description='Whether the task is done or not. 0 = Not done, 1 = Done.'
    )
    due_date: Optional[date] = Field(
        None, description='The due date of the task. Format: YYYY-MM-DD.'
    )


class Data190(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID of the task, generated when the task was created'
    )
    title: Optional[str] = Field(None, description='The title of the task')
    project_id: Optional[float] = Field(
        None, description='The ID of the project this task is associated with'
    )
    description: Optional[str] = Field(None, description='The description of the task')
    parent_task_id: Optional[float] = Field(
        None,
        description='The ID of a parent task. Can not be ID of a task which is already a subtask.',
    )
    assignee_id: Optional[float] = Field(
        None, description='The ID of the user who will be the assignee of the task'
    )
    done: Optional[Done8] = Field(
        None, description='Whether the task is done or not. 0 = Not done, 1 = Done.'
    )
    due_date: Optional[date] = Field(
        None, description='The due date of the task. Format: YYYY-MM-DD.'
    )
    creator_id: Optional[float] = Field(None, description='The creator of a task')
    add_time: Optional[str] = Field(
        None,
        description='The creation date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    update_time: Optional[str] = Field(
        None,
        description='The update date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )
    marked_as_done_time: Optional[str] = Field(
        None,
        description='The marked as done date and time of the task in UTC. Format: YYYY-MM-DD HH:MM:SS.',
    )


class TasksIdPutResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data190] = Field(None, title='taskResponseObject')
    additional_data: Optional[Dict[str, Any]] = None


class Data192(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the task that was deleted')


class Data191(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the request was successful or not'
    )
    data: Optional[Data192] = None


class TasksIdDeleteResponse(BaseModel):
    success: Optional[bool] = None
    data: Optional[Data191] = Field(None, title='deleteTask')
    additional_data: Optional[Dict[str, Any]] = None


class Acces1(BaseModel):
    app: Optional[App] = None
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class Datum78(BaseModel):
    id: Optional[int] = Field(None, description='The user ID')
    name: Optional[str] = Field(None, description='The user name')
    default_currency: Optional[str] = Field(
        None, description='The user default currency'
    )
    locale: Optional[str] = Field(None, description='The user locale')
    lang: Optional[int] = Field(None, description='The user language ID')
    email: Optional[str] = Field(None, description='The user email')
    phone: Optional[str] = Field(None, description='The user phone')
    activated: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    last_login: Optional[str] = Field(
        None,
        description='The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    created: Optional[str] = Field(
        None,
        description='The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    modified: Optional[str] = Field(
        None,
        description='The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    has_created_company: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user has created a company',
    )
    access: Optional[List[Acces1]] = None
    active_flag: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    timezone_name: Optional[str] = Field(None, description='The user timezone name')
    timezone_offset: Optional[str] = Field(None, description='The user timezone offset')
    role_id: Optional[int] = Field(None, description='The ID of the user role')
    icon_url: Optional[str] = Field(None, description='The user icon URL')
    is_you: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the requested user is the same which is logged in (in this case, always true)',
    )
    is_deleted: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user is deleted from the company',
    )


class UsersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum78]] = None


class Acces2(BaseModel):
    app: App
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class UsersPostRequest(BaseModel):
    email: str = Field(..., description='The email of the user')
    access: Optional[List[Acces2]] = Field(
        default_factory=lambda: [Acces2.parse_obj(v) for v in [{'app': 'sales'}]],
        description="The access given to the user. Each item in the array represents access to a specific app. Optionally may include either admin flag or permission set ID to specify which access to give within the app. If both are omitted, the default access for the corresponding app will be used. It requires structure as follows: `[{ app: 'sales', permission_set_id: '62cc4d7f-4038-4352-abf3-a8c1c822b631' }, { app: 'global', admin: true }, { app: 'account_settings' }]`\n",
    )
    active_flag: Optional[bool] = Field(
        True,
        description='Whether the user is active or not. `false` = Not activated, `true` = Activated',
    )


class Acces3(BaseModel):
    app: Optional[App] = None
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class Data193(BaseModel):
    id: Optional[int] = Field(None, description='The user ID')
    name: Optional[str] = Field(None, description='The user name')
    default_currency: Optional[str] = Field(
        None, description='The user default currency'
    )
    locale: Optional[str] = Field(None, description='The user locale')
    lang: Optional[int] = Field(None, description='The user language ID')
    email: Optional[str] = Field(None, description='The user email')
    phone: Optional[str] = Field(None, description='The user phone')
    activated: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    last_login: Optional[str] = Field(
        None,
        description='The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    created: Optional[str] = Field(
        None,
        description='The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    modified: Optional[str] = Field(
        None,
        description='The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    has_created_company: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user has created a company',
    )
    access: Optional[List[Acces3]] = None
    active_flag: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    timezone_name: Optional[str] = Field(None, description='The user timezone name')
    timezone_offset: Optional[str] = Field(None, description='The user timezone offset')
    role_id: Optional[int] = Field(None, description='The ID of the user role')
    icon_url: Optional[str] = Field(None, description='The user icon URL')
    is_you: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the requested user is the same which is logged in (in this case, always true)',
    )
    is_deleted: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user is deleted from the company',
    )


class UsersPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data193] = None


class UsersPostResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class SearchByEmail(Enum):
    number_0 = 0
    number_1 = 1


class Acces4(BaseModel):
    app: Optional[App] = None
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class Datum79(BaseModel):
    id: Optional[int] = Field(None, description='The user ID')
    name: Optional[str] = Field(None, description='The user name')
    default_currency: Optional[str] = Field(
        None, description='The user default currency'
    )
    locale: Optional[str] = Field(None, description='The user locale')
    lang: Optional[int] = Field(None, description='The user language ID')
    email: Optional[str] = Field(None, description='The user email')
    phone: Optional[str] = Field(None, description='The user phone')
    activated: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    last_login: Optional[str] = Field(
        None,
        description='The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    created: Optional[str] = Field(
        None,
        description='The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    modified: Optional[str] = Field(
        None,
        description='The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    has_created_company: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user has created a company',
    )
    access: Optional[List[Acces4]] = None
    active_flag: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    timezone_name: Optional[str] = Field(None, description='The user timezone name')
    timezone_offset: Optional[str] = Field(None, description='The user timezone offset')
    role_id: Optional[int] = Field(None, description='The ID of the user role')
    icon_url: Optional[str] = Field(None, description='The user icon URL')
    is_you: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the requested user is the same which is logged in (in this case, always true)',
    )
    is_deleted: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user is deleted from the company',
    )


class UsersFindGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum79]] = None


class Acces5(BaseModel):
    app: Optional[App] = None
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class Language(BaseModel):
    language_code: Optional[str] = Field(None, description='The language code. E.g. en')
    country_code: Optional[str] = Field(None, description='The country code. E.g. US')


class Data194(BaseModel):
    id: Optional[int] = Field(None, description='The user ID')
    name: Optional[str] = Field(None, description='The user name')
    default_currency: Optional[str] = Field(
        None, description='The user default currency'
    )
    locale: Optional[str] = Field(None, description='The user locale')
    lang: Optional[int] = Field(None, description='The user language ID')
    email: Optional[str] = Field(None, description='The user email')
    phone: Optional[str] = Field(None, description='The user phone')
    activated: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    last_login: Optional[str] = Field(
        None,
        description='The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    created: Optional[str] = Field(
        None,
        description='The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    modified: Optional[str] = Field(
        None,
        description='The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    has_created_company: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user has created a company',
    )
    access: Optional[List[Acces5]] = None
    active_flag: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    timezone_name: Optional[str] = Field(None, description='The user timezone name')
    timezone_offset: Optional[str] = Field(None, description='The user timezone offset')
    role_id: Optional[int] = Field(None, description='The ID of the user role')
    icon_url: Optional[str] = Field(None, description='The user icon URL')
    is_you: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the requested user is the same which is logged in (in this case, always true)',
    )
    is_deleted: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user is deleted from the company',
    )
    company_id: Optional[int] = Field(None, description='The user company ID')
    company_name: Optional[str] = Field(None, description='The user company name')
    company_domain: Optional[str] = Field(None, description='The user company domain')
    company_country: Optional[str] = Field(None, description='The user company country')
    company_industry: Optional[str] = Field(
        None, description='The user company industry'
    )
    language: Optional[Language] = Field(None, description='The user language details')


class UsersMeGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data194] = None


class UsersMeGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')
    errorCode: Optional[int] = Field(None, description='The response error code')


class Acces6(BaseModel):
    app: Optional[App] = None
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class Data195(BaseModel):
    id: Optional[int] = Field(None, description='The user ID')
    name: Optional[str] = Field(None, description='The user name')
    default_currency: Optional[str] = Field(
        None, description='The user default currency'
    )
    locale: Optional[str] = Field(None, description='The user locale')
    lang: Optional[int] = Field(None, description='The user language ID')
    email: Optional[str] = Field(None, description='The user email')
    phone: Optional[str] = Field(None, description='The user phone')
    activated: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    last_login: Optional[str] = Field(
        None,
        description='The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    created: Optional[str] = Field(
        None,
        description='The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    modified: Optional[str] = Field(
        None,
        description='The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    has_created_company: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user has created a company',
    )
    access: Optional[List[Acces6]] = None
    active_flag: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    timezone_name: Optional[str] = Field(None, description='The user timezone name')
    timezone_offset: Optional[str] = Field(None, description='The user timezone offset')
    role_id: Optional[int] = Field(None, description='The ID of the user role')
    icon_url: Optional[str] = Field(None, description='The user icon URL')
    is_you: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the requested user is the same which is logged in (in this case, always true)',
    )
    is_deleted: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user is deleted from the company',
    )


class UsersIdGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data195] = None


class UsersIdGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class UsersIdPutRequest(BaseModel):
    active_flag: bool = Field(
        ...,
        description='Whether the user is active or not. `false` = Not activated, `true` = Activated',
    )


class Acces7(BaseModel):
    app: Optional[App] = None
    admin: Optional[bool] = None
    permission_set_id: Optional[str] = None


class Data196(BaseModel):
    id: Optional[int] = Field(None, description='The user ID')
    name: Optional[str] = Field(None, description='The user name')
    default_currency: Optional[str] = Field(
        None, description='The user default currency'
    )
    locale: Optional[str] = Field(None, description='The user locale')
    lang: Optional[int] = Field(None, description='The user language ID')
    email: Optional[str] = Field(None, description='The user email')
    phone: Optional[str] = Field(None, description='The user phone')
    activated: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    last_login: Optional[str] = Field(
        None,
        description='The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    created: Optional[str] = Field(
        None,
        description='The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    modified: Optional[str] = Field(
        None,
        description='The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS',
    )
    has_created_company: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user has created a company',
    )
    access: Optional[List[Acces7]] = None
    active_flag: Optional[bool] = Field(
        None, description='Boolean that indicates whether the user is activated'
    )
    timezone_name: Optional[str] = Field(None, description='The user timezone name')
    timezone_offset: Optional[str] = Field(None, description='The user timezone offset')
    role_id: Optional[int] = Field(None, description='The ID of the user role')
    icon_url: Optional[str] = Field(None, description='The user icon URL')
    is_you: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the requested user is the same which is logged in (in this case, always true)',
    )
    is_deleted: Optional[bool] = Field(
        None,
        description='Boolean that indicates whether the user is deleted from the company',
    )


class UsersIdPutResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data196] = None


class UsersIdPutResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class UsersIdFollowersGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[int]] = Field(None, description='The list of user IDs')


class UsersIdFollowersGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')


class Data197(BaseModel):
    can_add_custom_fields: Optional[bool] = Field(
        None, description='If the user can add custom fields'
    )
    can_add_products: Optional[bool] = Field(
        None, description='If the user can add products'
    )
    can_add_prospects_as_leads: Optional[bool] = Field(
        None, description='If the user can add prospects as leads'
    )
    can_bulk_edit_items: Optional[bool] = Field(
        None, description='If the user can bulk edit items'
    )
    can_change_visibility_of_items: Optional[bool] = Field(
        None, description='If the user can change visibility of items'
    )
    can_convert_deals_to_leads: Optional[bool] = Field(
        None, description='If the user can convert deals to leads'
    )
    can_create_own_workflow: Optional[bool] = Field(
        None, description='If the user can create workflows'
    )
    can_delete_activities: Optional[bool] = Field(
        None, description='If the user can delete activities'
    )
    can_delete_custom_fields: Optional[bool] = Field(
        None, description='If the user can delete custom fields'
    )
    can_delete_deals: Optional[bool] = Field(
        None, description='If the user can delete deals'
    )
    can_edit_custom_fields: Optional[bool] = Field(
        None, description='If the user can edit custom fields'
    )
    can_edit_deals_closed_date: Optional[bool] = Field(
        None, description="If the user can edit deals' closed date"
    )
    can_edit_products: Optional[bool] = Field(
        None, description='If the user can edit products'
    )
    can_edit_shared_filters: Optional[bool] = Field(
        None, description='If the user can edit shared filters'
    )
    can_export_data_from_lists: Optional[bool] = Field(
        None, description='If the user can export data from item lists'
    )
    can_follow_other_users: Optional[bool] = Field(
        None, description='If the user can follow other users'
    )
    can_merge_deals: Optional[bool] = Field(
        None, description='If the user can merge deals'
    )
    can_merge_organizations: Optional[bool] = Field(
        None, description='If the user can merge organizations'
    )
    can_merge_people: Optional[bool] = Field(
        None, description='If the user can merge people'
    )
    can_modify_labels: Optional[bool] = Field(
        None, description='If the user can modify labels'
    )
    can_see_company_wide_statistics: Optional[bool] = Field(
        None, description='If the user can see company-wide statistics'
    )
    can_see_deals_list_summary: Optional[bool] = Field(
        None, description='If the user can see the summary on the deals page'
    )
    can_see_hidden_items_names: Optional[bool] = Field(
        None, description='If the user can see the names of hidden items'
    )
    can_see_other_users: Optional[bool] = Field(
        None, description='If the user can see other users'
    )
    can_see_other_users_statistics: Optional[bool] = Field(
        None, description="If the user can see other users' statistics"
    )
    can_see_security_dashboard: Optional[bool] = Field(
        None, description='If the user can see security dashboard'
    )
    can_share_filters: Optional[bool] = Field(
        None, description='If the user can share filters'
    )
    can_share_insights: Optional[bool] = Field(
        None, description='If the user can share insights'
    )
    can_use_api: Optional[bool] = Field(None, description='If the user can use API')
    can_use_email_tracking: Optional[bool] = Field(
        None, description='If the user can use email tracking'
    )
    can_use_import: Optional[bool] = Field(
        None, description='If the user can use import'
    )


class UsersIdPermissionsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data197] = None


class Datum80(BaseModel):
    parent_role_id: Optional[int] = Field(None, description='The ID of the parent role')
    name: Optional[str] = Field(None, description='The name of the role')
    user_id: Optional[int] = Field(None, description='The user ID')
    role_id: Optional[int] = Field(None, description='The role ID')
    active_flag: Optional[bool] = Field(
        None, description='Whether the role is active or not'
    )
    type: Optional[str] = Field(None, description='The assignment type')


class AdditionalData77(BaseModel):
    pagination: Optional[Pagination18] = Field(
        None, description='The pagination details in the role list'
    )


class UsersIdRoleAssignmentsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[List[Datum80]] = Field(None, description='The role assignments')
    additional_data: Optional[AdditionalData77] = Field(
        None, description='The additional data in the role list'
    )


class Data198(BaseModel):
    deal_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the deals for the role'
    )
    lead_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the leads for the role'
    )
    org_default_visibility: Optional[float] = Field(
        None,
        description='The default visibility level of the organizations for the role',
    )
    person_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the people for the role'
    )
    product_default_visibility: Optional[float] = Field(
        None, description='The default visibility level of the products for the role'
    )
    deal_access_level: Optional[float] = Field(
        None,
        description='The access level of the deals for the role (only for default role)',
    )
    org_access_level: Optional[float] = Field(
        None,
        description='The access level of the organizations for the role (only for default role)',
    )
    person_access_level: Optional[float] = Field(
        None,
        description='The access level of the people for the role (only for default role)',
    )
    product_access_level: Optional[float] = Field(
        None,
        description='The access level of the products for the role (only for default role)',
    )


class UsersIdRoleSettingsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data198] = Field(None, description='The settings for the role')


class Data199(BaseModel):
    google: Optional[str] = Field(
        None, description='The third party ID or false in case the ID is not found'
    )


class UserConnectionsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data199] = Field(None, description='The object of UserConnections')


class UserConnectionsGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')
    errorCode: Optional[int] = Field(None, description='The response error code')


class Data200(BaseModel):
    marketplace_allow_custom_install_url: Optional[bool] = Field(
        None,
        description='If the vendors are allowed to install custom Marketplace apps with functionality and content in the Pipedrive UI or not',
    )
    marketplace_app_extensions_vendor: Optional[bool] = Field(
        None,
        description='If the vendors are allowed to extend their Marketplace apps with functionality and content in the Pipedrive UI or not',
    )
    marketplace_team: Optional[bool] = Field(
        None,
        description='If the vendors are allowed to be part of the Marketplace team or not',
    )
    list_limit: Optional[float] = Field(
        None, description='The number of results shown in list by default'
    )
    beta_app: Optional[bool] = Field(None, description='Whether beta app is enabled')
    prevent_salesphone_callto_override: Optional[bool] = Field(
        None, description='Prevent salesphone call to override'
    )
    file_upload_destination: Optional[str] = Field(
        None, description='The destination of file upload'
    )
    callto_link_syntax: Optional[str] = Field(
        None, description='The call to link syntax'
    )
    autofill_deal_expected_close_date: Optional[bool] = Field(
        None,
        description='Whether the expected close date of the deal is filled automatically or not',
    )
    person_duplicate_condition: Optional[str] = Field(
        None, description='Allow the vendors to duplicate a person'
    )


class UserSettingsGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    data: Optional[Data200] = None


class UserSettingsGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')
    errorCode: Optional[int] = Field(None, description='The response error code')


class IsActive(BaseModel):
    pass


class Type12(Enum):
    general = 'general'
    app = 'app'


class Datum81(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the Webhook')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the Webhook'
    )
    owner_id: Optional[int] = Field(
        None, description='The ID of the user who owns the Webhook'
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user related to the Webhook'
    )
    event_action: Optional[str] = Field(None, description='The Webhook action')
    event_object: Optional[str] = Field(None, description='The Webhook object')
    subscription_url: Optional[str] = Field(
        None, description='The subscription URL of the Webhook'
    )
    is_active: Optional[IsActive] = Field(None, description="The Webhook's status")
    add_time: Optional[datetime] = Field(
        None, description='The date when the Webhook was added'
    )
    remove_time: Optional[datetime] = Field(
        None, description='The date when the Webhook was removed (if removed)'
    )
    type: Optional[Type12] = Field(None, description='The type of the Webhook')
    http_auth_user: Optional[str] = Field(
        None, description='The username of the `subscription_url` of the Webhook'
    )
    http_auth_password: Optional[str] = Field(
        None, description='The password of the `subscription_url` of the Webhook'
    )
    additional_data: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data related to the Webhook'
    )
    remove_reason: Optional[str] = Field(
        None, description='The removal reason of the Webhook (if removed)'
    )
    last_delivery_time: Optional[datetime] = Field(
        None, description='The last delivery time of the Webhook'
    )
    last_http_status: Optional[int] = Field(
        None, description='The last delivery HTTP status of the Webhook'
    )
    admin_id: Optional[int] = Field(
        None, description='The ID of the admin of the Webhook'
    )


class WebhooksGetResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    status: Optional[str] = Field(None, description='The status of the response')
    data: Optional[List[Datum81]] = Field(None, description='The array of Webhooks')


class WebhooksGetResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')
    errorCode: Optional[int] = Field(None, description='The response error code')


class EventAction(Enum):
    added = 'added'
    updated = 'updated'
    merged = 'merged'
    deleted = 'deleted'
    field_ = '*'


class EventObject(Enum):
    activity = 'activity'
    activityType = 'activityType'
    deal = 'deal'
    note = 'note'
    organization = 'organization'
    person = 'person'
    pipeline = 'pipeline'
    product = 'product'
    stage = 'stage'
    user = 'user'
    field_ = '*'


class Version(Enum):
    field_1_0 = '1.0'
    field_2_0 = '2.0'


class WebhooksPostRequest(BaseModel):
    subscription_url: str = Field(
        ...,
        description='A full, valid, publicly accessible URL which determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the `subscription_url` and the chosen URL must not redirect to another link.',
    )
    event_action: EventAction = Field(
        ...,
        description='The type of action to receive notifications about. Wildcard will match all supported actions.',
    )
    event_object: EventObject = Field(
        ...,
        description='The type of object to receive notifications about. Wildcard will match all supported objects.',
    )
    user_id: Optional[int] = Field(
        None,
        description="The ID of the user that this webhook will be authorized with. You have the option to use a different user's `user_id`. If it is not set, the current user's `user_id` will be used. As each webhook event is checked against a user's permissions, the webhook will only be sent if the user has access to the specified object(s). If you want to receive notifications for all events, please use a top-level admin user’s `user_id`.",
    )
    http_auth_user: Optional[str] = Field(
        None,
        description='The HTTP basic auth username of the subscription URL endpoint (if required)',
    )
    http_auth_password: Optional[str] = Field(
        None,
        description='The HTTP basic auth password of the subscription URL endpoint (if required)',
    )
    version: Optional[Version] = Field('1.0', description="The webhook's version")


class Data201(BaseModel):
    id: Optional[int] = Field(None, description='The ID of the Webhook')
    company_id: Optional[int] = Field(
        None, description='The ID of the company related to the Webhook'
    )
    owner_id: Optional[int] = Field(
        None, description='The ID of the user who owns the Webhook'
    )
    user_id: Optional[int] = Field(
        None, description='The ID of the user related to the Webhook'
    )
    event_action: Optional[str] = Field(None, description='The Webhook action')
    event_object: Optional[str] = Field(None, description='The Webhook object')
    subscription_url: Optional[str] = Field(
        None, description='The subscription URL of the Webhook'
    )
    is_active: Optional[IsActive] = Field(None, description="The Webhook's status")
    add_time: Optional[datetime] = Field(
        None, description='The date when the Webhook was added'
    )
    remove_time: Optional[datetime] = Field(
        None, description='The date when the Webhook was removed (if removed)'
    )
    type: Optional[Type12] = Field(None, description='The type of the Webhook')
    http_auth_user: Optional[str] = Field(
        None, description='The username of the `subscription_url` of the Webhook'
    )
    http_auth_password: Optional[str] = Field(
        None, description='The password of the `subscription_url` of the Webhook'
    )
    additional_data: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data related to the Webhook'
    )
    remove_reason: Optional[str] = Field(
        None, description='The removal reason of the Webhook (if removed)'
    )
    last_delivery_time: Optional[datetime] = Field(
        None, description='The last delivery time of the Webhook'
    )
    last_http_status: Optional[int] = Field(
        None, description='The last delivery HTTP status of the Webhook'
    )
    admin_id: Optional[int] = Field(
        None, description='The ID of the admin of the Webhook'
    )


class WebhooksPostResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    status: Optional[str] = Field(None, description='The status of the response')
    data: Optional[Data201] = None


class WebhooksPostResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    status: Optional[str] = Field(None, description='The status of the response')
    errors: Optional[Dict[str, Any]] = Field(None, description='List of errors')


class WebhooksPostResponse2(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')
    errorCode: Optional[int] = Field(None, description='The response error code')


class WebhooksIdDeleteResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    status: Optional[str] = Field(None, description='The status of the response')


class WebhooksIdDeleteResponse1(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    error: Optional[str] = Field(None, description='The error message')
    errorCode: Optional[int] = Field(None, description='The response error code')


class WebhooksIdDeleteResponse2(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    message: Optional[str] = Field(None, description='The error message')


class WebhooksIdDeleteResponse3(BaseModel):
    success: Optional[bool] = Field(
        None, description='If the response is successful or not'
    )
    status: Optional[str] = Field(None, description='The status of the response')
    errors: Optional[Dict[str, Any]] = Field(None, description='List of errors')
